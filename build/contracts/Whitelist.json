{
  "contractName": "Whitelist",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_exchange",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "fqdn",
          "type": "bytes32"
        },
        {
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "adminUpdateWhitelist",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "fqdn",
          "type": "bytes32"
        }
      ],
      "name": "adminGetAddressByDomain",
      "outputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "adminGetDomainByAddress",
      "outputs": [
        {
          "name": "fqdn",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDomainByAddress",
      "outputs": [
        {
          "name": "fqdn",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "hash",
          "type": "bytes32"
        },
        {
          "name": "signerAddress",
          "type": "address"
        },
        {
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "name": "isValid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "name": "makerAddress",
              "type": "address"
            },
            {
              "name": "takerAddress",
              "type": "address"
            },
            {
              "name": "feeRecipientAddress",
              "type": "address"
            },
            {
              "name": "senderAddress",
              "type": "address"
            },
            {
              "name": "makerAssetAmount",
              "type": "uint256"
            },
            {
              "name": "takerAssetAmount",
              "type": "uint256"
            },
            {
              "name": "makerFee",
              "type": "uint256"
            },
            {
              "name": "takerFee",
              "type": "uint256"
            },
            {
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "name": "salt",
              "type": "uint256"
            },
            {
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "name": "takerAssetData",
              "type": "bytes"
            }
          ],
          "name": "order",
          "type": "tuple"
        },
        {
          "name": "takerAssetFillAmount",
          "type": "uint256"
        },
        {
          "name": "salt",
          "type": "uint256"
        },
        {
          "name": "orderSignature",
          "type": "bytes"
        }
      ],
      "name": "fillOrderIfWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.5+commit.47a71e8f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"order\",\"type\":\"tuple\"},{\"name\":\"takerAssetFillAmount\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"orderSignature\",\"type\":\"bytes\"}],\"name\":\"fillOrderIfWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"adminGetDomainByAddress\",\"outputs\":[{\"name\":\"fqdn\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDomainByAddress\",\"outputs\":[{\"name\":\"fqdn\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"fqdn\",\"type\":\"bytes32\"},{\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"adminUpdateWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"signerAddress\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"isValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fqdn\",\"type\":\"bytes32\"}],\"name\":\"adminGetAddressByDomain\",\"outputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{\"adminGetDomainByAddress(address)\":{\"details\":\"Admin views any domain mapped to a valid whitelisted address\",\"params\":{\"target\":\"Ethereum address to validate & return DNS domain mapping for.\"}},\"adminUpdateWhitelist(address,bytes32,bool)\":{\"details\":\"Admin adds or removes an address & domain mapping from the whitelist.\",\"params\":{\"fqdn\":\"DNS domain to map to ethereum address.\",\"isApproved\":\"Whitelist status to assign to address.\",\"target\":\"Address to add or remove from whitelist.\"}},\"fillOrderIfWhitelisted((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,uint256,bytes)\":{\"details\":\"Fills an order using `msg.sender` as the taker.      The transaction will revert if both the maker and taker are not whitelisted.      Orders should specify this contract as the `senderAddress` in order to gaurantee      that both maker and taker have been whitelisted.\",\"params\":{\"order\":\"Order struct containing order specifications.\",\"orderSignature\":\"Proof that order has been created by maker.\",\"salt\":\"Arbitrary value to gaurantee uniqueness of 0x transaction hash.\",\"takerAssetFillAmount\":\"Desired amount of takerAsset to sell.\"}},\"getDomainByAddress()\":{\"details\":\"Valid whitelisted address can query its own domain mapping.\"},\"isValidSignature(bytes32,address,bytes)\":{\"details\":\"Verifies signer is same as signer of current Ethereum transaction.      NOTE: This function can currently be used to validate signatures coming from outside of this contract.      Extra safety checks can be added for a production contract.\",\"params\":{\"signature\":\"Proof of signing.\",\"signerAddress\":\"Address that should have signed the given hash.\"},\"return\":\"Validity of order signature.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/lauren/github/registry-contract/contracts/Whitelist.sol\":\"Whitelist\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/lauren/github/registry-contract/contracts/IAssetProxyDispatcher.sol\":{\"keccak256\":\"0x9f2df0836b76e56b8fe113c224a83b95ff0c984cedfb660286eab94edb151b88\",\"urls\":[\"bzzr://1c7ca7647f032f742277cfea04722c1241e136198f7b1b424c9eed709f175c53\"]},\"/Users/lauren/github/registry-contract/contracts/IExchange.sol\":{\"keccak256\":\"0x7640d57cbe84e44d21d70f988c75d8a3e396be090268665ed24de5aab130d89b\",\"urls\":[\"bzzr://2d8926f14c4c8e7d8d94fc045af7029fe5e2952cd59f5d24d1660afe89e8496c\"]},\"/Users/lauren/github/registry-contract/contracts/IExchangeCore.sol\":{\"keccak256\":\"0x692849db6311f64436b7091679d76b2f458ffa9d88b1127c34088bf1023f3d96\",\"urls\":[\"bzzr://0d2083b036ae3026985e435f427e6fc6d7ba1a3cadbcfb92a35d67ca0a313376\"]},\"/Users/lauren/github/registry-contract/contracts/IMatchOrders.sol\":{\"keccak256\":\"0xc8bc1846e6a380a329c1bffa69c1a8b814e0f79e75f074e021ee7b5abc941cc1\",\"urls\":[\"bzzr://0bc85fc36da995c219ce5009850cbf912405c1679e0da77b9de0ad02c050cf67\"]},\"/Users/lauren/github/registry-contract/contracts/ISignatureValidator.sol\":{\"keccak256\":\"0x90b44476bb95906ed861b3d038aa9578b6dead3283f5ec192c0985180dba7eee\",\"urls\":[\"bzzr://95730ccaa6602bffdaba8be7bafb18936a1eb711fd3c9b7bc66530602ff87fab\"]},\"/Users/lauren/github/registry-contract/contracts/ITransactions.sol\":{\"keccak256\":\"0x4604da6f13306fbdd56d453ff47c04d9f2dd71d94af511bcf246306f238c7fbf\",\"urls\":[\"bzzr://77f262e41caaee63031fafeea078718f0dfe735c90f6fc0b827735eb36a1b2d2\"]},\"/Users/lauren/github/registry-contract/contracts/IWrapperFunctions.sol\":{\"keccak256\":\"0xcb15626aac4b048e3982db276638a5a5828fc24fe6afdb58c1f8646dd3dc03ad\",\"urls\":[\"bzzr://bd17dc8173df53e93a5604c0ef5dd28585fdaaab9467c3e99f1bee89068536f5\"]},\"/Users/lauren/github/registry-contract/contracts/Whitelist.sol\":{\"keccak256\":\"0xe5d12b591e5e70b43c37bb8e32493b81a56674d513613a926785be0d6c5f9c4d\",\"urls\":[\"bzzr://1df2a64bf6be3d35ada05e942c52e088762f210f36a2d9eac54c86f9342bd3fb\"]},\"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol\":{\"keccak256\":\"0x9e3c7630c8389a8a13294a4224e7051ed5c64268864f53fc359377bdc8115c28\",\"urls\":[\"bzzr://af7152a1885ab00eb728e3e294b33b4eb1bdf3c2f6d423f5ce93d32da94f53dc\"]},\"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\":{\"keccak256\":\"0xd2901bceaae8c4f1b6b13b38bf1c99dc8fa02fd82504009f8b82fc1c6a26c8ed\",\"urls\":[\"bzzr://eb694a8bbb5671db1e00f2ad8c99c6982448c2f9114e759f64ee00c52043c259\"]},\"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\":{\"keccak256\":\"0xaea24ce7e1f7f15dd6a3f58f7c93ffdb52bbba9527ecd7bc60271e21b253349f\",\"urls\":[\"bzzr://2a7fb7eb2c0775cc74161d37f9454da5f09e2ba00aa7248c38805f3dd7c3fada\"]},\"@0x/contracts-utils/contracts/src/Ownable.sol\":{\"keccak256\":\"0xe7c6767e3fa1f51e7086adc94cdd7cfcf7f606ffcafc8942fc2dbbb3d8aded40\",\"urls\":[\"bzzr://eaec8ad75455cecc32cdb01f7522cc35b3d2f47542b2d140e84e510fb69a7727\"]},\"@0x/contracts-utils/contracts/src/SafeMath.sol\":{\"keccak256\":\"0x27027b268113e424039e67bbab9bfcfd76d0e5707c4b3068af68382c8f35bd34\",\"urls\":[\"bzzr://254aa51bd03ccc0f5096315b0883b03de9a3bc7105744570d6a77e00f4c2d6bd\"]},\"@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol\":{\"keccak256\":\"0xb48efd8c0afe60386dda1b01329b5ee8a65cae57b930bd6a010ae9af72b177cc\",\"urls\":[\"bzzr://025b49d4d83d2f9bcb4945381f4f92edf177d2667cdc15c9e1f755ca531f86e1\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405160208062001a738339810180604052620000339190810190620001dc565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550307f0500000000000000000000000000000000000000000000000000000000000000604051602001620000e99291906200023e565b604051602081830303815290604052600590805190602001906200010f92919062000117565b505062000341565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015a57805160ff19168380011785556200018b565b828001600101855582156200018b579182015b828111156200018a5782518255916020019190600101906200016d565b5b5090506200019a91906200019e565b5090565b620001c391905b80821115620001bf576000816000905550600101620001a5565b5090565b90565b6000620001d48251620002ce565b905092915050565b600060208284031215620001ef57600080fd5b6000620001ff84828501620001c6565b91505092915050565b6200021d62000217826200026e565b62000302565b82525050565b62000238620002328262000282565b62000316565b82525050565b60006200024c828562000208565b6014820191506200025e828462000223565b6001820191508190509392505050565b60006200027b82620002ae565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002db82620002e2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030f8262000320565b9050919050565b6000819050919050565b60006200032d8262000334565b9050919050565b60008160601b9050919050565b61172280620003516000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638c0e1562116100665780638c0e1562146101325780638da5cb5b1461014e578063936347021461016c578063b3b5e4c91461019c578063f2fde38b146101cc57610093565b8063141da876146100985780633af32abf146100b457806383f18698146100e45780638816a74a14610114575b600080fd5b6100b260048036036100ad9190810190610f4f565b6101e8565b005b6100ce60048036036100c99190810190610e42565b6104d2565b6040516100db91906113a3565b60405180910390f35b6100fe60048036036100f99190810190610e42565b6104f2565b60405161010b91906113be565b60405180910390f35b61011c61065a565b60405161012991906113be565b60405180910390f35b61014c60048036036101479190810190610e6b565b61072f565b005b6101566108b2565b6040516101639190611388565b60405180910390f35b61018660048036036101819190810190610ee3565b6108d7565b60405161019391906113a3565b60405180910390f35b6101b660048036036101b19190810190610eba565b610912565b6040516101c39190611388565b60405180910390f35b6101e660048036036101e19190810190610e42565b610aa1565b005b60003390503273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561025d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025490611459565b60405180910390fd5b60016000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690611439565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561037d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610374906113d9565b60405180910390fd5b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4be83d5905060e01b8686856040516024016103d793929190611479565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bfc8bfce85848460056040518563ffffffff1660e01b815260040161049894939291906114be565b600060405180830381600087803b1580156104b257600080fd5b505af11580156104c6573d6000803e3d6000fd5b50505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057c90611419565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906113f9565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e190611459565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b790611419565b60405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16149050949350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611419565b60405180910390fd5b600160006003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5d906113f9565b60405180910390fd5b6003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2990611419565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610ba957806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000610bb88235611643565b905092915050565b6000610bcc8235611655565b905092915050565b6000610be08235611661565b905092915050565b60008083601f8401121515610bfc57600080fd5b8235905067ffffffffffffffff811115610c1557600080fd5b602083019150836001820283011115610c2d57600080fd5b9250929050565b600082601f8301121515610c4757600080fd5b8135610c5a610c558261153e565b611511565b91508082526020830160208301858383011115610c7657600080fd5b610c81838284611695565b50505092915050565b600082601f8301121515610c9d57600080fd5b8135610cb0610cab8261156a565b611511565b91508082526020830160208301858383011115610ccc57600080fd5b610cd7838284611695565b50505092915050565b60006101808284031215610cf357600080fd5b610cfe610180611511565b90506000610d0e84828501610bac565b6000830152506020610d2284828501610bac565b6020830152506040610d3684828501610bac565b6040830152506060610d4a84828501610bac565b6060830152506080610d5e84828501610e2e565b60808301525060a0610d7284828501610e2e565b60a08301525060c0610d8684828501610e2e565b60c08301525060e0610d9a84828501610e2e565b60e083015250610100610daf84828501610e2e565b61010083015250610120610dc584828501610e2e565b6101208301525061014082013567ffffffffffffffff811115610de757600080fd5b610df384828501610c34565b6101408301525061016082013567ffffffffffffffff811115610e1557600080fd5b610e2184828501610c34565b6101608301525092915050565b6000610e3a823561168b565b905092915050565b600060208284031215610e5457600080fd5b6000610e6284828501610bac565b91505092915050565b600080600060608486031215610e8057600080fd5b6000610e8e86828701610bac565b9350506020610e9f86828701610bd4565b9250506040610eb086828701610bc0565b9150509250925092565b600060208284031215610ecc57600080fd5b6000610eda84828501610bd4565b91505092915050565b60008060008060608587031215610ef957600080fd5b6000610f0787828801610bd4565b9450506020610f1887828801610bac565b935050604085013567ffffffffffffffff811115610f3557600080fd5b610f4187828801610be8565b925092505092959194509250565b60008060008060808587031215610f6557600080fd5b600085013567ffffffffffffffff811115610f7f57600080fd5b610f8b87828801610ce0565b9450506020610f9c87828801610e2e565b9350506040610fad87828801610e2e565b925050606085013567ffffffffffffffff811115610fca57600080fd5b610fd687828801610c8a565b91505092959194509250565b610feb816115f1565b82525050565b610ffa816115f1565b82525050565b61100981611603565b82525050565b6110188161160f565b82525050565b6000611029826115b3565b61103381856115cf565b93506110438185602086016116a4565b61104c816116d7565b840191505092915050565b6000611062826115a8565b61106c81856115be565b935061107c8185602086016116a4565b611085816116d7565b840191505092915050565b6000815460018116600081146110ad57600181146110d357611117565b607f60028304166110be81876115cf565b955060ff198316865260208601935050611117565b600282046110e181876115cf565b95506110ec85611596565b60005b8281101561110e578154818901526001820191506020810190506110ef565b80880195505050505b505092915050565b600061112c6015836115e0565b91507f54414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b600061116c6017836115e0565b91507f414444524553535f4e4f545f57484954454c49535445440000000000000000006000830152602082019050919050565b60006111ac6013836115e0565b91507f4f4e4c595f434f4e54524143545f4f574e4552000000000000000000000000006000830152602082019050919050565b60006111ec6015836115e0565b91507f4d414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b600061122c600e836115e0565b91507f494e56414c49445f53454e4445520000000000000000000000000000000000006000830152602082019050919050565b6000610180830160008301516112786000860182610fe2565b50602083015161128b6020860182610fe2565b50604083015161129e6040860182610fe2565b5060608301516112b16060860182610fe2565b5060808301516112c4608086018261136a565b5060a08301516112d760a086018261136a565b5060c08301516112ea60c086018261136a565b5060e08301516112fd60e086018261136a565b5061010083015161131261010086018261136a565b5061012083015161132761012086018261136a565b506101408301518482036101408601526113418282611057565b91505061016083015184820361016086015261135d8282611057565b9150508091505092915050565b61137381611639565b82525050565b61138281611639565b82525050565b600060208201905061139d6000830184610ff1565b92915050565b60006020820190506113b86000830184611000565b92915050565b60006020820190506113d3600083018461100f565b92915050565b600060208201905081810360008301526113f28161111f565b9050919050565b600060208201905081810360008301526114128161115f565b9050919050565b600060208201905081810360008301526114328161119f565b9050919050565b60006020820190508181036000830152611452816111df565b9050919050565b600060208201905081810360008301526114728161121f565b9050919050565b60006060820190508181036000830152611493818661125f565b90506114a26020830185611379565b81810360408301526114b4818461101e565b9050949350505050565b60006080820190506114d36000830187611379565b6114e06020830186610ff1565b81810360408301526114f2818561101e565b905081810360608301526115068184611090565b905095945050505050565b6000604051905081810181811067ffffffffffffffff8211171561153457600080fd5b8060405250919050565b600067ffffffffffffffff82111561155557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561158157600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006115fc82611619565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061164e8261166b565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156116c25780820151818401526020810190506116a7565b838111156116d1576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058206f49851f9c50d56cf1a879d93d3dfd96817e130c0eebefdd479644013c40fbe36c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638c0e1562116100665780638c0e1562146101325780638da5cb5b1461014e578063936347021461016c578063b3b5e4c91461019c578063f2fde38b146101cc57610093565b8063141da876146100985780633af32abf146100b457806383f18698146100e45780638816a74a14610114575b600080fd5b6100b260048036036100ad9190810190610f4f565b6101e8565b005b6100ce60048036036100c99190810190610e42565b6104d2565b6040516100db91906113a3565b60405180910390f35b6100fe60048036036100f99190810190610e42565b6104f2565b60405161010b91906113be565b60405180910390f35b61011c61065a565b60405161012991906113be565b60405180910390f35b61014c60048036036101479190810190610e6b565b61072f565b005b6101566108b2565b6040516101639190611388565b60405180910390f35b61018660048036036101819190810190610ee3565b6108d7565b60405161019391906113a3565b60405180910390f35b6101b660048036036101b19190810190610eba565b610912565b6040516101c39190611388565b60405180910390f35b6101e660048036036101e19190810190610e42565b610aa1565b005b60003390503273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561025d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025490611459565b60405180910390fd5b60016000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690611439565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561037d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610374906113d9565b60405180910390fd5b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4be83d5905060e01b8686856040516024016103d793929190611479565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bfc8bfce85848460056040518563ffffffff1660e01b815260040161049894939291906114be565b600060405180830381600087803b1580156104b257600080fd5b505af11580156104c6573d6000803e3d6000fd5b50505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057c90611419565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906113f9565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e190611459565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b790611419565b60405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16149050949350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611419565b60405180910390fd5b600160006003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5d906113f9565b60405180910390fd5b6003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2990611419565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610ba957806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000610bb88235611643565b905092915050565b6000610bcc8235611655565b905092915050565b6000610be08235611661565b905092915050565b60008083601f8401121515610bfc57600080fd5b8235905067ffffffffffffffff811115610c1557600080fd5b602083019150836001820283011115610c2d57600080fd5b9250929050565b600082601f8301121515610c4757600080fd5b8135610c5a610c558261153e565b611511565b91508082526020830160208301858383011115610c7657600080fd5b610c81838284611695565b50505092915050565b600082601f8301121515610c9d57600080fd5b8135610cb0610cab8261156a565b611511565b91508082526020830160208301858383011115610ccc57600080fd5b610cd7838284611695565b50505092915050565b60006101808284031215610cf357600080fd5b610cfe610180611511565b90506000610d0e84828501610bac565b6000830152506020610d2284828501610bac565b6020830152506040610d3684828501610bac565b6040830152506060610d4a84828501610bac565b6060830152506080610d5e84828501610e2e565b60808301525060a0610d7284828501610e2e565b60a08301525060c0610d8684828501610e2e565b60c08301525060e0610d9a84828501610e2e565b60e083015250610100610daf84828501610e2e565b61010083015250610120610dc584828501610e2e565b6101208301525061014082013567ffffffffffffffff811115610de757600080fd5b610df384828501610c34565b6101408301525061016082013567ffffffffffffffff811115610e1557600080fd5b610e2184828501610c34565b6101608301525092915050565b6000610e3a823561168b565b905092915050565b600060208284031215610e5457600080fd5b6000610e6284828501610bac565b91505092915050565b600080600060608486031215610e8057600080fd5b6000610e8e86828701610bac565b9350506020610e9f86828701610bd4565b9250506040610eb086828701610bc0565b9150509250925092565b600060208284031215610ecc57600080fd5b6000610eda84828501610bd4565b91505092915050565b60008060008060608587031215610ef957600080fd5b6000610f0787828801610bd4565b9450506020610f1887828801610bac565b935050604085013567ffffffffffffffff811115610f3557600080fd5b610f4187828801610be8565b925092505092959194509250565b60008060008060808587031215610f6557600080fd5b600085013567ffffffffffffffff811115610f7f57600080fd5b610f8b87828801610ce0565b9450506020610f9c87828801610e2e565b9350506040610fad87828801610e2e565b925050606085013567ffffffffffffffff811115610fca57600080fd5b610fd687828801610c8a565b91505092959194509250565b610feb816115f1565b82525050565b610ffa816115f1565b82525050565b61100981611603565b82525050565b6110188161160f565b82525050565b6000611029826115b3565b61103381856115cf565b93506110438185602086016116a4565b61104c816116d7565b840191505092915050565b6000611062826115a8565b61106c81856115be565b935061107c8185602086016116a4565b611085816116d7565b840191505092915050565b6000815460018116600081146110ad57600181146110d357611117565b607f60028304166110be81876115cf565b955060ff198316865260208601935050611117565b600282046110e181876115cf565b95506110ec85611596565b60005b8281101561110e578154818901526001820191506020810190506110ef565b80880195505050505b505092915050565b600061112c6015836115e0565b91507f54414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b600061116c6017836115e0565b91507f414444524553535f4e4f545f57484954454c49535445440000000000000000006000830152602082019050919050565b60006111ac6013836115e0565b91507f4f4e4c595f434f4e54524143545f4f574e4552000000000000000000000000006000830152602082019050919050565b60006111ec6015836115e0565b91507f4d414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b600061122c600e836115e0565b91507f494e56414c49445f53454e4445520000000000000000000000000000000000006000830152602082019050919050565b6000610180830160008301516112786000860182610fe2565b50602083015161128b6020860182610fe2565b50604083015161129e6040860182610fe2565b5060608301516112b16060860182610fe2565b5060808301516112c4608086018261136a565b5060a08301516112d760a086018261136a565b5060c08301516112ea60c086018261136a565b5060e08301516112fd60e086018261136a565b5061010083015161131261010086018261136a565b5061012083015161132761012086018261136a565b506101408301518482036101408601526113418282611057565b91505061016083015184820361016086015261135d8282611057565b9150508091505092915050565b61137381611639565b82525050565b61138281611639565b82525050565b600060208201905061139d6000830184610ff1565b92915050565b60006020820190506113b86000830184611000565b92915050565b60006020820190506113d3600083018461100f565b92915050565b600060208201905081810360008301526113f28161111f565b9050919050565b600060208201905081810360008301526114128161115f565b9050919050565b600060208201905081810360008301526114328161119f565b9050919050565b60006020820190508181036000830152611452816111df565b9050919050565b600060208201905081810360008301526114728161121f565b9050919050565b60006060820190508181036000830152611493818661125f565b90506114a26020830185611379565b81810360408301526114b4818461101e565b9050949350505050565b60006080820190506114d36000830187611379565b6114e06020830186610ff1565b81810360408301526114f2818561101e565b905081810360608301526115068184611090565b905095945050505050565b6000604051905081810181811067ffffffffffffffff8211171561153457600080fd5b8060405250919050565b600067ffffffffffffffff82111561155557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561158157600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006115fc82611619565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061164e8261166b565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156116c25780820151818401526020810190506116a7565b838111156116d1576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058206f49851f9c50d56cf1a879d93d3dfd96817e130c0eebefdd479644013c40fbe36c6578706572696d656e74616cf50037",
  "sourceMap": "788:5040:8:-;;;1364:188;8:9:-1;5:2;;;30:1;27;20:12;5:2;1364:188:8;;;;;;;;;;;;;;;;;;;;;;181:10:12;173:5;;:18;;;;;;;;;;;;;;;;;;1446:9:8;1425:8;;:31;;;;;;;;;;;;;;;;;;1513:4;1520:24;1488:57;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1488:57:8;;;1466:19;:79;;;;;;;;;;;;:::i;:::-;;1364:188;788:5040;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;;68:59;;;;;134:263;;249:2;237:9;228:7;224:23;220:32;217:2;;;265:1;262;255:12;217:2;300:1;317:64;373:7;364:6;353:9;349:22;317:64;;;307:74;;279:108;211:186;;;;;404:159;505:52;525:31;550:5;525:31;;;505:52;;;500:3;493:65;487:76;;;570:155;669:50;688:30;712:5;688:30;;;669:50;;;664:3;657:63;651:74;;;732:378;;877:75;948:3;939:6;877:75;;;974:2;969:3;965:12;958:19;;988:73;1057:3;1048:6;988:73;;;1083:1;1078:3;1074:11;1067:18;;1102:3;1095:10;;865:245;;;;;;1117:105;;1186:31;1211:5;1186:31;;;1175:42;;1169:53;;;;1229:151;;1308:66;1301:5;1297:78;1286:89;;1280:100;;;;1387:128;;1467:42;1460:5;1456:54;1445:65;;1439:76;;;;1522:105;;1591:31;1616:5;1591:31;;;1580:42;;1574:53;;;;1634:128;;1714:42;1707:5;1703:54;1692:65;;1686:76;;;;1769:95;;1833:26;1853:5;1833:26;;;1822:37;;1816:48;;;;1871:73;;1934:5;1923:16;;1917:27;;;;1951:89;;2015:20;2029:5;2015:20;;;2004:31;;1998:42;;;;2048:81;;2117:5;2113:2;2109:14;2097:26;;2090:39;;;;788:5040:8;;;;;;;",
  "deployedSourceMap": "788:5040:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;788:5040:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4622:1204;;;;;;;;;;;;;;;;:::i;:::-;;876:46;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2587:297;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2963:245;;;:::i;:::-;;;;;;;;;;;;;;;;1828:278;;;;;;;;;;;;;;;;:::i;:::-;;102:20:12;;;:::i;:::-;;;;;;;;;;;;;;;;3686:287:8;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2112:311;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;344:167:12;;;;;;;;;;;;;;;;:::i;:::-;;4622:1204:8;4823:20;4846:10;4823:33;;5031:9;5015:25;;:12;:25;;;4937:143;;;;;;;;;;;;;;;;;;;;;;;;5159:13;:33;5173:5;:18;;;5159:33;;;;;;;;;;;;;;;;;;;;;;;;;5138:101;;;;;;;;;;;;;;;;;;;;;;;;5318:13;:27;5332:12;5318:27;;;;;;;;;;;;;;;;;;;;;;;;;5297:95;;;;;;;;;;;;;;;;;;;;;;;;5448:17;5504:8;;;;;;;;;;;:18;;;:27;;;;5545:5;5564:20;5598:14;5468:154;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5468:154:8;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;5468:154:8;5448:174;;5687:8;;;;;;;;;;;:27;;;5728:4;5746:12;5772:4;5790:19;5687:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5687:132:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5687:132:8;;;;4622:1204;;;;;;:::o;876:46::-;;;;;;;;;;;;;;;;;;;;;;:::o;2587:297::-;2715:12;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;2765:13:8;:21;2779:6;2765:21;;;;;;;;;;;;;;;;;;;;;;;;;2744:91;;;;;;;;;;;;;;;;;;;;;;;;2853:15;:23;2869:6;2853:23;;;;;;;;;;;;;;;;2846:30;;2587:297;;;:::o;2963:245::-;3040:12;3090:13;:25;3104:10;3090:25;;;;;;;;;;;;;;;;;;;;;;;;;3069:86;;;;;;;;;;;;;;;;;;;;;;;;3173:15;:27;3189:10;3173:27;;;;;;;;;;;;;;;;3166:34;;2963:245;:::o;1828:278::-;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;2011:4:8;1985:15;:23;2001:6;1985:23;;;;;;;;;;;;;;;:30;;;;2049:6;2025:15;:21;2041:4;2025:21;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;2089:10;2065:13;:21;2079:6;2065:21;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;1828:278;;;:::o;102:20:12:-;;;;;;;;;;;;;:::o;3686:287:8:-;3852:12;3957:9;3940:26;;:13;:26;;;3933:33;;3686:287;;;;;;:::o;2112:311::-;2238:14;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;2290:13:8;:38;2305:15;:21;2321:4;2305:21;;;;;;;;;;;;;;;;;;;;;2290:38;;;;;;;;;;;;;;;;;;;;;;;;;2269:108;;;;;;;;;;;;;;;;;;;;;;;;2395:15;:21;2411:4;2395:21;;;;;;;;;;;;;;;;;;;;;2388:28;;2112:311;;;:::o;344:167:12:-;270:5;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;460:1;440:22;;:8;:22;;;;436:69;;;486:8;478:5;;:16;;;;;;;;;;;;;;;;;;436:69;344:167;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;;57:66;;;;;130:112;;194:43;229:6;216:20;194:43;;;185:52;;179:63;;;;;249:118;;316:46;354:6;341:20;316:46;;;307:55;;301:66;;;;;388:335;;;502:3;495:4;487:6;483:17;479:27;472:35;469:2;;;520:1;517;510:12;469:2;553:6;540:20;530:30;;580:18;572:6;569:30;566:2;;;612:1;609;602:12;566:2;646:4;638:6;634:17;622:29;;696:3;689;681:6;677:16;667:8;663:31;660:40;657:2;;;713:1;710;703:12;657:2;462:261;;;;;;732:432;;829:3;822:4;814:6;810:17;806:27;799:35;796:2;;;847:1;844;837:12;796:2;884:6;871:20;906:60;921:44;958:6;921:44;;;906:60;;;897:69;;986:6;979:5;972:21;1022:4;1014:6;1010:17;1055:4;1048:5;1044:16;1090:3;1081:6;1076:3;1072:16;1069:25;1066:2;;;1107:1;1104;1097:12;1066:2;1117:41;1151:6;1146:3;1141;1117:41;;;789:375;;;;;;;;1173:440;;1274:3;1267:4;1259:6;1255:17;1251:27;1244:35;1241:2;;;1292:1;1289;1282:12;1241:2;1329:6;1316:20;1351:64;1366:48;1407:6;1366:48;;;1351:64;;;1342:73;;1435:6;1428:5;1421:21;1471:4;1463:6;1459:17;1504:4;1497:5;1493:16;1539:3;1530:6;1525:3;1521:16;1518:25;1515:2;;;1556:1;1553;1546:12;1515:2;1566:41;1600:6;1595:3;1590;1566:41;;;1234:379;;;;;;;;1649:2208;;1760:5;1748:9;1743:3;1739:19;1735:31;1732:2;;;1779:1;1776;1769:12;1732:2;1797:21;1812:5;1797:21;;;1788:30;;1876:1;1907:49;1952:3;1943:6;1932:9;1928:22;1907:49;;;1901:3;1894:5;1890:15;1883:74;1828:140;2026:2;2059:49;2104:3;2095:6;2084:9;2080:22;2059:49;;;2052:4;2045:5;2041:16;2034:75;1978:142;2185:2;2218:49;2263:3;2254:6;2243:9;2239:22;2218:49;;;2211:4;2204:5;2200:16;2193:75;2130:149;2338:2;2371:49;2416:3;2407:6;2396:9;2392:22;2371:49;;;2364:4;2357:5;2353:16;2346:75;2289:143;2494:3;2528:49;2573:3;2564:6;2553:9;2549:22;2528:49;;;2521:4;2514:5;2510:16;2503:75;2442:147;2651:3;2685:49;2730:3;2721:6;2710:9;2706:22;2685:49;;;2678:4;2671:5;2667:16;2660:75;2599:147;2800:3;2834:49;2879:3;2870:6;2859:9;2855:22;2834:49;;;2827:4;2820:5;2816:16;2809:75;2756:139;2949:3;2983:49;3028:3;3019:6;3008:9;3004:22;2983:49;;;2976:4;2969:5;2965:16;2958:75;2905:139;3111:3;3146:49;3191:3;3182:6;3171:9;3167:22;3146:49;;;3138:5;3131;3127:17;3120:76;3054:153;3257:3;3292:49;3337:3;3328:6;3317:9;3313:22;3292:49;;;3284:5;3277;3273:17;3266:76;3217:136;3441:3;3430:9;3426:19;3413:33;3466:18;3458:6;3455:30;3452:2;;;3498:1;3495;3488:12;3452:2;3534:54;3584:3;3575:6;3564:9;3560:22;3534:54;;;3526:5;3519;3515:17;3508:81;3363:237;3688:3;3677:9;3673:19;3660:33;3713:18;3705:6;3702:30;3699:2;;;3745:1;3742;3735:12;3699:2;3781:54;3831:3;3822:6;3811:9;3807:22;3781:54;;;3773:5;3766;3762:17;3755:81;3610:237;1726:2131;;;;;3864:118;;3931:46;3969:6;3956:20;3931:46;;;3922:55;;3916:66;;;;;3989:241;;4093:2;4081:9;4072:7;4068:23;4064:32;4061:2;;;4109:1;4106;4099:12;4061:2;4144:1;4161:53;4206:7;4197:6;4186:9;4182:22;4161:53;;;4151:63;;4123:97;4055:175;;;;;4237:485;;;;4372:2;4360:9;4351:7;4347:23;4343:32;4340:2;;;4388:1;4385;4378:12;4340:2;4423:1;4440:53;4485:7;4476:6;4465:9;4461:22;4440:53;;;4430:63;;4402:97;4530:2;4548:53;4593:7;4584:6;4573:9;4569:22;4548:53;;;4538:63;;4509:98;4638:2;4656:50;4698:7;4689:6;4678:9;4674:22;4656:50;;;4646:60;;4617:95;4334:388;;;;;;4729:241;;4833:2;4821:9;4812:7;4808:23;4804:32;4801:2;;;4849:1;4846;4839:12;4801:2;4884:1;4901:53;4946:7;4937:6;4926:9;4922:22;4901:53;;;4891:63;;4863:97;4795:175;;;;;4977:615;;;;;5134:2;5122:9;5113:7;5109:23;5105:32;5102:2;;;5150:1;5147;5140:12;5102:2;5185:1;5202:53;5247:7;5238:6;5227:9;5223:22;5202:53;;;5192:63;;5164:97;5292:2;5310:53;5355:7;5346:6;5335:9;5331:22;5310:53;;;5300:63;;5271:98;5428:2;5417:9;5413:18;5400:32;5452:18;5444:6;5441:30;5438:2;;;5484:1;5481;5474:12;5438:2;5512:64;5568:7;5559:6;5548:9;5544:22;5512:64;;;5502:74;;;;5379:203;5096:496;;;;;;;;5599:851;;;;;5785:3;5773:9;5764:7;5760:23;5756:33;5753:2;;;5802:1;5799;5792:12;5753:2;5865:1;5854:9;5850:17;5837:31;5888:18;5880:6;5877:30;5874:2;;;5920:1;5917;5910:12;5874:2;5940:75;6007:7;5998:6;5987:9;5983:22;5940:75;;;5930:85;;5816:205;6052:2;6070:53;6115:7;6106:6;6095:9;6091:22;6070:53;;;6060:63;;6031:98;6160:2;6178:53;6223:7;6214:6;6203:9;6199:22;6178:53;;;6168:63;;6139:98;6296:2;6285:9;6281:18;6268:32;6320:18;6312:6;6309:30;6306:2;;;6352:1;6349;6342:12;6306:2;6372:62;6426:7;6417:6;6406:9;6402:22;6372:62;;;6362:72;;6247:193;5747:703;;;;;;;;6457:110;6530:31;6555:5;6530:31;;;6525:3;6518:44;6512:55;;;6574:120;6657:31;6682:5;6657:31;;;6652:3;6645:44;6639:55;;;6701:111;6778:28;6800:5;6778:28;;;6773:3;6766:41;6760:52;;;6819:120;6902:31;6927:5;6902:31;;;6897:3;6890:44;6884:55;;;6946:343;;7056:38;7088:5;7056:38;;;7106:70;7169:6;7164:3;7106:70;;;7099:77;;7181:52;7226:6;7221:3;7214:4;7207:5;7203:16;7181:52;;;7254:29;7276:6;7254:29;;;7249:3;7245:39;7238:46;;7036:253;;;;;;7296:315;;7392:34;7420:5;7392:34;;;7438:60;7491:6;7486:3;7438:60;;;7431:67;;7503:52;7548:6;7543:3;7536:4;7529:5;7525:16;7503:52;;;7576:29;7598:6;7576:29;;;7571:3;7567:39;7560:46;;7372:239;;;;;;7641:818;;7758:5;7752:12;7792:1;7781:9;7777:17;7805:1;7800:247;;;;8058:1;8053:400;;;;7770:683;;7800:247;7878:4;7874:1;7863:9;7859:17;7855:28;7897:70;7960:6;7955:3;7897:70;;;7890:77;;8005:4;8001:9;7990;7986:25;7981:3;7974:38;8035:4;8030:3;8026:14;8019:21;;7807:240;7800:247;;8053:400;8122:1;8111:9;8107:17;8138:70;8201:6;8196:3;8138:70;;;8131:77;;8230:37;8261:5;8230:37;;;8283:1;8291:130;8305:6;8302:1;8299:13;8291:130;;;8370:7;8364:14;8360:1;8355:3;8351:11;8344:35;8411:1;8402:7;8398:15;8387:26;;8327:4;8324:1;8320:12;8315:17;;8291:130;;;8444:1;8439:3;8435:11;8428:18;;8060:393;;;7770:683;;7728:731;;;;;;8468:364;;8628:67;8692:2;8687:3;8628:67;;;8621:74;;8728:66;8724:1;8719:3;8715:11;8708:87;8823:2;8818:3;8814:12;8807:19;;8614:218;;;;8841:364;;9001:67;9065:2;9060:3;9001:67;;;8994:74;;9101:66;9097:1;9092:3;9088:11;9081:87;9196:2;9191:3;9187:12;9180:19;;8987:218;;;;9214:364;;9374:67;9438:2;9433:3;9374:67;;;9367:74;;9474:66;9470:1;9465:3;9461:11;9454:87;9569:2;9564:3;9560:12;9553:19;;9360:218;;;;9587:364;;9747:67;9811:2;9806:3;9747:67;;;9740:74;;9847:66;9843:1;9838:3;9834:11;9827:87;9942:2;9937:3;9933:12;9926:19;;9733:218;;;;9960:364;;10120:67;10184:2;10179:3;10120:67;;;10113:74;;10220:66;10216:1;10211:3;10207:11;10200:87;10315:2;10310:3;10306:12;10299:19;;10106:218;;;;10385:2261;;10530:5;10525:3;10521:15;10621:3;10614:5;10610:15;10604:22;10632:61;10688:3;10683;10679:13;10666:11;10632:61;;;10551:148;10779:4;10772:5;10768:16;10762:23;10791:62;10847:4;10842:3;10838:14;10825:11;10791:62;;;10709:150;10946:4;10939:5;10935:16;10929:23;10958:62;11014:4;11009:3;11005:14;10992:11;10958:62;;;10869:157;11107:4;11100:5;11096:16;11090:23;11119:62;11175:4;11170:3;11166:14;11153:11;11119:62;;;11036:151;11271:4;11264:5;11260:16;11254:23;11283:62;11339:4;11334:3;11330:14;11317:11;11283:62;;;11197:154;11435:4;11428:5;11424:16;11418:23;11447:62;11503:4;11498:3;11494:14;11481:11;11447:62;;;11361:154;11591:4;11584:5;11580:16;11574:23;11603:62;11659:4;11654:3;11650:14;11637:11;11603:62;;;11525:146;11747:4;11740:5;11736:16;11730:23;11759:62;11815:4;11810:3;11806:14;11793:11;11759:62;;;11681:146;11916:5;11909;11905:17;11899:24;11929:63;11985:5;11980:3;11976:15;11963:11;11929:63;;;11837:161;12070:5;12063;12059:17;12053:24;12083:63;12139:5;12134:3;12130:15;12117:11;12083:63;;;12008:144;12234:5;12227;12223:17;12217:24;12288:3;12282:4;12278:14;12270:5;12265:3;12261:15;12254:39;12308:66;12369:4;12356:11;12308:66;;;12300:74;;12162:224;12468:5;12461;12457:17;12451:24;12522:3;12516:4;12512:14;12504:5;12499:3;12495:15;12488:39;12542:66;12603:4;12590:11;12542:66;;;12534:74;;12396:224;12637:4;12630:11;;10503:2143;;;;;;12653:110;12726:31;12751:5;12726:31;;;12721:3;12714:44;12708:55;;;12770:120;12853:31;12878:5;12853:31;;;12848:3;12841:44;12835:55;;;12897:213;;13015:2;13004:9;13000:18;12992:26;;13029:71;13097:1;13086:9;13082:17;13073:6;13029:71;;;12986:124;;;;;13117:201;;13229:2;13218:9;13214:18;13206:26;;13243:65;13305:1;13294:9;13290:17;13281:6;13243:65;;;13200:118;;;;;13325:213;;13443:2;13432:9;13428:18;13420:26;;13457:71;13525:1;13514:9;13510:17;13501:6;13457:71;;;13414:124;;;;;13545:407;;13736:2;13725:9;13721:18;13713:26;;13786:9;13780:4;13776:20;13772:1;13761:9;13757:17;13750:47;13811:131;13937:4;13811:131;;;13803:139;;13707:245;;;;13959:407;;14150:2;14139:9;14135:18;14127:26;;14200:9;14194:4;14190:20;14186:1;14175:9;14171:17;14164:47;14225:131;14351:4;14225:131;;;14217:139;;14121:245;;;;14373:407;;14564:2;14553:9;14549:18;14541:26;;14614:9;14608:4;14604:20;14600:1;14589:9;14585:17;14578:47;14639:131;14765:4;14639:131;;;14631:139;;14535:245;;;;14787:407;;14978:2;14967:9;14963:18;14955:26;;15028:9;15022:4;15018:20;15014:1;15003:9;14999:17;14992:47;15053:131;15179:4;15053:131;;;15045:139;;14949:245;;;;15201:407;;15392:2;15381:9;15377:18;15369:26;;15442:9;15436:4;15432:20;15428:1;15417:9;15413:17;15406:47;15467:131;15593:4;15467:131;;;15459:139;;15363:245;;;;15615:655;;15851:2;15840:9;15836:18;15828:26;;15901:9;15895:4;15891:20;15887:1;15876:9;15872:17;15865:47;15926:102;16023:4;16014:6;15926:102;;;15918:110;;16039:72;16107:2;16096:9;16092:18;16083:6;16039:72;;;16159:9;16153:4;16149:20;16144:2;16133:9;16129:18;16122:48;16184:76;16255:4;16246:6;16184:76;;;16176:84;;15822:448;;;;;;;16277:709;;16512:3;16501:9;16497:19;16489:27;;16527:71;16595:1;16584:9;16580:17;16571:6;16527:71;;;16609:72;16677:2;16666:9;16662:18;16653:6;16609:72;;;16729:9;16723:4;16719:20;16714:2;16703:9;16699:18;16692:48;16754:76;16825:4;16816:6;16754:76;;;16746:84;;16878:9;16872:4;16868:20;16863:2;16852:9;16848:18;16841:48;16903:73;16971:4;16962:6;16903:73;;;16895:81;;16483:503;;;;;;;;16993:256;;17055:2;17049:9;17039:19;;17093:4;17085:6;17081:17;17192:6;17180:10;17177:22;17156:18;17144:10;17141:34;17138:62;17135:2;;;17213:1;17210;17203:12;17135:2;17233:10;17229:2;17222:22;17033:216;;;;;17256:254;;17395:18;17387:6;17384:30;17381:2;;;17427:1;17424;17417:12;17381:2;17471:4;17467:9;17460:4;17452:6;17448:17;17444:33;17436:41;;17500:4;17494;17490:15;17482:23;;17318:192;;;;17517:258;;17660:18;17652:6;17649:30;17646:2;;;17692:1;17689;17682:12;17646:2;17736:4;17732:9;17725:4;17717:6;17713:17;17709:33;17701:41;;17765:4;17759;17755:15;17747:23;;17583:192;;;;17784:125;;17860:4;17857:1;17850:15;17897:4;17894:1;17884:18;17872:30;;17842:67;;;;17918:87;;17994:5;17988:12;17978:22;;17972:33;;;;18012:91;;18092:5;18086:12;18076:22;;18070:33;;;;18111:152;;18215:6;18210:3;18203:19;18252:4;18247:3;18243:14;18228:29;;18196:67;;;;;18272:162;;18386:6;18381:3;18374:19;18423:4;18418:3;18414:14;18399:29;;18367:67;;;;;18443:163;;18558:6;18553:3;18546:19;18595:4;18590:3;18586:14;18571:29;;18539:67;;;;;18614:105;;18683:31;18708:5;18683:31;;;18672:42;;18666:53;;;;18726:92;;18806:5;18799:13;18792:21;18781:32;;18775:43;;;;18825:79;;18894:5;18883:16;;18877:27;;;;18911:128;;18991:42;18984:5;18980:54;18969:65;;18963:76;;;;19046:79;;19115:5;19104:16;;19098:27;;;;19132:105;;19201:31;19226:5;19201:31;;;19190:42;;19184:53;;;;19244:92;;19324:5;19317:13;19310:21;19299:32;;19293:43;;;;19343:79;;19412:5;19401:16;;19395:27;;;;19429:128;;19509:42;19502:5;19498:54;19487:65;;19481:76;;;;19564:79;;19633:5;19622:16;;19616:27;;;;19651:145;19732:6;19727:3;19722;19709:30;19788:1;19779:6;19774:3;19770:16;19763:27;19702:94;;;;19805:268;19870:1;19877:101;19891:6;19888:1;19885:13;19877:101;;;19967:1;19962:3;19958:11;19952:18;19948:1;19943:3;19939:11;19932:39;19913:2;19910:1;19906:10;19901:15;;19877:101;;;19993:6;19990:1;19987:13;19984:2;;;20058:1;20049:6;20044:3;20040:16;20033:27;19984:2;19854:219;;;;;20081:97;;20169:2;20165:7;20160:2;20153:5;20149:14;20145:28;20135:38;;20129:49;;;",
  "source": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/Ownable.sol\";\n\n\ncontract Whitelist is\n    Ownable\n{\n\n    // Mapping of address => whitelist status.\n    mapping (address => bool) public isWhitelisted;\n    // Mapping of address => domain\n    mapping (address => bytes32) private addressToDomain;\n    // Mapping of domain => address\n    mapping (bytes32 => address) private domainToAddress;\n\n\n    // Exchange contract.\n    // solhint-disable var-name-mixedcase\n    IExchange internal EXCHANGE;\n    bytes internal TX_ORIGIN_SIGNATURE;\n    // solhint-enable var-name-mixedcase\n\n    byte constant internal VALIDATOR_SIGNATURE_BYTE = \"\\x05\";\n\n    constructor (address _exchange)\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n        TX_ORIGIN_SIGNATURE = abi.encodePacked(address(this), VALIDATOR_SIGNATURE_BYTE);\n    }\n\n    /// @dev Admin adds or removes an address & domain mapping from the whitelist.\n    /// @param target Address to add or remove from whitelist.\n    /// @param fqdn DNS domain to map to ethereum address.\n    /// @param isApproved Whitelist status to assign to address.\n    function adminUpdateWhitelist(\n        address target,\n        bytes32 fqdn,\n        bool isApproved\n    )\n        external\n        onlyOwner\n    {\n\n        addressToDomain[target] = fqdn;\n        domainToAddress[fqdn] = target;\n        isWhitelisted[target] = isApproved;\n    }\n\n    function adminGetAddressByDomain(\n        bytes32 fqdn\n    )\n        external\n        view\n        onlyOwner\n        returns (address target)\n    {\n\n        require(\n            isWhitelisted[ domainToAddress[fqdn] ],\n            \"ADDRESS_NOT_WHITELISTED\"\n        );\n\n        return domainToAddress[fqdn];\n    }\n\n    /// @dev Admin views any domain mapped to a valid whitelisted address\n    /// @param target Ethereum address to validate & return DNS domain mapping for.\n    function adminGetDomainByAddress(\n        address target\n    )\n        external\n        view\n        onlyOwner\n        returns (bytes32 fqdn)\n    {\n\n        require(\n            isWhitelisted[target],\n            \"ADDRESS_NOT_WHITELISTED\"\n        );\n\n        return addressToDomain[target];\n\n    }\n\n    /// @dev Valid whitelisted address can query its own domain mapping.\n    function getDomainByAddress()\n        external\n        view\n        returns (bytes32 fqdn)\n    {\n\n        require(\n            isWhitelisted[msg.sender],\n            'INVALID_SENDER'\n        );\n\n        return addressToDomain[msg.sender];\n\n    }\n\n    /// @dev Verifies signer is same as signer of current Ethereum transaction.\n    ///      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n    ///      Extra safety checks can be added for a production contract.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    // solhint-disable no-unused-vars\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        // solhint-disable-next-line avoid-tx-origin\n        return signerAddress == tx.origin;\n    }\n    // solhint-enable no-unused-vars\n\n    /// @dev Fills an order using `msg.sender` as the taker.\n    ///      The transaction will revert if both the maker and taker are not whitelisted.\n    ///      Orders should specify this contract as the `senderAddress` in order to gaurantee\n    ///      that both maker and taker have been whitelisted.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n    /// @param orderSignature Proof that order has been created by maker.\n    function fillOrderIfWhitelisted(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        uint256 salt,\n        bytes memory orderSignature\n    )\n        public\n    {\n        address takerAddress = msg.sender;\n\n        // This contract must be the entry point for the transaction.\n        require(\n            // solhint-disable-next-line avoid-tx-origin\n            takerAddress == tx.origin,\n            \"INVALID_SENDER\"\n        );\n\n        // Check if maker is on the whitelist.\n        require(\n            isWhitelisted[order.makerAddress],\n            \"MAKER_NOT_WHITELISTED\"\n        );\n\n        // Check if taker is on the whitelist.\n        require(\n            isWhitelisted[takerAddress],\n            \"TAKER_NOT_WHITELISTED\"\n        );\n\n        // Encode arguments into byte array.\n        bytes memory data = abi.encodeWithSelector(\n            EXCHANGE.fillOrder.selector,\n            order,\n            takerAssetFillAmount,\n            orderSignature\n        );\n\n        // Call `fillOrder` via `executeTransaction`.\n        EXCHANGE.executeTransaction(\n            salt,\n            takerAddress,\n            data,\n            TX_ORIGIN_SIGNATURE\n        );\n    }\n}\n",
  "sourcePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
  "ast": {
    "absolutePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
    "exportedSymbols": {
      "Whitelist": [
        548
      ]
    },
    "id": 549,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 329,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:8"
      },
      {
        "id": 330,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "604:33:8"
      },
      {
        "absolutePath": "/Users/lauren/github/registry-contract/contracts/IExchange.sol",
        "file": "./IExchange.sol",
        "id": 331,
        "nodeType": "ImportDirective",
        "scope": 549,
        "sourceUnit": 37,
        "src": "639:25:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "file": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "id": 332,
        "nodeType": "ImportDirective",
        "scope": 549,
        "sourceUnit": 806,
        "src": "665:64:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "file": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "id": 333,
        "nodeType": "ImportDirective",
        "scope": 549,
        "sourceUnit": 854,
        "src": "730:55:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 334,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 853,
              "src": "814:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$853",
                "typeString": "contract Ownable"
              }
            },
            "id": 335,
            "nodeType": "InheritanceSpecifier",
            "src": "814:7:8"
          }
        ],
        "contractDependencies": [
          853,
          1030
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 548,
        "linearizedBaseContracts": [
          548,
          853,
          1030
        ],
        "name": "Whitelist",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 339,
            "name": "isWhitelisted",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "876:46:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 338,
              "keyType": {
                "id": 336,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "885:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "876:25:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 337,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "896:4:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 343,
            "name": "addressToDomain",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "964:52:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
              "typeString": "mapping(address => bytes32)"
            },
            "typeName": {
              "id": 342,
              "keyType": {
                "id": 340,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "973:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "964:28:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                "typeString": "mapping(address => bytes32)"
              },
              "valueType": {
                "id": 341,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "984:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 347,
            "name": "domainToAddress",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "1058:52:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
              "typeString": "mapping(bytes32 => address)"
            },
            "typeName": {
              "id": 346,
              "keyType": {
                "id": 344,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1067:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "1058:28:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                "typeString": "mapping(bytes32 => address)"
              },
              "valueType": {
                "id": 345,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1078:7:8",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 349,
            "name": "EXCHANGE",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "1186:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IExchange_$36",
              "typeString": "contract IExchange"
            },
            "typeName": {
              "contractScope": null,
              "id": 348,
              "name": "IExchange",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 36,
              "src": "1186:9:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IExchange_$36",
                "typeString": "contract IExchange"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 351,
            "name": "TX_ORIGIN_SIGNATURE",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "1219:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 350,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "1219:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 354,
            "name": "VALIDATOR_SIGNATURE_BYTE",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "1301:56:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes1",
              "typeString": "bytes1"
            },
            "typeName": {
              "id": 352,
              "name": "byte",
              "nodeType": "ElementaryTypeName",
              "src": "1301:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes1",
                "typeString": "bytes1"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "05",
              "id": 353,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1351:6:8",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_dbb8d0f4c497851a5043c6363657698cb1387682cac2f786c731f8936109d795",
                "typeString": "literal_string \"\u0005\""
              },
              "value": "\u0005"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 375,
              "nodeType": "Block",
              "src": "1415:137:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 363,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 359,
                      "name": "EXCHANGE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 349,
                      "src": "1425:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 361,
                          "name": "_exchange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 356,
                          "src": "1446:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 360,
                        "name": "IExchange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36,
                        "src": "1436:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IExchange_$36_$",
                          "typeString": "type(contract IExchange)"
                        }
                      },
                      "id": 362,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1436:20:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "src": "1425:31:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IExchange_$36",
                      "typeString": "contract IExchange"
                    }
                  },
                  "id": 364,
                  "nodeType": "ExpressionStatement",
                  "src": "1425:31:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 365,
                      "name": "TX_ORIGIN_SIGNATURE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 351,
                      "src": "1466:19:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage",
                        "typeString": "bytes storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 369,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1087,
                              "src": "1513:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Whitelist_$548",
                                "typeString": "contract Whitelist"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Whitelist_$548",
                                "typeString": "contract Whitelist"
                              }
                            ],
                            "id": 368,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1505:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1505:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 371,
                          "name": "VALIDATOR_SIGNATURE_BYTE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 354,
                          "src": "1520:24:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 366,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1032,
                          "src": "1488:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 367,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1488:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 372,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1488:57:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "1466:79:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage",
                      "typeString": "bytes storage ref"
                    }
                  },
                  "id": 374,
                  "nodeType": "ExpressionStatement",
                  "src": "1466:79:8"
                }
              ]
            },
            "documentation": null,
            "id": 376,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 357,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 356,
                  "name": "_exchange",
                  "nodeType": "VariableDeclaration",
                  "scope": 376,
                  "src": "1377:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 355,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1377:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1376:19:8"
            },
            "returnParameters": {
              "id": 358,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1415:0:8"
            },
            "scope": 548,
            "src": "1364:188:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 405,
              "nodeType": "Block",
              "src": "1974:132:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 391,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 387,
                        "name": "addressToDomain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 343,
                        "src": "1985:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                          "typeString": "mapping(address => bytes32)"
                        }
                      },
                      "id": 389,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 388,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "2001:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1985:23:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 390,
                      "name": "fqdn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 380,
                      "src": "2011:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1985:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 392,
                  "nodeType": "ExpressionStatement",
                  "src": "1985:30:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 393,
                        "name": "domainToAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 347,
                        "src": "2025:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 395,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 394,
                        "name": "fqdn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 380,
                        "src": "2041:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2025:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 396,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 378,
                      "src": "2049:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2025:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 398,
                  "nodeType": "ExpressionStatement",
                  "src": "2025:30:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 403,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 399,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 339,
                        "src": "2065:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 401,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 400,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "2079:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2065:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 402,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 382,
                      "src": "2089:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2065:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 404,
                  "nodeType": "ExpressionStatement",
                  "src": "2065:34:8"
                }
              ]
            },
            "documentation": "@dev Admin adds or removes an address & domain mapping from the whitelist.\n @param target Address to add or remove from whitelist.\n @param fqdn DNS domain to map to ethereum address.\n @param isApproved Whitelist status to assign to address.",
            "id": 406,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 385,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 384,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 833,
                  "src": "1960:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1960:9:8"
              }
            ],
            "name": "adminUpdateWhitelist",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 383,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 378,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 406,
                  "src": "1867:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 377,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1867:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 380,
                  "name": "fqdn",
                  "nodeType": "VariableDeclaration",
                  "scope": 406,
                  "src": "1891:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 379,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1891:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 382,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 406,
                  "src": "1913:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 381,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1913:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1857:77:8"
            },
            "returnParameters": {
              "id": 386,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1974:0:8"
            },
            "scope": 548,
            "src": "1828:278:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 428,
              "nodeType": "Block",
              "src": "2258:165:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 416,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "2290:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 420,
                        "indexExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 417,
                            "name": "domainToAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 347,
                            "src": "2305:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                              "typeString": "mapping(bytes32 => address)"
                            }
                          },
                          "id": 419,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 418,
                            "name": "fqdn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 408,
                            "src": "2321:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2305:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2290:38:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 421,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2342:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 415,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "2269:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 422,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2269:108:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 423,
                  "nodeType": "ExpressionStatement",
                  "src": "2269:108:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 424,
                      "name": "domainToAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 347,
                      "src": "2395:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 426,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 425,
                      "name": "fqdn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 408,
                      "src": "2411:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2395:21:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 414,
                  "id": 427,
                  "nodeType": "Return",
                  "src": "2388:28:8"
                }
              ]
            },
            "documentation": null,
            "id": 429,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 411,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 410,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 833,
                  "src": "2211:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2211:9:8"
              }
            ],
            "name": "adminGetAddressByDomain",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 409,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 408,
                  "name": "fqdn",
                  "nodeType": "VariableDeclaration",
                  "scope": 429,
                  "src": "2154:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 407,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2154:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2144:28:8"
            },
            "returnParameters": {
              "id": 414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 413,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 429,
                  "src": "2238:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 412,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2238:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2237:16:8"
            },
            "scope": 548,
            "src": "2112:311:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 449,
              "nodeType": "Block",
              "src": "2733:151:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 439,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "2765:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 441,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 440,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 431,
                          "src": "2779:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2765:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 442,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2800:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 438,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "2744:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2744:91:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 444,
                  "nodeType": "ExpressionStatement",
                  "src": "2744:91:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 445,
                      "name": "addressToDomain",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "2853:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                        "typeString": "mapping(address => bytes32)"
                      }
                    },
                    "id": 447,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 446,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 431,
                      "src": "2869:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2853:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 437,
                  "id": 448,
                  "nodeType": "Return",
                  "src": "2846:30:8"
                }
              ]
            },
            "documentation": "@dev Admin views any domain mapped to a valid whitelisted address\n @param target Ethereum address to validate & return DNS domain mapping for.",
            "id": 450,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 434,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 433,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 833,
                  "src": "2688:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2688:9:8"
              }
            ],
            "name": "adminGetDomainByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 432,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 431,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 450,
                  "src": "2629:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 430,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2629:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2619:30:8"
            },
            "returnParameters": {
              "id": 437,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 436,
                  "name": "fqdn",
                  "nodeType": "VariableDeclaration",
                  "scope": 450,
                  "src": "2715:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 435,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2715:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2714:14:8"
            },
            "scope": 548,
            "src": "2587:297:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 468,
              "nodeType": "Block",
              "src": "3058:150:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 456,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "3090:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 459,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 457,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1045,
                            "src": "3104:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 458,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "3104:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3090:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 460,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3129:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 455,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "3069:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3069:86:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 462,
                  "nodeType": "ExpressionStatement",
                  "src": "3069:86:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 463,
                      "name": "addressToDomain",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "3173:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                        "typeString": "mapping(address => bytes32)"
                      }
                    },
                    "id": 466,
                    "indexExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 464,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1045,
                        "src": "3189:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 465,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "3189:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3173:27:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 454,
                  "id": 467,
                  "nodeType": "Return",
                  "src": "3166:34:8"
                }
              ]
            },
            "documentation": "@dev Valid whitelisted address can query its own domain mapping.",
            "id": 469,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDomainByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 451,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2990:2:8"
            },
            "returnParameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 453,
                  "name": "fqdn",
                  "nodeType": "VariableDeclaration",
                  "scope": 469,
                  "src": "3040:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 452,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3040:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3039:14:8"
            },
            "scope": 548,
            "src": "2963:245:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 485,
              "nodeType": "Block",
              "src": "3870:103:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 483,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 480,
                      "name": "signerAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 473,
                      "src": "3940:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 481,
                        "name": "tx",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1057,
                        "src": "3957:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_transaction",
                          "typeString": "tx"
                        }
                      },
                      "id": 482,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "origin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "3957:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "3940:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 479,
                  "id": 484,
                  "nodeType": "Return",
                  "src": "3933:33:8"
                }
              ]
            },
            "documentation": "@dev Verifies signer is same as signer of current Ethereum transaction.\n      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n      Extra safety checks can be added for a production contract.\n @param signerAddress Address that should have signed the given hash.\n @param signature Proof of signing.\n @return Validity of order signature.",
            "id": 486,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSignature",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 471,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "3721:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3721:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 473,
                  "name": "signerAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "3743:21:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 472,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3743:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 475,
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "3774:24:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3774:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3711:93:8"
            },
            "returnParameters": {
              "id": 479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 478,
                  "name": "isValid",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "3852:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 477,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3852:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3851:14:8"
            },
            "scope": 548,
            "src": "3686:287:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 546,
              "nodeType": "Block",
              "src": "4813:1013:8",
              "statements": [
                {
                  "assignments": [
                    498
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 498,
                      "name": "takerAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 546,
                      "src": "4823:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 497,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4823:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 501,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 499,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1045,
                      "src": "4846:3:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 500,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "4846:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4823:33:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 506,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 503,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 498,
                          "src": "5015:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 504,
                            "name": "tx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1057,
                            "src": "5031:2:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_transaction",
                              "typeString": "tx"
                            }
                          },
                          "id": 505,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "origin",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5031:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5015:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5054:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 502,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "4937:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 508,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4937:143:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 509,
                  "nodeType": "ExpressionStatement",
                  "src": "4937:143:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 511,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "5159:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 514,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 512,
                            "name": "order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 488,
                            "src": "5173:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Order_$750_memory_ptr",
                              "typeString": "struct LibOrder.Order memory"
                            }
                          },
                          "id": 513,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "makerAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 727,
                          "src": "5173:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5159:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d414b45525f4e4f545f57484954454c4953544544",
                        "id": 515,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5206:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        },
                        "value": "MAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 510,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "5138:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5138:101:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 517,
                  "nodeType": "ExpressionStatement",
                  "src": "5138:101:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 519,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "5318:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 521,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 520,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 498,
                          "src": "5332:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5318:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54414b45525f4e4f545f57484954454c4953544544",
                        "id": 522,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5359:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        },
                        "value": "TAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 518,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "5297:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5297:95:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 524,
                  "nodeType": "ExpressionStatement",
                  "src": "5297:95:8"
                },
                {
                  "assignments": [
                    526
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 526,
                      "name": "data",
                      "nodeType": "VariableDeclaration",
                      "scope": 546,
                      "src": "5448:17:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 525,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "5448:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 536,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 529,
                            "name": "EXCHANGE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 349,
                            "src": "5504:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IExchange_$36",
                              "typeString": "contract IExchange"
                            }
                          },
                          "id": 530,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "fillOrder",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 57,
                          "src": "5504:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_struct$_Order_$750_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_struct$_FillResults_$631_memory_ptr_$",
                            "typeString": "function (struct LibOrder.Order memory,uint256,bytes memory) external returns (struct LibFillResults.FillResults memory)"
                          }
                        },
                        "id": 531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "5504:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 532,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 488,
                        "src": "5545:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Order_$750_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 533,
                        "name": "takerAssetFillAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 490,
                        "src": "5564:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 534,
                        "name": "orderSignature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 494,
                        "src": "5598:14:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_struct$_Order_$750_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 527,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1032,
                        "src": "5468:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 528,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSelector",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5468:22:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes4) pure returns (bytes memory)"
                      }
                    },
                    "id": 535,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5468:154:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5448:174:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 540,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 492,
                        "src": "5728:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 541,
                        "name": "takerAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 498,
                        "src": "5746:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 542,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 526,
                        "src": "5772:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 543,
                        "name": "TX_ORIGIN_SIGNATURE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 351,
                        "src": "5790:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 537,
                        "name": "EXCHANGE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "5687:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IExchange_$36",
                          "typeString": "contract IExchange"
                        }
                      },
                      "id": 539,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "executeTransaction",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 132,
                      "src": "5687:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,address,bytes memory,bytes memory) external"
                      }
                    },
                    "id": 544,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5687:132:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 545,
                  "nodeType": "ExpressionStatement",
                  "src": "5687:132:8"
                }
              ]
            },
            "documentation": "@dev Fills an order using `msg.sender` as the taker.\n      The transaction will revert if both the maker and taker are not whitelisted.\n      Orders should specify this contract as the `senderAddress` in order to gaurantee\n      that both maker and taker have been whitelisted.\n @param order Order struct containing order specifications.\n @param takerAssetFillAmount Desired amount of takerAsset to sell.\n @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n @param orderSignature Proof that order has been created by maker.",
            "id": 547,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fillOrderIfWhitelisted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 495,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 488,
                  "name": "order",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "4663:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$750_memory_ptr",
                    "typeString": "struct LibOrder.Order"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 487,
                    "name": "LibOrder.Order",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 750,
                    "src": "4663:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$750_storage_ptr",
                      "typeString": "struct LibOrder.Order"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 490,
                  "name": "takerAssetFillAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "4700:28:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 489,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4700:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 492,
                  "name": "salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "4738:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 491,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4738:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 494,
                  "name": "orderSignature",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "4760:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 493,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4760:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4653:140:8"
            },
            "returnParameters": {
              "id": 496,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4813:0:8"
            },
            "scope": 548,
            "src": "4622:1204:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 549,
        "src": "788:5040:8"
      }
    ],
    "src": "580:5249:8"
  },
  "legacyAST": {
    "absolutePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
    "exportedSymbols": {
      "Whitelist": [
        548
      ]
    },
    "id": 549,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 329,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:8"
      },
      {
        "id": 330,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "604:33:8"
      },
      {
        "absolutePath": "/Users/lauren/github/registry-contract/contracts/IExchange.sol",
        "file": "./IExchange.sol",
        "id": 331,
        "nodeType": "ImportDirective",
        "scope": 549,
        "sourceUnit": 37,
        "src": "639:25:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "file": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "id": 332,
        "nodeType": "ImportDirective",
        "scope": 549,
        "sourceUnit": 806,
        "src": "665:64:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "file": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "id": 333,
        "nodeType": "ImportDirective",
        "scope": 549,
        "sourceUnit": 854,
        "src": "730:55:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 334,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 853,
              "src": "814:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$853",
                "typeString": "contract Ownable"
              }
            },
            "id": 335,
            "nodeType": "InheritanceSpecifier",
            "src": "814:7:8"
          }
        ],
        "contractDependencies": [
          853,
          1030
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 548,
        "linearizedBaseContracts": [
          548,
          853,
          1030
        ],
        "name": "Whitelist",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 339,
            "name": "isWhitelisted",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "876:46:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 338,
              "keyType": {
                "id": 336,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "885:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "876:25:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 337,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "896:4:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 343,
            "name": "addressToDomain",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "964:52:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
              "typeString": "mapping(address => bytes32)"
            },
            "typeName": {
              "id": 342,
              "keyType": {
                "id": 340,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "973:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "964:28:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                "typeString": "mapping(address => bytes32)"
              },
              "valueType": {
                "id": 341,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "984:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 347,
            "name": "domainToAddress",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "1058:52:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
              "typeString": "mapping(bytes32 => address)"
            },
            "typeName": {
              "id": 346,
              "keyType": {
                "id": 344,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1067:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "1058:28:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                "typeString": "mapping(bytes32 => address)"
              },
              "valueType": {
                "id": 345,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1078:7:8",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 349,
            "name": "EXCHANGE",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "1186:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IExchange_$36",
              "typeString": "contract IExchange"
            },
            "typeName": {
              "contractScope": null,
              "id": 348,
              "name": "IExchange",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 36,
              "src": "1186:9:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IExchange_$36",
                "typeString": "contract IExchange"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 351,
            "name": "TX_ORIGIN_SIGNATURE",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "1219:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 350,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "1219:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 354,
            "name": "VALIDATOR_SIGNATURE_BYTE",
            "nodeType": "VariableDeclaration",
            "scope": 548,
            "src": "1301:56:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes1",
              "typeString": "bytes1"
            },
            "typeName": {
              "id": 352,
              "name": "byte",
              "nodeType": "ElementaryTypeName",
              "src": "1301:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes1",
                "typeString": "bytes1"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "05",
              "id": 353,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1351:6:8",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_dbb8d0f4c497851a5043c6363657698cb1387682cac2f786c731f8936109d795",
                "typeString": "literal_string \"\u0005\""
              },
              "value": "\u0005"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 375,
              "nodeType": "Block",
              "src": "1415:137:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 363,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 359,
                      "name": "EXCHANGE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 349,
                      "src": "1425:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 361,
                          "name": "_exchange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 356,
                          "src": "1446:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 360,
                        "name": "IExchange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36,
                        "src": "1436:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IExchange_$36_$",
                          "typeString": "type(contract IExchange)"
                        }
                      },
                      "id": 362,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1436:20:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "src": "1425:31:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IExchange_$36",
                      "typeString": "contract IExchange"
                    }
                  },
                  "id": 364,
                  "nodeType": "ExpressionStatement",
                  "src": "1425:31:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 365,
                      "name": "TX_ORIGIN_SIGNATURE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 351,
                      "src": "1466:19:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage",
                        "typeString": "bytes storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 369,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1087,
                              "src": "1513:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Whitelist_$548",
                                "typeString": "contract Whitelist"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Whitelist_$548",
                                "typeString": "contract Whitelist"
                              }
                            ],
                            "id": 368,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1505:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1505:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 371,
                          "name": "VALIDATOR_SIGNATURE_BYTE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 354,
                          "src": "1520:24:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 366,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1032,
                          "src": "1488:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 367,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1488:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 372,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1488:57:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "1466:79:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage",
                      "typeString": "bytes storage ref"
                    }
                  },
                  "id": 374,
                  "nodeType": "ExpressionStatement",
                  "src": "1466:79:8"
                }
              ]
            },
            "documentation": null,
            "id": 376,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 357,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 356,
                  "name": "_exchange",
                  "nodeType": "VariableDeclaration",
                  "scope": 376,
                  "src": "1377:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 355,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1377:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1376:19:8"
            },
            "returnParameters": {
              "id": 358,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1415:0:8"
            },
            "scope": 548,
            "src": "1364:188:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 405,
              "nodeType": "Block",
              "src": "1974:132:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 391,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 387,
                        "name": "addressToDomain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 343,
                        "src": "1985:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                          "typeString": "mapping(address => bytes32)"
                        }
                      },
                      "id": 389,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 388,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "2001:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1985:23:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 390,
                      "name": "fqdn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 380,
                      "src": "2011:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1985:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 392,
                  "nodeType": "ExpressionStatement",
                  "src": "1985:30:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 393,
                        "name": "domainToAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 347,
                        "src": "2025:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 395,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 394,
                        "name": "fqdn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 380,
                        "src": "2041:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2025:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 396,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 378,
                      "src": "2049:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2025:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 398,
                  "nodeType": "ExpressionStatement",
                  "src": "2025:30:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 403,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 399,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 339,
                        "src": "2065:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 401,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 400,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "2079:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2065:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 402,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 382,
                      "src": "2089:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2065:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 404,
                  "nodeType": "ExpressionStatement",
                  "src": "2065:34:8"
                }
              ]
            },
            "documentation": "@dev Admin adds or removes an address & domain mapping from the whitelist.\n @param target Address to add or remove from whitelist.\n @param fqdn DNS domain to map to ethereum address.\n @param isApproved Whitelist status to assign to address.",
            "id": 406,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 385,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 384,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 833,
                  "src": "1960:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1960:9:8"
              }
            ],
            "name": "adminUpdateWhitelist",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 383,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 378,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 406,
                  "src": "1867:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 377,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1867:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 380,
                  "name": "fqdn",
                  "nodeType": "VariableDeclaration",
                  "scope": 406,
                  "src": "1891:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 379,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1891:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 382,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 406,
                  "src": "1913:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 381,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1913:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1857:77:8"
            },
            "returnParameters": {
              "id": 386,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1974:0:8"
            },
            "scope": 548,
            "src": "1828:278:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 428,
              "nodeType": "Block",
              "src": "2258:165:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 416,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "2290:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 420,
                        "indexExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 417,
                            "name": "domainToAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 347,
                            "src": "2305:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                              "typeString": "mapping(bytes32 => address)"
                            }
                          },
                          "id": 419,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 418,
                            "name": "fqdn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 408,
                            "src": "2321:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2305:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2290:38:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 421,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2342:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 415,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "2269:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 422,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2269:108:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 423,
                  "nodeType": "ExpressionStatement",
                  "src": "2269:108:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 424,
                      "name": "domainToAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 347,
                      "src": "2395:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 426,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 425,
                      "name": "fqdn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 408,
                      "src": "2411:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2395:21:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 414,
                  "id": 427,
                  "nodeType": "Return",
                  "src": "2388:28:8"
                }
              ]
            },
            "documentation": null,
            "id": 429,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 411,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 410,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 833,
                  "src": "2211:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2211:9:8"
              }
            ],
            "name": "adminGetAddressByDomain",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 409,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 408,
                  "name": "fqdn",
                  "nodeType": "VariableDeclaration",
                  "scope": 429,
                  "src": "2154:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 407,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2154:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2144:28:8"
            },
            "returnParameters": {
              "id": 414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 413,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 429,
                  "src": "2238:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 412,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2238:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2237:16:8"
            },
            "scope": 548,
            "src": "2112:311:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 449,
              "nodeType": "Block",
              "src": "2733:151:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 439,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "2765:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 441,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 440,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 431,
                          "src": "2779:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2765:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 442,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2800:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 438,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "2744:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2744:91:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 444,
                  "nodeType": "ExpressionStatement",
                  "src": "2744:91:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 445,
                      "name": "addressToDomain",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "2853:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                        "typeString": "mapping(address => bytes32)"
                      }
                    },
                    "id": 447,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 446,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 431,
                      "src": "2869:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2853:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 437,
                  "id": 448,
                  "nodeType": "Return",
                  "src": "2846:30:8"
                }
              ]
            },
            "documentation": "@dev Admin views any domain mapped to a valid whitelisted address\n @param target Ethereum address to validate & return DNS domain mapping for.",
            "id": 450,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 434,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 433,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 833,
                  "src": "2688:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2688:9:8"
              }
            ],
            "name": "adminGetDomainByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 432,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 431,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 450,
                  "src": "2629:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 430,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2629:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2619:30:8"
            },
            "returnParameters": {
              "id": 437,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 436,
                  "name": "fqdn",
                  "nodeType": "VariableDeclaration",
                  "scope": 450,
                  "src": "2715:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 435,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2715:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2714:14:8"
            },
            "scope": 548,
            "src": "2587:297:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 468,
              "nodeType": "Block",
              "src": "3058:150:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 456,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "3090:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 459,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 457,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1045,
                            "src": "3104:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 458,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "3104:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3090:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 460,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3129:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 455,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "3069:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3069:86:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 462,
                  "nodeType": "ExpressionStatement",
                  "src": "3069:86:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 463,
                      "name": "addressToDomain",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "3173:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                        "typeString": "mapping(address => bytes32)"
                      }
                    },
                    "id": 466,
                    "indexExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 464,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1045,
                        "src": "3189:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 465,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "3189:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3173:27:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 454,
                  "id": 467,
                  "nodeType": "Return",
                  "src": "3166:34:8"
                }
              ]
            },
            "documentation": "@dev Valid whitelisted address can query its own domain mapping.",
            "id": 469,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDomainByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 451,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2990:2:8"
            },
            "returnParameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 453,
                  "name": "fqdn",
                  "nodeType": "VariableDeclaration",
                  "scope": 469,
                  "src": "3040:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 452,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3040:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3039:14:8"
            },
            "scope": 548,
            "src": "2963:245:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 485,
              "nodeType": "Block",
              "src": "3870:103:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 483,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 480,
                      "name": "signerAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 473,
                      "src": "3940:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 481,
                        "name": "tx",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1057,
                        "src": "3957:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_transaction",
                          "typeString": "tx"
                        }
                      },
                      "id": 482,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "origin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "3957:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "3940:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 479,
                  "id": 484,
                  "nodeType": "Return",
                  "src": "3933:33:8"
                }
              ]
            },
            "documentation": "@dev Verifies signer is same as signer of current Ethereum transaction.\n      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n      Extra safety checks can be added for a production contract.\n @param signerAddress Address that should have signed the given hash.\n @param signature Proof of signing.\n @return Validity of order signature.",
            "id": 486,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSignature",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 471,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "3721:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3721:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 473,
                  "name": "signerAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "3743:21:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 472,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3743:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 475,
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "3774:24:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3774:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3711:93:8"
            },
            "returnParameters": {
              "id": 479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 478,
                  "name": "isValid",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "3852:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 477,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3852:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3851:14:8"
            },
            "scope": 548,
            "src": "3686:287:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 546,
              "nodeType": "Block",
              "src": "4813:1013:8",
              "statements": [
                {
                  "assignments": [
                    498
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 498,
                      "name": "takerAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 546,
                      "src": "4823:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 497,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4823:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 501,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 499,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1045,
                      "src": "4846:3:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 500,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "4846:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4823:33:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 506,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 503,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 498,
                          "src": "5015:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 504,
                            "name": "tx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1057,
                            "src": "5031:2:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_transaction",
                              "typeString": "tx"
                            }
                          },
                          "id": 505,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "origin",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5031:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5015:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5054:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 502,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "4937:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 508,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4937:143:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 509,
                  "nodeType": "ExpressionStatement",
                  "src": "4937:143:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 511,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "5159:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 514,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 512,
                            "name": "order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 488,
                            "src": "5173:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Order_$750_memory_ptr",
                              "typeString": "struct LibOrder.Order memory"
                            }
                          },
                          "id": 513,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "makerAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 727,
                          "src": "5173:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5159:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d414b45525f4e4f545f57484954454c4953544544",
                        "id": 515,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5206:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        },
                        "value": "MAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 510,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "5138:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5138:101:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 517,
                  "nodeType": "ExpressionStatement",
                  "src": "5138:101:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 519,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "5318:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 521,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 520,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 498,
                          "src": "5332:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5318:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54414b45525f4e4f545f57484954454c4953544544",
                        "id": 522,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5359:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        },
                        "value": "TAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 518,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1048,
                        1049
                      ],
                      "referencedDeclaration": 1049,
                      "src": "5297:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5297:95:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 524,
                  "nodeType": "ExpressionStatement",
                  "src": "5297:95:8"
                },
                {
                  "assignments": [
                    526
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 526,
                      "name": "data",
                      "nodeType": "VariableDeclaration",
                      "scope": 546,
                      "src": "5448:17:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 525,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "5448:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 536,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 529,
                            "name": "EXCHANGE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 349,
                            "src": "5504:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IExchange_$36",
                              "typeString": "contract IExchange"
                            }
                          },
                          "id": 530,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "fillOrder",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 57,
                          "src": "5504:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_struct$_Order_$750_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_struct$_FillResults_$631_memory_ptr_$",
                            "typeString": "function (struct LibOrder.Order memory,uint256,bytes memory) external returns (struct LibFillResults.FillResults memory)"
                          }
                        },
                        "id": 531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "5504:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 532,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 488,
                        "src": "5545:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Order_$750_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 533,
                        "name": "takerAssetFillAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 490,
                        "src": "5564:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 534,
                        "name": "orderSignature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 494,
                        "src": "5598:14:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_struct$_Order_$750_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 527,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1032,
                        "src": "5468:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 528,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSelector",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5468:22:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes4) pure returns (bytes memory)"
                      }
                    },
                    "id": 535,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5468:154:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5448:174:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 540,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 492,
                        "src": "5728:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 541,
                        "name": "takerAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 498,
                        "src": "5746:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 542,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 526,
                        "src": "5772:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 543,
                        "name": "TX_ORIGIN_SIGNATURE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 351,
                        "src": "5790:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 537,
                        "name": "EXCHANGE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "5687:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IExchange_$36",
                          "typeString": "contract IExchange"
                        }
                      },
                      "id": 539,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "executeTransaction",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 132,
                      "src": "5687:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,address,bytes memory,bytes memory) external"
                      }
                    },
                    "id": 544,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5687:132:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 545,
                  "nodeType": "ExpressionStatement",
                  "src": "5687:132:8"
                }
              ]
            },
            "documentation": "@dev Fills an order using `msg.sender` as the taker.\n      The transaction will revert if both the maker and taker are not whitelisted.\n      Orders should specify this contract as the `senderAddress` in order to gaurantee\n      that both maker and taker have been whitelisted.\n @param order Order struct containing order specifications.\n @param takerAssetFillAmount Desired amount of takerAsset to sell.\n @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n @param orderSignature Proof that order has been created by maker.",
            "id": 547,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fillOrderIfWhitelisted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 495,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 488,
                  "name": "order",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "4663:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$750_memory_ptr",
                    "typeString": "struct LibOrder.Order"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 487,
                    "name": "LibOrder.Order",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 750,
                    "src": "4663:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$750_storage_ptr",
                      "typeString": "struct LibOrder.Order"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 490,
                  "name": "takerAssetFillAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "4700:28:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 489,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4700:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 492,
                  "name": "salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "4738:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 491,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4738:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 494,
                  "name": "orderSignature",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "4760:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 493,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4760:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4653:140:8"
            },
            "returnParameters": {
              "id": 496,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4813:0:8"
            },
            "scope": 548,
            "src": "4622:1204:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 549,
        "src": "788:5040:8"
      }
    ],
    "src": "580:5249:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.5+commit.47a71e8f.Emscripten.clang"
  },
  "networks": {
    "1560306171479": {
      "events": {},
      "links": {},
      "address": "0x289e01360397EF18c5531cF649D2F13F00fAB7fC",
      "transactionHash": "0x66e63c6a7b9aea9e98c4cb7288fa7922c20dfd2844d5ad622aed342c89c2a73a"
    }
  },
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-06-12T05:13:43.018Z",
  "devdoc": {
    "methods": {
      "adminGetDomainByAddress(address)": {
        "details": "Admin views any domain mapped to a valid whitelisted address",
        "params": {
          "target": "Ethereum address to validate & return DNS domain mapping for."
        }
      },
      "adminUpdateWhitelist(address,bytes32,bool)": {
        "details": "Admin adds or removes an address & domain mapping from the whitelist.",
        "params": {
          "fqdn": "DNS domain to map to ethereum address.",
          "isApproved": "Whitelist status to assign to address.",
          "target": "Address to add or remove from whitelist."
        }
      },
      "fillOrderIfWhitelisted((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,uint256,bytes)": {
        "details": "Fills an order using `msg.sender` as the taker.      The transaction will revert if both the maker and taker are not whitelisted.      Orders should specify this contract as the `senderAddress` in order to gaurantee      that both maker and taker have been whitelisted.",
        "params": {
          "order": "Order struct containing order specifications.",
          "orderSignature": "Proof that order has been created by maker.",
          "salt": "Arbitrary value to gaurantee uniqueness of 0x transaction hash.",
          "takerAssetFillAmount": "Desired amount of takerAsset to sell."
        }
      },
      "getDomainByAddress()": {
        "details": "Valid whitelisted address can query its own domain mapping."
      },
      "isValidSignature(bytes32,address,bytes)": {
        "details": "Verifies signer is same as signer of current Ethereum transaction.      NOTE: This function can currently be used to validate signatures coming from outside of this contract.      Extra safety checks can be added for a production contract.",
        "params": {
          "signature": "Proof of signing.",
          "signerAddress": "Address that should have signed the given hash."
        },
        "return": "Validity of order signature."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}