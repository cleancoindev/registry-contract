{
  "contractName": "Whitelist",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_exchange",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "contentId",
          "type": "string"
        },
        {
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "adminUpdateWhitelist",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "adminUpdateStatus",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "adminGetAddressByContentId",
      "outputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "adminGetContentIdsByAddress",
      "outputs": [
        {
          "components": [
            {
              "name": "contentId",
              "type": "string"
            }
          ],
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getContentIdsByAddress",
      "outputs": [
        {
          "components": [
            {
              "name": "contentId",
              "type": "string"
            }
          ],
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "hash",
          "type": "bytes32"
        },
        {
          "name": "signerAddress",
          "type": "address"
        },
        {
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "name": "isValid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "name": "makerAddress",
              "type": "address"
            },
            {
              "name": "takerAddress",
              "type": "address"
            },
            {
              "name": "feeRecipientAddress",
              "type": "address"
            },
            {
              "name": "senderAddress",
              "type": "address"
            },
            {
              "name": "makerAssetAmount",
              "type": "uint256"
            },
            {
              "name": "takerAssetAmount",
              "type": "uint256"
            },
            {
              "name": "makerFee",
              "type": "uint256"
            },
            {
              "name": "takerFee",
              "type": "uint256"
            },
            {
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "name": "salt",
              "type": "uint256"
            },
            {
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "name": "takerAssetData",
              "type": "bytes"
            }
          ],
          "name": "order",
          "type": "tuple"
        },
        {
          "name": "takerAssetFillAmount",
          "type": "uint256"
        },
        {
          "name": "salt",
          "type": "uint256"
        },
        {
          "name": "orderSignature",
          "type": "bytes"
        }
      ],
      "name": "fillOrderIfWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.5+commit.47a71e8f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"contentId\",\"type\":\"string\"},{\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"adminUpdateWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"order\",\"type\":\"tuple\"},{\"name\":\"takerAssetFillAmount\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"orderSignature\",\"type\":\"bytes\"}],\"name\":\"fillOrderIfWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"adminUpdateStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"adminGetContentIdsByAddress\",\"outputs\":[{\"components\":[{\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentIdsByAddress\",\"outputs\":[{\"components\":[{\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"adminGetAddressByContentId\",\"outputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"signerAddress\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"isValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{\"adminGetContentIdsByAddress(address)\":{\"details\":\"Admin gets contentIds mapped to a valid whitelisted address.\",\"params\":{\"target\":\"Ethereum address to validate & return contentIds for.\"}},\"adminUpdateStatus(address,bool)\":{\"details\":\"Admin updates whitelist status for a given address.\",\"params\":{\"isApproved\":\"Whitelist status to assign to address.\",\"target\":\"Address to add or remove from Whitelist.\"}},\"adminUpdateWhitelist(address,string,bool)\":{\"details\":\"Admin adds or remove an address & domain mapping from the whitelist.\",\"params\":{\"contentId\":\"To map to ethereum address to.\",\"isApproved\":\"Whitelist status to assign to address.\",\"target\":\"Address to add or remove from whitelist.\"}},\"fillOrderIfWhitelisted((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,uint256,bytes)\":{\"details\":\"Fills an order using `msg.sender` as the taker.      The transaction will revert if both the maker and taker are not whitelisted.      Orders should specify this contract as the `senderAddress` in order to gaurantee      that both maker and taker have been whitelisted.\",\"params\":{\"order\":\"Order struct containing order specifications.\",\"orderSignature\":\"Proof that order has been created by maker.\",\"salt\":\"Arbitrary value to gaurantee uniqueness of 0x transaction hash.\",\"takerAssetFillAmount\":\"Desired amount of takerAsset to sell.\"}},\"getContentIdsByAddress()\":{\"details\":\"Valid whitelisted address can query its own contentIds.\"},\"isValidSignature(bytes32,address,bytes)\":{\"details\":\"Verifies signer is same as signer of current Ethereum transaction.      NOTE: This function can currently be used to validate signatures coming from outside of this contract.      Extra safety checks can be added for a production contract.\",\"params\":{\"signature\":\"Proof of signing.\",\"signerAddress\":\"Address that should have signed the given hash.\"},\"return\":\"Validity of order signature.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/lauren/github/registry-contract/contracts/Whitelist.sol\":\"Whitelist\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/lauren/github/registry-contract/contracts/IAssetProxyDispatcher.sol\":{\"keccak256\":\"0x9f2df0836b76e56b8fe113c224a83b95ff0c984cedfb660286eab94edb151b88\",\"urls\":[\"bzzr://1c7ca7647f032f742277cfea04722c1241e136198f7b1b424c9eed709f175c53\"]},\"/Users/lauren/github/registry-contract/contracts/IExchange.sol\":{\"keccak256\":\"0x7640d57cbe84e44d21d70f988c75d8a3e396be090268665ed24de5aab130d89b\",\"urls\":[\"bzzr://2d8926f14c4c8e7d8d94fc045af7029fe5e2952cd59f5d24d1660afe89e8496c\"]},\"/Users/lauren/github/registry-contract/contracts/IExchangeCore.sol\":{\"keccak256\":\"0x692849db6311f64436b7091679d76b2f458ffa9d88b1127c34088bf1023f3d96\",\"urls\":[\"bzzr://0d2083b036ae3026985e435f427e6fc6d7ba1a3cadbcfb92a35d67ca0a313376\"]},\"/Users/lauren/github/registry-contract/contracts/IMatchOrders.sol\":{\"keccak256\":\"0xc8bc1846e6a380a329c1bffa69c1a8b814e0f79e75f074e021ee7b5abc941cc1\",\"urls\":[\"bzzr://0bc85fc36da995c219ce5009850cbf912405c1679e0da77b9de0ad02c050cf67\"]},\"/Users/lauren/github/registry-contract/contracts/ISignatureValidator.sol\":{\"keccak256\":\"0x90b44476bb95906ed861b3d038aa9578b6dead3283f5ec192c0985180dba7eee\",\"urls\":[\"bzzr://95730ccaa6602bffdaba8be7bafb18936a1eb711fd3c9b7bc66530602ff87fab\"]},\"/Users/lauren/github/registry-contract/contracts/ITransactions.sol\":{\"keccak256\":\"0x4604da6f13306fbdd56d453ff47c04d9f2dd71d94af511bcf246306f238c7fbf\",\"urls\":[\"bzzr://77f262e41caaee63031fafeea078718f0dfe735c90f6fc0b827735eb36a1b2d2\"]},\"/Users/lauren/github/registry-contract/contracts/IWrapperFunctions.sol\":{\"keccak256\":\"0xcb15626aac4b048e3982db276638a5a5828fc24fe6afdb58c1f8646dd3dc03ad\",\"urls\":[\"bzzr://bd17dc8173df53e93a5604c0ef5dd28585fdaaab9467c3e99f1bee89068536f5\"]},\"/Users/lauren/github/registry-contract/contracts/Whitelist.sol\":{\"keccak256\":\"0x205030a814d08c0e68c4676afed81f35cac3e7ab57b6c68c33a7cb9b00f4a09c\",\"urls\":[\"bzzr://01d950a04ca7db9d242e11476d6cc05cc7352ec2e90978f18aa9eae23874cd20\"]},\"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol\":{\"keccak256\":\"0x9e3c7630c8389a8a13294a4224e7051ed5c64268864f53fc359377bdc8115c28\",\"urls\":[\"bzzr://af7152a1885ab00eb728e3e294b33b4eb1bdf3c2f6d423f5ce93d32da94f53dc\"]},\"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\":{\"keccak256\":\"0xd2901bceaae8c4f1b6b13b38bf1c99dc8fa02fd82504009f8b82fc1c6a26c8ed\",\"urls\":[\"bzzr://eb694a8bbb5671db1e00f2ad8c99c6982448c2f9114e759f64ee00c52043c259\"]},\"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\":{\"keccak256\":\"0xaea24ce7e1f7f15dd6a3f58f7c93ffdb52bbba9527ecd7bc60271e21b253349f\",\"urls\":[\"bzzr://2a7fb7eb2c0775cc74161d37f9454da5f09e2ba00aa7248c38805f3dd7c3fada\"]},\"@0x/contracts-utils/contracts/src/Ownable.sol\":{\"keccak256\":\"0xe7c6767e3fa1f51e7086adc94cdd7cfcf7f606ffcafc8942fc2dbbb3d8aded40\",\"urls\":[\"bzzr://eaec8ad75455cecc32cdb01f7522cc35b3d2f47542b2d140e84e510fb69a7727\"]},\"@0x/contracts-utils/contracts/src/SafeMath.sol\":{\"keccak256\":\"0x27027b268113e424039e67bbab9bfcfd76d0e5707c4b3068af68382c8f35bd34\",\"urls\":[\"bzzr://254aa51bd03ccc0f5096315b0883b03de9a3bc7105744570d6a77e00f4c2d6bd\"]},\"@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol\":{\"keccak256\":\"0xb48efd8c0afe60386dda1b01329b5ee8a65cae57b930bd6a010ae9af72b177cc\",\"urls\":[\"bzzr://025b49d4d83d2f9bcb4945381f4f92edf177d2667cdc15c9e1f755ca531f86e1\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051602080620022848339810180604052620000339190810190620001dc565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550307f0500000000000000000000000000000000000000000000000000000000000000604051602001620000e99291906200023e565b604051602081830303815290604052600590805190602001906200010f92919062000117565b505062000341565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015a57805160ff19168380011785556200018b565b828001600101855582156200018b579182015b828111156200018a5782518255916020019190600101906200016d565b5b5090506200019a91906200019e565b5090565b620001c391905b80821115620001bf576000816000905550600101620001a5565b5090565b90565b6000620001d48251620002ce565b905092915050565b600060208284031215620001ef57600080fd5b6000620001ff84828501620001c6565b91505092915050565b6200021d62000217826200026e565b62000302565b82525050565b62000238620002328262000282565b62000316565b82525050565b60006200024c828562000208565b6014820191506200025e828462000223565b6001820191508190509392505050565b60006200027b82620002ae565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002db82620002e2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030f8262000320565b9050919050565b6000819050919050565b60006200032d8262000334565b9050919050565b60008160601b9050919050565b611f3380620003516000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806365d9abbb1161006657806365d9abbb146101575780637b97d034146101755780638da5cb5b146101a557806393634702146101c3578063f2fde38b146101f35761009e565b80630a01d347146100a3578063141da876146100bf5780633af32abf146100db57806344ff29dc1461010b5780634981604114610127575b600080fd5b6100bd60048036036100b8919081019061144c565b61020f565b005b6100d960048036036100d49190810190611569565b6104ab565b005b6100f560048036036100f091908101906113e7565b610795565b6040516101029190611b5c565b60405180910390f35b61012560048036036101209190810190611410565b6107b5565b005b610141600480360361013c91908101906113e7565b610928565b60405161014e9190611b3a565b60405180910390f35b61015f610b83565b60405161016c9190611b3a565b60405180910390f35b61018f600480360361018a9190810190611524565b610d4b565b60405161019c9190611b1f565b60405180910390f35b6101ad610ef5565b6040516101ba9190611b1f565b60405180910390f35b6101dd60048036036101d891908101906114b8565b610f1a565b6040516101ea9190611b5c565b60405180910390f35b61020d600480360361020891908101906113e7565b610f55565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029790611bd7565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16600284846040516102c9929190611b06565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561044e57600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806020016040528085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000190805190602001906103ea929190611060565b505050508360028484604051610401929190611b06565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60003390503273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790611c17565b60405180910390fd5b60016000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a990611bf7565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790611b77565b60405180910390fd5b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4be83d5905060e01b86868560405160240161069a93929190611c37565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bfc8bfce85848460056040518563ffffffff1660e01b815260040161075b9493929190611c7c565b600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b50505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d90611bd7565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501115156108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c490611bb7565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b290611bd7565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4090611b97565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610b7857838290600052602060002001604051806020016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b605780601f10610b3557610100808354040283529160200191610b60565b820191906000526020600020905b815481529060010190602001808311610b4357829003601f168201915b50505050508152505081526020019060010190610aa8565b505050509050919050565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a90611c17565b60405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610d4257838290600052602060002001604051806020016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d2a5780601f10610cff57610100808354040283529160200191610d2a565b820191906000526020600020905b815481529060010190602001808311610d0d57829003601f168201915b50505050508152505081526020019060010190610c72565b50505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd590611bd7565b60405180910390fd5b6001600060028585604051610df4929190611b06565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea390611b97565b60405180910390fd5b60028383604051610ebe929190611b06565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16149050949350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90611bd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561105d57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106110a157805160ff19168380011785556110cf565b828001600101855582156110cf579182015b828111156110ce5782518255916020019190600101906110b3565b5b5090506110dc91906110e0565b5090565b61110291905b808211156110fe5760008160009055506001016110e6565b5090565b90565b60006111118235611e54565b905092915050565b60006111258235611e66565b905092915050565b60006111398235611e72565b905092915050565b60008083601f840112151561115557600080fd5b8235905067ffffffffffffffff81111561116e57600080fd5b60208301915083600182028301111561118657600080fd5b9250929050565b600082601f83011215156111a057600080fd5b81356111b36111ae82611cfc565b611ccf565b915080825260208301602083018583830111156111cf57600080fd5b6111da838284611ea6565b50505092915050565b600082601f83011215156111f657600080fd5b813561120961120482611d28565b611ccf565b9150808252602083016020830185838301111561122557600080fd5b611230838284611ea6565b50505092915050565b60008083601f840112151561124d57600080fd5b8235905067ffffffffffffffff81111561126657600080fd5b60208301915083600182028301111561127e57600080fd5b9250929050565b6000610180828403121561129857600080fd5b6112a3610180611ccf565b905060006112b384828501611105565b60008301525060206112c784828501611105565b60208301525060406112db84828501611105565b60408301525060606112ef84828501611105565b6060830152506080611303848285016113d3565b60808301525060a0611317848285016113d3565b60a08301525060c061132b848285016113d3565b60c08301525060e061133f848285016113d3565b60e083015250610100611354848285016113d3565b6101008301525061012061136a848285016113d3565b6101208301525061014082013567ffffffffffffffff81111561138c57600080fd5b6113988482850161118d565b6101408301525061016082013567ffffffffffffffff8111156113ba57600080fd5b6113c68482850161118d565b6101608301525092915050565b60006113df8235611e9c565b905092915050565b6000602082840312156113f957600080fd5b600061140784828501611105565b91505092915050565b6000806040838503121561142357600080fd5b600061143185828601611105565b925050602061144285828601611119565b9150509250929050565b6000806000806060858703121561146257600080fd5b600061147087828801611105565b945050602085013567ffffffffffffffff81111561148d57600080fd5b61149987828801611239565b935093505060406114ac87828801611119565b91505092959194509250565b600080600080606085870312156114ce57600080fd5b60006114dc8782880161112d565b94505060206114ed87828801611105565b935050604085013567ffffffffffffffff81111561150a57600080fd5b61151687828801611141565b925092505092959194509250565b6000806020838503121561153757600080fd5b600083013567ffffffffffffffff81111561155157600080fd5b61155d85828601611239565b92509250509250929050565b6000806000806080858703121561157f57600080fd5b600085013567ffffffffffffffff81111561159957600080fd5b6115a587828801611285565b94505060206115b6878288016113d3565b93505060406115c7878288016113d3565b925050606085013567ffffffffffffffff8111156115e457600080fd5b6115f0878288016111e3565b91505092959194509250565b60006116088383611abe565b905092915050565b61161981611e0c565b82525050565b61162881611e0c565b82525050565b600061163982611d73565b6116438185611dac565b93508360208202850161165585611d54565b60005b8481101561168e5783830388526116708383516115fc565b925061167b82611d9f565b9150602088019750600181019050611658565b508196508694505050505092915050565b6116a881611e1e565b82525050565b60006116b982611d89565b6116c38185611dce565b93506116d3818560208601611eb5565b6116dc81611ee8565b840191505092915050565b60006116f282611d7e565b6116fc8185611dbd565b935061170c818560208601611eb5565b61171581611ee8565b840191505092915050565b60008154600181166000811461173d5760018114611763576117a7565b607f600283041661174e8187611dce565b955060ff1983168652602086019350506117a7565b600282046117718187611dce565b955061177c85611d61565b60005b8281101561179e5781548189015260018201915060208101905061177f565b80880195505050505b505092915050565b60006117bb8385611e01565b93506117c8838584611ea6565b82840190509392505050565b60006117df82611d94565b6117e98185611ddf565b93506117f9818560208601611eb5565b61180281611ee8565b840191505092915050565b600061181a601583611df0565b91507f54414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b600061185a601783611df0565b91507f414444524553535f4e4f545f57484954454c49535445440000000000000000006000830152602082019050919050565b600061189a602583611df0565b91507f414444524553535f4841535f4e4f5f4153534f4349415445445f434f4e54454e60008301527f545f4944530000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611900601383611df0565b91507f4f4e4c595f434f4e54524143545f4f574e4552000000000000000000000000006000830152602082019050919050565b6000611940601583611df0565b91507f4d414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b6000611980600e83611df0565b91507f494e56414c49445f53454e4445520000000000000000000000000000000000006000830152602082019050919050565b6000610180830160008301516119cc6000860182611610565b5060208301516119df6020860182611610565b5060408301516119f26040860182611610565b506060830151611a056060860182611610565b506080830151611a186080860182611ae8565b5060a0830151611a2b60a0860182611ae8565b5060c0830151611a3e60c0860182611ae8565b5060e0830151611a5160e0860182611ae8565b50610100830151611a66610100860182611ae8565b50610120830151611a7b610120860182611ae8565b50610140830151848203610140860152611a9582826116e7565b915050610160830151848203610160860152611ab182826116e7565b9150508091505092915050565b60006020830160008301518482036000860152611adb82826117d4565b9150508091505092915050565b611af181611e4a565b82525050565b611b0081611e4a565b82525050565b6000611b138284866117af565b91508190509392505050565b6000602082019050611b34600083018461161f565b92915050565b60006020820190508181036000830152611b54818461162e565b905092915050565b6000602082019050611b71600083018461169f565b92915050565b60006020820190508181036000830152611b908161180d565b9050919050565b60006020820190508181036000830152611bb08161184d565b9050919050565b60006020820190508181036000830152611bd08161188d565b9050919050565b60006020820190508181036000830152611bf0816118f3565b9050919050565b60006020820190508181036000830152611c1081611933565b9050919050565b60006020820190508181036000830152611c3081611973565b9050919050565b60006060820190508181036000830152611c5181866119b3565b9050611c606020830185611af7565b8181036040830152611c7281846116ae565b9050949350505050565b6000608082019050611c916000830187611af7565b611c9e602083018661161f565b8181036040830152611cb081856116ae565b90508181036060830152611cc48184611720565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715611cf257600080fd5b8060405250919050565b600067ffffffffffffffff821115611d1357600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611d3f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e1782611e2a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e5f82611e7c565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611ed3578082015181840152602081019050611eb8565b83811115611ee2576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058206ff4dae859da6cf7e045fe079704b2f707a50918dc71176b74694fbe190a17f46c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806365d9abbb1161006657806365d9abbb146101575780637b97d034146101755780638da5cb5b146101a557806393634702146101c3578063f2fde38b146101f35761009e565b80630a01d347146100a3578063141da876146100bf5780633af32abf146100db57806344ff29dc1461010b5780634981604114610127575b600080fd5b6100bd60048036036100b8919081019061144c565b61020f565b005b6100d960048036036100d49190810190611569565b6104ab565b005b6100f560048036036100f091908101906113e7565b610795565b6040516101029190611b5c565b60405180910390f35b61012560048036036101209190810190611410565b6107b5565b005b610141600480360361013c91908101906113e7565b610928565b60405161014e9190611b3a565b60405180910390f35b61015f610b83565b60405161016c9190611b3a565b60405180910390f35b61018f600480360361018a9190810190611524565b610d4b565b60405161019c9190611b1f565b60405180910390f35b6101ad610ef5565b6040516101ba9190611b1f565b60405180910390f35b6101dd60048036036101d891908101906114b8565b610f1a565b6040516101ea9190611b5c565b60405180910390f35b61020d600480360361020891908101906113e7565b610f55565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029790611bd7565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16600284846040516102c9929190611b06565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561044e57600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806020016040528085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000190805190602001906103ea929190611060565b505050508360028484604051610401929190611b06565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60003390503273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790611c17565b60405180910390fd5b60016000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a990611bf7565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790611b77565b60405180910390fd5b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4be83d5905060e01b86868560405160240161069a93929190611c37565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bfc8bfce85848460056040518563ffffffff1660e01b815260040161075b9493929190611c7c565b600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b50505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d90611bd7565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501115156108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c490611bb7565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b290611bd7565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4090611b97565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610b7857838290600052602060002001604051806020016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b605780601f10610b3557610100808354040283529160200191610b60565b820191906000526020600020905b815481529060010190602001808311610b4357829003601f168201915b50505050508152505081526020019060010190610aa8565b505050509050919050565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a90611c17565b60405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610d4257838290600052602060002001604051806020016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d2a5780601f10610cff57610100808354040283529160200191610d2a565b820191906000526020600020905b815481529060010190602001808311610d0d57829003601f168201915b50505050508152505081526020019060010190610c72565b50505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd590611bd7565b60405180910390fd5b6001600060028585604051610df4929190611b06565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea390611b97565b60405180910390fd5b60028383604051610ebe929190611b06565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16149050949350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90611bd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561105d57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106110a157805160ff19168380011785556110cf565b828001600101855582156110cf579182015b828111156110ce5782518255916020019190600101906110b3565b5b5090506110dc91906110e0565b5090565b61110291905b808211156110fe5760008160009055506001016110e6565b5090565b90565b60006111118235611e54565b905092915050565b60006111258235611e66565b905092915050565b60006111398235611e72565b905092915050565b60008083601f840112151561115557600080fd5b8235905067ffffffffffffffff81111561116e57600080fd5b60208301915083600182028301111561118657600080fd5b9250929050565b600082601f83011215156111a057600080fd5b81356111b36111ae82611cfc565b611ccf565b915080825260208301602083018583830111156111cf57600080fd5b6111da838284611ea6565b50505092915050565b600082601f83011215156111f657600080fd5b813561120961120482611d28565b611ccf565b9150808252602083016020830185838301111561122557600080fd5b611230838284611ea6565b50505092915050565b60008083601f840112151561124d57600080fd5b8235905067ffffffffffffffff81111561126657600080fd5b60208301915083600182028301111561127e57600080fd5b9250929050565b6000610180828403121561129857600080fd5b6112a3610180611ccf565b905060006112b384828501611105565b60008301525060206112c784828501611105565b60208301525060406112db84828501611105565b60408301525060606112ef84828501611105565b6060830152506080611303848285016113d3565b60808301525060a0611317848285016113d3565b60a08301525060c061132b848285016113d3565b60c08301525060e061133f848285016113d3565b60e083015250610100611354848285016113d3565b6101008301525061012061136a848285016113d3565b6101208301525061014082013567ffffffffffffffff81111561138c57600080fd5b6113988482850161118d565b6101408301525061016082013567ffffffffffffffff8111156113ba57600080fd5b6113c68482850161118d565b6101608301525092915050565b60006113df8235611e9c565b905092915050565b6000602082840312156113f957600080fd5b600061140784828501611105565b91505092915050565b6000806040838503121561142357600080fd5b600061143185828601611105565b925050602061144285828601611119565b9150509250929050565b6000806000806060858703121561146257600080fd5b600061147087828801611105565b945050602085013567ffffffffffffffff81111561148d57600080fd5b61149987828801611239565b935093505060406114ac87828801611119565b91505092959194509250565b600080600080606085870312156114ce57600080fd5b60006114dc8782880161112d565b94505060206114ed87828801611105565b935050604085013567ffffffffffffffff81111561150a57600080fd5b61151687828801611141565b925092505092959194509250565b6000806020838503121561153757600080fd5b600083013567ffffffffffffffff81111561155157600080fd5b61155d85828601611239565b92509250509250929050565b6000806000806080858703121561157f57600080fd5b600085013567ffffffffffffffff81111561159957600080fd5b6115a587828801611285565b94505060206115b6878288016113d3565b93505060406115c7878288016113d3565b925050606085013567ffffffffffffffff8111156115e457600080fd5b6115f0878288016111e3565b91505092959194509250565b60006116088383611abe565b905092915050565b61161981611e0c565b82525050565b61162881611e0c565b82525050565b600061163982611d73565b6116438185611dac565b93508360208202850161165585611d54565b60005b8481101561168e5783830388526116708383516115fc565b925061167b82611d9f565b9150602088019750600181019050611658565b508196508694505050505092915050565b6116a881611e1e565b82525050565b60006116b982611d89565b6116c38185611dce565b93506116d3818560208601611eb5565b6116dc81611ee8565b840191505092915050565b60006116f282611d7e565b6116fc8185611dbd565b935061170c818560208601611eb5565b61171581611ee8565b840191505092915050565b60008154600181166000811461173d5760018114611763576117a7565b607f600283041661174e8187611dce565b955060ff1983168652602086019350506117a7565b600282046117718187611dce565b955061177c85611d61565b60005b8281101561179e5781548189015260018201915060208101905061177f565b80880195505050505b505092915050565b60006117bb8385611e01565b93506117c8838584611ea6565b82840190509392505050565b60006117df82611d94565b6117e98185611ddf565b93506117f9818560208601611eb5565b61180281611ee8565b840191505092915050565b600061181a601583611df0565b91507f54414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b600061185a601783611df0565b91507f414444524553535f4e4f545f57484954454c49535445440000000000000000006000830152602082019050919050565b600061189a602583611df0565b91507f414444524553535f4841535f4e4f5f4153534f4349415445445f434f4e54454e60008301527f545f4944530000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611900601383611df0565b91507f4f4e4c595f434f4e54524143545f4f574e4552000000000000000000000000006000830152602082019050919050565b6000611940601583611df0565b91507f4d414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b6000611980600e83611df0565b91507f494e56414c49445f53454e4445520000000000000000000000000000000000006000830152602082019050919050565b6000610180830160008301516119cc6000860182611610565b5060208301516119df6020860182611610565b5060408301516119f26040860182611610565b506060830151611a056060860182611610565b506080830151611a186080860182611ae8565b5060a0830151611a2b60a0860182611ae8565b5060c0830151611a3e60c0860182611ae8565b5060e0830151611a5160e0860182611ae8565b50610100830151611a66610100860182611ae8565b50610120830151611a7b610120860182611ae8565b50610140830151848203610140860152611a9582826116e7565b915050610160830151848203610160860152611ab182826116e7565b9150508091505092915050565b60006020830160008301518482036000860152611adb82826117d4565b9150508091505092915050565b611af181611e4a565b82525050565b611b0081611e4a565b82525050565b6000611b138284866117af565b91508190509392505050565b6000602082019050611b34600083018461161f565b92915050565b60006020820190508181036000830152611b54818461162e565b905092915050565b6000602082019050611b71600083018461169f565b92915050565b60006020820190508181036000830152611b908161180d565b9050919050565b60006020820190508181036000830152611bb08161184d565b9050919050565b60006020820190508181036000830152611bd08161188d565b9050919050565b60006020820190508181036000830152611bf0816118f3565b9050919050565b60006020820190508181036000830152611c1081611933565b9050919050565b60006020820190508181036000830152611c3081611973565b9050919050565b60006060820190508181036000830152611c5181866119b3565b9050611c606020830185611af7565b8181036040830152611c7281846116ae565b9050949350505050565b6000608082019050611c916000830187611af7565b611c9e602083018661161f565b8181036040830152611cb081856116ae565b90508181036060830152611cc48184611720565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715611cf257600080fd5b8060405250919050565b600067ffffffffffffffff821115611d1357600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611d3f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e1782611e2a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e5f82611e7c565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611ed3578082015181840152602081019050611eb8565b83811115611ee2576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058206ff4dae859da6cf7e045fe079704b2f707a50918dc71176b74694fbe190a17f46c6578706572696d656e74616cf50037",
  "sourceMap": "993:5908:8:-;;;1703:188;8:9:-1;5:2;;;30:1;27;20:12;5:2;1703:188:8;;;;;;;;;;;;;;;;;;;;;;181:10:12;173:5;;:18;;;;;;;;;;;;;;;;;;1785:9:8;1764:8;;:31;;;;;;;;;;;;;;;;;;1852:4;1859:24;1827:57;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1827:57:8;;;1805:19;:79;;;;;;;;;;;;:::i;:::-;;1703:188;993:5908;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;;68:59;;;;;134:263;;249:2;237:9;228:7;224:23;220:32;217:2;;;265:1;262;255:12;217:2;300:1;317:64;373:7;364:6;353:9;349:22;317:64;;;307:74;;279:108;211:186;;;;;404:159;505:52;525:31;550:5;525:31;;;505:52;;;500:3;493:65;487:76;;;570:155;669:50;688:30;712:5;688:30;;;669:50;;;664:3;657:63;651:74;;;732:378;;877:75;948:3;939:6;877:75;;;974:2;969:3;965:12;958:19;;988:73;1057:3;1048:6;988:73;;;1083:1;1078:3;1074:11;1067:18;;1102:3;1095:10;;865:245;;;;;;1117:105;;1186:31;1211:5;1186:31;;;1175:42;;1169:53;;;;1229:151;;1308:66;1301:5;1297:78;1286:89;;1280:100;;;;1387:128;;1467:42;1460:5;1456:54;1445:65;;1439:76;;;;1522:105;;1591:31;1616:5;1591:31;;;1580:42;;1574:53;;;;1634:128;;1714:42;1707:5;1703:54;1692:65;;1686:76;;;;1769:95;;1833:26;1853:5;1833:26;;;1822:37;;1816:48;;;;1871:73;;1934:5;1923:16;;1917:27;;;;1951:89;;2015:20;2029:5;2015:20;;;2004:31;;1998:42;;;;2048:81;;2117:5;2113:2;2109:14;2097:26;;2090:39;;;;993:5908:8;;;;;;;",
  "deployedSourceMap": "993:5908:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;993:5908:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:467;;;;;;;;;;;;;;;;:::i;:::-;;5695:1204;;;;;;;;;;;;;;;;:::i;:::-;;1118:46;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2830:298;;;;;;;;;;;;;;;;:::i;:::-;;3636:310;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4022:258;;;:::i;:::-;;;;;;;;;;;;;;;;3135:344;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;102:20:12;;;:::i;:::-;;;;;;;;;;;;;;;;4759:287:8;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;344:167:12;;;;;;;;;;;;;;;;:::i;:::-;;2163:467:8;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;2438:6:8;2405:39;;:18;2424:9;;2405:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:39;;;;2401:177;;;2461:14;:22;2476:6;2461:22;;;;;;;;;;;;;;;2489:24;;;;;;;;2503:9;;2489:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2489:24:8;;;;;;;;;2461:53;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2461:53:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2560:6;2528:18;2547:9;;2528:29;;;;;;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;2401:177;2612:10;2588:13;:21;2602:6;2588:21;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;2163:467;;;;:::o;5695:1204::-;5896:20;5919:10;5896:33;;6104:9;6088:25;;:12;:25;;;6010:143;;;;;;;;;;;;;;;;;;;;;;;;6232:13;:33;6246:5;:18;;;6232:33;;;;;;;;;;;;;;;;;;;;;;;;;6211:101;;;;;;;;;;;;;;;;;;;;;;;;6391:13;:27;6405:12;6391:27;;;;;;;;;;;;;;;;;;;;;;;;;6370:95;;;;;;;;;;;;;;;;;;;;;;;;6521:17;6577:8;;;;;;;;;;;:18;;;:27;;;;6618:5;6637:20;6671:14;6541:154;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6541:154:8;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;6541:154:8;6521:174;;6760:8;;;;;;;;;;;:27;;;6801:4;6819:12;6845:4;6863:19;6760:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6760:132:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6760:132:8;;;;5695:1204;;;;;;:::o;1118:46::-;;;;;;;;;;;;;;;;;;;;;;:::o;2830:298::-;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;3013:1:8;2981:14;:22;2996:6;2981:22;;;;;;;;;;;;;;;:29;;;;:33;2962:113;;;;;;;;;;;;;;;;;;;;;;;;3110:10;3086:13;:21;3100:6;3086:21;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;2830:298;;:::o;3636:310::-;3768:22;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;3828:13:8;:21;3842:6;3828:21;;;;;;;;;;;;;;;;;;;;;;;;;3807:91;;;;;;;;;;;;;;;;;;;;;;;;3916:14;:22;3931:6;3916:22;;;;;;;;;;;;;;;3909:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3636:310;;;:::o;4022:258::-;4103:22;4163:13;:25;4177:10;4163:25;;;;;;;;;;;;;;;;;;;;;;;;;4142:86;;;;;;;;;;;;;;;;;;;;;;;;4246:14;:26;4261:10;4246:26;;;;;;;;;;;;;;;4239:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4022:258;:::o;3135:344::-;3277:14;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;3329:13:8;:46;3344:18;3363:9;;3344:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3329:46;;;;;;;;;;;;;;;;;;;;;;;;;3308:116;;;;;;;;;;;;;;;;;;;;;;;;3442:18;3461:9;;3442:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3435:36;;3135:344;;;;:::o;102:20:12:-;;;;;;;;;;;;;:::o;4759:287:8:-;4925:12;5030:9;5013:26;;:13;:26;;;5006:33;;4759:287;;;;;;:::o;344:167:12:-;270:5;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;460:1;440:22;;:8;:22;;;;436:69;;;486:8;478:5;;:16;;;;;;;;;;;;;;;;;;436:69;344:167;:::o;993:5908:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;;57:66;;;;;130:112;;194:43;229:6;216:20;194:43;;;185:52;;179:63;;;;;249:118;;316:46;354:6;341:20;316:46;;;307:55;;301:66;;;;;388:335;;;502:3;495:4;487:6;483:17;479:27;472:35;469:2;;;520:1;517;510:12;469:2;553:6;540:20;530:30;;580:18;572:6;569:30;566:2;;;612:1;609;602:12;566:2;646:4;638:6;634:17;622:29;;696:3;689;681:6;677:16;667:8;663:31;660:40;657:2;;;713:1;710;703:12;657:2;462:261;;;;;;732:432;;829:3;822:4;814:6;810:17;806:27;799:35;796:2;;;847:1;844;837:12;796:2;884:6;871:20;906:60;921:44;958:6;921:44;;;906:60;;;897:69;;986:6;979:5;972:21;1022:4;1014:6;1010:17;1055:4;1048:5;1044:16;1090:3;1081:6;1076:3;1072:16;1069:25;1066:2;;;1107:1;1104;1097:12;1066:2;1117:41;1151:6;1146:3;1141;1117:41;;;789:375;;;;;;;;1173:440;;1274:3;1267:4;1259:6;1255:17;1251:27;1244:35;1241:2;;;1292:1;1289;1282:12;1241:2;1329:6;1316:20;1351:64;1366:48;1407:6;1366:48;;;1351:64;;;1342:73;;1435:6;1428:5;1421:21;1471:4;1463:6;1459:17;1504:4;1497:5;1493:16;1539:3;1530:6;1525:3;1521:16;1518:25;1515:2;;;1556:1;1553;1546:12;1515:2;1566:41;1600:6;1595:3;1590;1566:41;;;1234:379;;;;;;;;1636:336;;;1751:3;1744:4;1736:6;1732:17;1728:27;1721:35;1718:2;;;1769:1;1766;1759:12;1718:2;1802:6;1789:20;1779:30;;1829:18;1821:6;1818:30;1815:2;;;1861:1;1858;1851:12;1815:2;1895:4;1887:6;1883:17;1871:29;;1945:3;1938;1930:6;1926:16;1916:8;1912:31;1909:40;1906:2;;;1962:1;1959;1952:12;1906:2;1711:261;;;;;;2008:2208;;2119:5;2107:9;2102:3;2098:19;2094:31;2091:2;;;2138:1;2135;2128:12;2091:2;2156:21;2171:5;2156:21;;;2147:30;;2235:1;2266:49;2311:3;2302:6;2291:9;2287:22;2266:49;;;2260:3;2253:5;2249:15;2242:74;2187:140;2385:2;2418:49;2463:3;2454:6;2443:9;2439:22;2418:49;;;2411:4;2404:5;2400:16;2393:75;2337:142;2544:2;2577:49;2622:3;2613:6;2602:9;2598:22;2577:49;;;2570:4;2563:5;2559:16;2552:75;2489:149;2697:2;2730:49;2775:3;2766:6;2755:9;2751:22;2730:49;;;2723:4;2716:5;2712:16;2705:75;2648:143;2853:3;2887:49;2932:3;2923:6;2912:9;2908:22;2887:49;;;2880:4;2873:5;2869:16;2862:75;2801:147;3010:3;3044:49;3089:3;3080:6;3069:9;3065:22;3044:49;;;3037:4;3030:5;3026:16;3019:75;2958:147;3159:3;3193:49;3238:3;3229:6;3218:9;3214:22;3193:49;;;3186:4;3179:5;3175:16;3168:75;3115:139;3308:3;3342:49;3387:3;3378:6;3367:9;3363:22;3342:49;;;3335:4;3328:5;3324:16;3317:75;3264:139;3470:3;3505:49;3550:3;3541:6;3530:9;3526:22;3505:49;;;3497:5;3490;3486:17;3479:76;3413:153;3616:3;3651:49;3696:3;3687:6;3676:9;3672:22;3651:49;;;3643:5;3636;3632:17;3625:76;3576:136;3800:3;3789:9;3785:19;3772:33;3825:18;3817:6;3814:30;3811:2;;;3857:1;3854;3847:12;3811:2;3893:54;3943:3;3934:6;3923:9;3919:22;3893:54;;;3885:5;3878;3874:17;3867:81;3722:237;4047:3;4036:9;4032:19;4019:33;4072:18;4064:6;4061:30;4058:2;;;4104:1;4101;4094:12;4058:2;4140:54;4190:3;4181:6;4170:9;4166:22;4140:54;;;4132:5;4125;4121:17;4114:81;3969:237;2085:2131;;;;;4223:118;;4290:46;4328:6;4315:20;4290:46;;;4281:55;;4275:66;;;;;4348:241;;4452:2;4440:9;4431:7;4427:23;4423:32;4420:2;;;4468:1;4465;4458:12;4420:2;4503:1;4520:53;4565:7;4556:6;4545:9;4541:22;4520:53;;;4510:63;;4482:97;4414:175;;;;;4596:360;;;4714:2;4702:9;4693:7;4689:23;4685:32;4682:2;;;4730:1;4727;4720:12;4682:2;4765:1;4782:53;4827:7;4818:6;4807:9;4803:22;4782:53;;;4772:63;;4744:97;4872:2;4890:50;4932:7;4923:6;4912:9;4908:22;4890:50;;;4880:60;;4851:95;4676:280;;;;;;4963:611;;;;;5118:2;5106:9;5097:7;5093:23;5089:32;5086:2;;;5134:1;5131;5124:12;5086:2;5169:1;5186:53;5231:7;5222:6;5211:9;5207:22;5186:53;;;5176:63;;5148:97;5304:2;5293:9;5289:18;5276:32;5328:18;5320:6;5317:30;5314:2;;;5360:1;5357;5350:12;5314:2;5388:65;5445:7;5436:6;5425:9;5421:22;5388:65;;;5378:75;;;;5255:204;5490:2;5508:50;5550:7;5541:6;5530:9;5526:22;5508:50;;;5498:60;;5469:95;5080:494;;;;;;;;5581:615;;;;;5738:2;5726:9;5717:7;5713:23;5709:32;5706:2;;;5754:1;5751;5744:12;5706:2;5789:1;5806:53;5851:7;5842:6;5831:9;5827:22;5806:53;;;5796:63;;5768:97;5896:2;5914:53;5959:7;5950:6;5939:9;5935:22;5914:53;;;5904:63;;5875:98;6032:2;6021:9;6017:18;6004:32;6056:18;6048:6;6045:30;6042:2;;;6088:1;6085;6078:12;6042:2;6116:64;6172:7;6163:6;6152:9;6148:22;6116:64;;;6106:74;;;;5983:203;5700:496;;;;;;;;6203:367;;;6327:2;6315:9;6306:7;6302:23;6298:32;6295:2;;;6343:1;6340;6333:12;6295:2;6406:1;6395:9;6391:17;6378:31;6429:18;6421:6;6418:30;6415:2;;;6461:1;6458;6451:12;6415:2;6489:65;6546:7;6537:6;6526:9;6522:22;6489:65;;;6479:75;;;;6357:203;6289:281;;;;;;6577:851;;;;;6763:3;6751:9;6742:7;6738:23;6734:33;6731:2;;;6780:1;6777;6770:12;6731:2;6843:1;6832:9;6828:17;6815:31;6866:18;6858:6;6855:30;6852:2;;;6898:1;6895;6888:12;6852:2;6918:75;6985:7;6976:6;6965:9;6961:22;6918:75;;;6908:85;;6794:205;7030:2;7048:53;7093:7;7084:6;7073:9;7069:22;7048:53;;;7038:63;;7009:98;7138:2;7156:53;7201:7;7192:6;7181:9;7177:22;7156:53;;;7146:63;;7117:98;7274:2;7263:9;7259:18;7246:32;7298:18;7290:6;7287:30;7284:2;;;7330:1;7327;7320:12;7284:2;7350:62;7404:7;7395:6;7384:9;7380:22;7350:62;;;7340:72;;7225:193;6725:703;;;;;;;;7436:259;;7588:101;7685:3;7678:5;7588:101;;;7574:115;;7567:128;;;;;7703:110;7776:31;7801:5;7776:31;;;7771:3;7764:44;7758:55;;;7820:120;7903:31;7928:5;7903:31;;;7898:3;7891:44;7885:55;;;8024:987;;8221:80;8295:5;8221:80;;;8314:112;8419:6;8414:3;8314:112;;;8307:119;;8449:3;8491:4;8483:6;8479:17;8474:3;8470:27;8517:82;8593:5;8517:82;;;8620:1;8605:367;8630:6;8627:1;8624:13;8605:367;;;8692:9;8686:4;8682:20;8677:3;8670:33;8718:116;8829:4;8820:6;8814:13;8718:116;;;8710:124;;8851:86;8930:6;8851:86;;;8841:96;;8960:4;8955:3;8951:14;8944:21;;8652:1;8649;8645:9;8640:14;;8605:367;;;8609:14;8985:4;8978:11;;9002:3;8995:10;;8200:811;;;;;;;;;9019:111;9096:28;9118:5;9096:28;;;9091:3;9084:41;9078:52;;;9137:343;;9247:38;9279:5;9247:38;;;9297:70;9360:6;9355:3;9297:70;;;9290:77;;9372:52;9417:6;9412:3;9405:4;9398:5;9394:16;9372:52;;;9445:29;9467:6;9445:29;;;9440:3;9436:39;9429:46;;9227:253;;;;;;9487:315;;9583:34;9611:5;9583:34;;;9629:60;9682:6;9677:3;9629:60;;;9622:67;;9694:52;9739:6;9734:3;9727:4;9720:5;9716:16;9694:52;;;9767:29;9789:6;9767:29;;;9762:3;9758:39;9751:46;;9563:239;;;;;;9832:818;;9949:5;9943:12;9983:1;9972:9;9968:17;9996:1;9991:247;;;;10249:1;10244:400;;;;9961:683;;9991:247;10069:4;10065:1;10054:9;10050:17;10046:28;10088:70;10151:6;10146:3;10088:70;;;10081:77;;10196:4;10192:9;10181;10177:25;10172:3;10165:38;10226:4;10221:3;10217:14;10210:21;;9998:240;9991:247;;10244:400;10313:1;10302:9;10298:17;10329:70;10392:6;10387:3;10329:70;;;10322:77;;10421:37;10452:5;10421:37;;;10474:1;10482:130;10496:6;10493:1;10490:13;10482:130;;;10561:7;10555:14;10551:1;10546:3;10542:11;10535:35;10602:1;10593:7;10589:15;10578:26;;10518:4;10515:1;10511:12;10506:17;;10482:130;;;10635:1;10630:3;10626:11;10619:18;;10251:393;;;9961:683;;9919:731;;;;;;10681:303;;10814:89;10896:6;10891:3;10814:89;;;10807:96;;10908:43;10944:6;10939:3;10932:5;10908:43;;;10972:6;10967:3;10963:16;10956:23;;10801:183;;;;;;10991:319;;11089:35;11118:5;11089:35;;;11136:61;11190:6;11185:3;11136:61;;;11129:68;;11202:52;11247:6;11242:3;11235:4;11228:5;11224:16;11202:52;;;11275:29;11297:6;11275:29;;;11270:3;11266:39;11259:46;;11069:241;;;;;;11318:364;;11478:67;11542:2;11537:3;11478:67;;;11471:74;;11578:66;11574:1;11569:3;11565:11;11558:87;11673:2;11668:3;11664:12;11657:19;;11464:218;;;;11691:364;;11851:67;11915:2;11910:3;11851:67;;;11844:74;;11951:66;11947:1;11942:3;11938:11;11931:87;12046:2;12041:3;12037:12;12030:19;;11837:218;;;;12064:465;;12224:67;12288:2;12283:3;12224:67;;;12217:74;;12324:66;12320:1;12315:3;12311:11;12304:87;12425:66;12420:2;12415:3;12411:12;12404:88;12520:2;12515:3;12511:12;12504:19;;12210:319;;;;12538:364;;12698:67;12762:2;12757:3;12698:67;;;12691:74;;12798:66;12794:1;12789:3;12785:11;12778:87;12893:2;12888:3;12884:12;12877:19;;12684:218;;;;12911:364;;13071:67;13135:2;13130:3;13071:67;;;13064:74;;13171:66;13167:1;13162:3;13158:11;13151:87;13266:2;13261:3;13257:12;13250:19;;13057:218;;;;13284:364;;13444:67;13508:2;13503:3;13444:67;;;13437:74;;13544:66;13540:1;13535:3;13531:11;13524:87;13639:2;13634:3;13630:12;13623:19;;13430:218;;;;13709:2261;;13854:5;13849:3;13845:15;13945:3;13938:5;13934:15;13928:22;13956:61;14012:3;14007;14003:13;13990:11;13956:61;;;13875:148;14103:4;14096:5;14092:16;14086:23;14115:62;14171:4;14166:3;14162:14;14149:11;14115:62;;;14033:150;14270:4;14263:5;14259:16;14253:23;14282:62;14338:4;14333:3;14329:14;14316:11;14282:62;;;14193:157;14431:4;14424:5;14420:16;14414:23;14443:62;14499:4;14494:3;14490:14;14477:11;14443:62;;;14360:151;14595:4;14588:5;14584:16;14578:23;14607:62;14663:4;14658:3;14654:14;14641:11;14607:62;;;14521:154;14759:4;14752:5;14748:16;14742:23;14771:62;14827:4;14822:3;14818:14;14805:11;14771:62;;;14685:154;14915:4;14908:5;14904:16;14898:23;14927:62;14983:4;14978:3;14974:14;14961:11;14927:62;;;14849:146;15071:4;15064:5;15060:16;15054:23;15083:62;15139:4;15134:3;15130:14;15117:11;15083:62;;;15005:146;15240:5;15233;15229:17;15223:24;15253:63;15309:5;15304:3;15300:15;15287:11;15253:63;;;15161:161;15394:5;15387;15383:17;15377:24;15407:63;15463:5;15458:3;15454:15;15441:11;15407:63;;;15332:144;15558:5;15551;15547:17;15541:24;15612:3;15606:4;15602:14;15594:5;15589:3;15585:15;15578:39;15632:66;15693:4;15680:11;15632:66;;;15624:74;;15486:224;15792:5;15785;15781:17;15775:24;15846:3;15840:4;15836:14;15828:5;15823:3;15819:15;15812:39;15866:66;15927:4;15914:11;15866:66;;;15858:74;;15720:224;15961:4;15954:11;;13827:2143;;;;;;16048:410;;16195:4;16190:3;16186:14;16282:3;16275:5;16271:15;16265:22;16332:3;16326:4;16322:14;16316:3;16311;16307:13;16300:37;16352:68;16415:4;16402:11;16352:68;;;16344:76;;16215:217;16449:4;16442:11;;16168:290;;;;;;16465:110;16538:31;16563:5;16538:31;;;16533:3;16526:44;16520:55;;;16582:120;16665:31;16690:5;16665:31;;;16660:3;16653:44;16647:55;;;16709:286;;16865:105;16966:3;16957:6;16949;16865:105;;;16858:112;;16987:3;16980:10;;16846:149;;;;;;17002:213;;17120:2;17109:9;17105:18;17097:26;;17134:71;17202:1;17191:9;17187:17;17178:6;17134:71;;;17091:124;;;;;17222:465;;17442:2;17431:9;17427:18;17419:26;;17492:9;17486:4;17482:20;17478:1;17467:9;17463:17;17456:47;17517:160;17672:4;17663:6;17517:160;;;17509:168;;17413:274;;;;;17694:201;;17806:2;17795:9;17791:18;17783:26;;17820:65;17882:1;17871:9;17867:17;17858:6;17820:65;;;17777:118;;;;;17902:407;;18093:2;18082:9;18078:18;18070:26;;18143:9;18137:4;18133:20;18129:1;18118:9;18114:17;18107:47;18168:131;18294:4;18168:131;;;18160:139;;18064:245;;;;18316:407;;18507:2;18496:9;18492:18;18484:26;;18557:9;18551:4;18547:20;18543:1;18532:9;18528:17;18521:47;18582:131;18708:4;18582:131;;;18574:139;;18478:245;;;;18730:407;;18921:2;18910:9;18906:18;18898:26;;18971:9;18965:4;18961:20;18957:1;18946:9;18942:17;18935:47;18996:131;19122:4;18996:131;;;18988:139;;18892:245;;;;19144:407;;19335:2;19324:9;19320:18;19312:26;;19385:9;19379:4;19375:20;19371:1;19360:9;19356:17;19349:47;19410:131;19536:4;19410:131;;;19402:139;;19306:245;;;;19558:407;;19749:2;19738:9;19734:18;19726:26;;19799:9;19793:4;19789:20;19785:1;19774:9;19770:17;19763:47;19824:131;19950:4;19824:131;;;19816:139;;19720:245;;;;19972:407;;20163:2;20152:9;20148:18;20140:26;;20213:9;20207:4;20203:20;20199:1;20188:9;20184:17;20177:47;20238:131;20364:4;20238:131;;;20230:139;;20134:245;;;;20386:655;;20622:2;20611:9;20607:18;20599:26;;20672:9;20666:4;20662:20;20658:1;20647:9;20643:17;20636:47;20697:102;20794:4;20785:6;20697:102;;;20689:110;;20810:72;20878:2;20867:9;20863:18;20854:6;20810:72;;;20930:9;20924:4;20920:20;20915:2;20904:9;20900:18;20893:48;20955:76;21026:4;21017:6;20955:76;;;20947:84;;20593:448;;;;;;;21048:709;;21283:3;21272:9;21268:19;21260:27;;21298:71;21366:1;21355:9;21351:17;21342:6;21298:71;;;21380:72;21448:2;21437:9;21433:18;21424:6;21380:72;;;21500:9;21494:4;21490:20;21485:2;21474:9;21470:18;21463:48;21525:76;21596:4;21587:6;21525:76;;;21517:84;;21649:9;21643:4;21639:20;21634:2;21623:9;21619:18;21612:48;21674:73;21742:4;21733:6;21674:73;;;21666:81;;21254:503;;;;;;;;21764:256;;21826:2;21820:9;21810:19;;21864:4;21856:6;21852:17;21963:6;21951:10;21948:22;21927:18;21915:10;21912:34;21909:62;21906:2;;;21984:1;21981;21974:12;21906:2;22004:10;22000:2;21993:22;21804:216;;;;;22027:254;;22166:18;22158:6;22155:30;22152:2;;;22198:1;22195;22188:12;22152:2;22242:4;22238:9;22231:4;22223:6;22219:17;22215:33;22207:41;;22271:4;22265;22261:15;22253:23;;22089:192;;;;22288:258;;22431:18;22423:6;22420:30;22417:2;;;22463:1;22460;22453:12;22417:2;22507:4;22503:9;22496:4;22488:6;22484:17;22480:33;22472:41;;22536:4;22530;22526:15;22518:23;;22354:192;;;;22555:147;;22690:4;22682:6;22678:17;22667:28;;22659:43;;;;22713:125;;22789:4;22786:1;22779:15;22826:4;22823:1;22813:18;22801:30;;22771:67;;;;22847:133;;22969:5;22963:12;22953:22;;22947:33;;;;22987:87;;23063:5;23057:12;23047:22;;23041:33;;;;23081:91;;23161:5;23155:12;23145:22;;23139:33;;;;23179:88;;23256:5;23250:12;23240:22;;23234:33;;;;23275:148;;23412:4;23404:6;23400:17;23389:28;;23382:41;;;;23432:204;;23588:6;23583:3;23576:19;23625:4;23620:3;23616:14;23601:29;;23569:67;;;;;23645:152;;23749:6;23744:3;23737:19;23786:4;23781:3;23777:14;23762:29;;23730:67;;;;;23806:162;;23920:6;23915:3;23908:19;23957:4;23952:3;23948:14;23933:29;;23901:67;;;;;23977:153;;24082:6;24077:3;24070:19;24119:4;24114:3;24110:14;24095:29;;24063:67;;;;;24139:163;;24254:6;24249:3;24242:19;24291:4;24286:3;24282:14;24267:29;;24235:67;;;;;24311:145;;24447:3;24432:18;;24425:31;;;;;24464:105;;24533:31;24558:5;24533:31;;;24522:42;;24516:53;;;;24576:92;;24656:5;24649:13;24642:21;24631:32;;24625:43;;;;24675:128;;24755:42;24748:5;24744:54;24733:65;;24727:76;;;;24810:79;;24879:5;24868:16;;24862:27;;;;24896:105;;24965:31;24990:5;24965:31;;;24954:42;;24948:53;;;;25008:92;;25088:5;25081:13;25074:21;25063:32;;25057:43;;;;25107:79;;25176:5;25165:16;;25159:27;;;;25193:128;;25273:42;25266:5;25262:54;25251:65;;25245:76;;;;25328:79;;25397:5;25386:16;;25380:27;;;;25415:145;25496:6;25491:3;25486;25473:30;25552:1;25543:6;25538:3;25534:16;25527:27;25466:94;;;;25569:268;25634:1;25641:101;25655:6;25652:1;25649:13;25641:101;;;25731:1;25726:3;25722:11;25716:18;25712:1;25707:3;25703:11;25696:39;25677:2;25674:1;25670:10;25665:15;;25641:101;;;25757:6;25754:1;25751:13;25748:2;;;25822:1;25813:6;25808:3;25804:16;25797:27;25748:2;25618:219;;;;;25845:97;;25933:2;25929:7;25924:2;25917:5;25913:14;25909:28;25899:38;;25893:49;;;",
  "source": "/*\n\n  Copyright 2019 Microsponsors, Inc.\n  This work has been modified for use by Microsponsors, Inc.\n  This derivative work is licensed under the Apache License, Version 2.0\n  Original license notice below:\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/Ownable.sol\";\n\n\ncontract Whitelist is\n    Ownable\n{\n\n    // Microsponsors Registry Data:\n\n    // Mapping of address => whitelist status.\n    mapping (address => bool) public isWhitelisted;\n\n    // Mapping of contentId => address\n    mapping (string => address) private contentIdToAddress;\n\n    // Mapping of address => array of UserContentId structs\n    struct UserContentId {\n        string contentId;\n    }\n    mapping (address => UserContentId[]) private userContentIds;\n\n\n    // Exchange contract.\n    // solhint-disable var-name-mixedcase\n    IExchange internal EXCHANGE;\n    bytes internal TX_ORIGIN_SIGNATURE;\n    // solhint-enable var-name-mixedcase\n\n    byte constant internal VALIDATOR_SIGNATURE_BYTE = \"\\x05\";\n\n    constructor (address _exchange)\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n        TX_ORIGIN_SIGNATURE = abi.encodePacked(address(this), VALIDATOR_SIGNATURE_BYTE);\n    }\n\n    /// @dev Admin adds or remove an address & domain mapping from the whitelist.\n    /// @param target Address to add or remove from whitelist.\n    /// @param contentId To map to ethereum address to.\n    /// @param isApproved Whitelist status to assign to address.\n    function adminUpdateWhitelist(\n        address target,\n        string calldata contentId,\n        bool isApproved\n    )\n        external\n        onlyOwner\n    {\n\n\n        // Check that content id is not a duplicate for this owner\n        if (contentIdToAddress[contentId] != target) {\n\n            userContentIds[target].push(UserContentId(contentId));\n            contentIdToAddress[contentId] = target;\n\n        }\n\n        isWhitelisted[target] = isApproved;\n\n    }\n\n\n    /// @dev Admin updates whitelist status for a given address.\n    /// @param target Address to add or remove from Whitelist.\n    /// @param isApproved Whitelist status to assign to address.\n    function adminUpdateStatus(\n        address target,\n        bool isApproved\n    )\n        external\n        onlyOwner\n    {\n\n        require(\n          userContentIds[target].length > 0,\n          'ADDRESS_HAS_NO_ASSOCIATED_CONTENT_IDS'\n        );\n\n        isWhitelisted[target] = isApproved;\n\n    }\n\n\n    function adminGetAddressByContentId(\n        string calldata contentId\n    )\n        external\n        view\n        onlyOwner\n        returns (address target)\n    {\n\n        require(\n            isWhitelisted[ contentIdToAddress[contentId] ],\n            \"ADDRESS_NOT_WHITELISTED\"\n        );\n\n        return contentIdToAddress[contentId];\n\n    }\n\n\n    /// @dev Admin gets contentIds mapped to a valid whitelisted address.\n    /// @param target Ethereum address to validate & return contentIds for.\n    function adminGetContentIdsByAddress(\n        address target\n    )\n        external\n        view\n        onlyOwner\n        returns (UserContentId[] memory)\n    {\n\n        require(\n            isWhitelisted[target],\n            \"ADDRESS_NOT_WHITELISTED\"\n        );\n\n        return userContentIds[target];\n\n    }\n\n\n    /// @dev Valid whitelisted address can query its own contentIds.\n    function getContentIdsByAddress()\n        external\n        view\n        returns (UserContentId[] memory)\n    {\n\n        require(\n            isWhitelisted[msg.sender],\n            'INVALID_SENDER'\n        );\n\n        return userContentIds[msg.sender];\n\n    }\n\n\n    /// @dev Verifies signer is same as signer of current Ethereum transaction.\n    ///      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n    ///      Extra safety checks can be added for a production contract.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    // solhint-disable no-unused-vars\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        // solhint-disable-next-line avoid-tx-origin\n        return signerAddress == tx.origin;\n    }\n    // solhint-enable no-unused-vars\n\n    /// @dev Fills an order using `msg.sender` as the taker.\n    ///      The transaction will revert if both the maker and taker are not whitelisted.\n    ///      Orders should specify this contract as the `senderAddress` in order to gaurantee\n    ///      that both maker and taker have been whitelisted.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n    /// @param orderSignature Proof that order has been created by maker.\n    function fillOrderIfWhitelisted(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        uint256 salt,\n        bytes memory orderSignature\n    )\n        public\n    {\n        address takerAddress = msg.sender;\n\n        // This contract must be the entry point for the transaction.\n        require(\n            // solhint-disable-next-line avoid-tx-origin\n            takerAddress == tx.origin,\n            \"INVALID_SENDER\"\n        );\n\n        // Check if maker is on the whitelist.\n        require(\n            isWhitelisted[order.makerAddress],\n            \"MAKER_NOT_WHITELISTED\"\n        );\n\n        // Check if taker is on the whitelist.\n        require(\n            isWhitelisted[takerAddress],\n            \"TAKER_NOT_WHITELISTED\"\n        );\n\n        // Encode arguments into byte array.\n        bytes memory data = abi.encodeWithSelector(\n            EXCHANGE.fillOrder.selector,\n            order,\n            takerAssetFillAmount,\n            orderSignature\n        );\n\n        // Call `fillOrder` via `executeTransaction`.\n        EXCHANGE.executeTransaction(\n            salt,\n            takerAddress,\n            data,\n            TX_ORIGIN_SIGNATURE\n        );\n    }\n}\n",
  "sourcePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
  "ast": {
    "absolutePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
    "exportedSymbols": {
      "Whitelist": [
        590
      ]
    },
    "id": 591,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 329,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "785:23:8"
      },
      {
        "id": 330,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "809:33:8"
      },
      {
        "absolutePath": "/Users/lauren/github/registry-contract/contracts/IExchange.sol",
        "file": "./IExchange.sol",
        "id": 331,
        "nodeType": "ImportDirective",
        "scope": 591,
        "sourceUnit": 37,
        "src": "844:25:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "file": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "id": 332,
        "nodeType": "ImportDirective",
        "scope": 591,
        "sourceUnit": 848,
        "src": "870:64:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "file": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "id": 333,
        "nodeType": "ImportDirective",
        "scope": 591,
        "sourceUnit": 896,
        "src": "935:55:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 334,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 895,
              "src": "1019:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$895",
                "typeString": "contract Ownable"
              }
            },
            "id": 335,
            "nodeType": "InheritanceSpecifier",
            "src": "1019:7:8"
          }
        ],
        "contractDependencies": [
          895,
          1072
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 590,
        "linearizedBaseContracts": [
          590,
          895,
          1072
        ],
        "name": "Whitelist",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 339,
            "name": "isWhitelisted",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1118:46:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 338,
              "keyType": {
                "id": 336,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1127:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1118:25:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 337,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1138:4:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 343,
            "name": "contentIdToAddress",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1210:54:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
              "typeString": "mapping(string => address)"
            },
            "typeName": {
              "id": 342,
              "keyType": {
                "id": 340,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1219:6:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "1210:27:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                "typeString": "mapping(string => address)"
              },
              "valueType": {
                "id": 341,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1229:7:8",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "canonicalName": "Whitelist.UserContentId",
            "id": 346,
            "members": [
              {
                "constant": false,
                "id": 345,
                "name": "contentId",
                "nodeType": "VariableDeclaration",
                "scope": 346,
                "src": "1362:16:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 344,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1362:6:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "UserContentId",
            "nodeType": "StructDefinition",
            "scope": 590,
            "src": "1331:54:8",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 351,
            "name": "userContentIds",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1390:59:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
              "typeString": "mapping(address => struct Whitelist.UserContentId[])"
            },
            "typeName": {
              "id": 350,
              "keyType": {
                "id": 347,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1399:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1390:36:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                "typeString": "mapping(address => struct Whitelist.UserContentId[])"
              },
              "valueType": {
                "baseType": {
                  "contractScope": null,
                  "id": 348,
                  "name": "UserContentId",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 346,
                  "src": "1410:13:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserContentId_$346_storage_ptr",
                    "typeString": "struct Whitelist.UserContentId"
                  }
                },
                "id": 349,
                "length": null,
                "nodeType": "ArrayTypeName",
                "src": "1410:15:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_ptr",
                  "typeString": "struct Whitelist.UserContentId[]"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 353,
            "name": "EXCHANGE",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1525:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IExchange_$36",
              "typeString": "contract IExchange"
            },
            "typeName": {
              "contractScope": null,
              "id": 352,
              "name": "IExchange",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 36,
              "src": "1525:9:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IExchange_$36",
                "typeString": "contract IExchange"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 355,
            "name": "TX_ORIGIN_SIGNATURE",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1558:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 354,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "1558:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 358,
            "name": "VALIDATOR_SIGNATURE_BYTE",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1640:56:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes1",
              "typeString": "bytes1"
            },
            "typeName": {
              "id": 356,
              "name": "byte",
              "nodeType": "ElementaryTypeName",
              "src": "1640:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes1",
                "typeString": "bytes1"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "05",
              "id": 357,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1690:6:8",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_dbb8d0f4c497851a5043c6363657698cb1387682cac2f786c731f8936109d795",
                "typeString": "literal_string \"\u0005\""
              },
              "value": "\u0005"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 379,
              "nodeType": "Block",
              "src": "1754:137:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 367,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 363,
                      "name": "EXCHANGE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 353,
                      "src": "1764:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 365,
                          "name": "_exchange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 360,
                          "src": "1785:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 364,
                        "name": "IExchange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36,
                        "src": "1775:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IExchange_$36_$",
                          "typeString": "type(contract IExchange)"
                        }
                      },
                      "id": 366,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1775:20:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "src": "1764:31:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IExchange_$36",
                      "typeString": "contract IExchange"
                    }
                  },
                  "id": 368,
                  "nodeType": "ExpressionStatement",
                  "src": "1764:31:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 377,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 369,
                      "name": "TX_ORIGIN_SIGNATURE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 355,
                      "src": "1805:19:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage",
                        "typeString": "bytes storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 373,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1129,
                              "src": "1852:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Whitelist_$590",
                                "typeString": "contract Whitelist"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Whitelist_$590",
                                "typeString": "contract Whitelist"
                              }
                            ],
                            "id": 372,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1844:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 374,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1844:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 375,
                          "name": "VALIDATOR_SIGNATURE_BYTE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 358,
                          "src": "1859:24:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 370,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1074,
                          "src": "1827:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 371,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1827:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 376,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1827:57:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "1805:79:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage",
                      "typeString": "bytes storage ref"
                    }
                  },
                  "id": 378,
                  "nodeType": "ExpressionStatement",
                  "src": "1805:79:8"
                }
              ]
            },
            "documentation": null,
            "id": 380,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 361,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 360,
                  "name": "_exchange",
                  "nodeType": "VariableDeclaration",
                  "scope": 380,
                  "src": "1716:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 359,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1716:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1715:19:8"
            },
            "returnParameters": {
              "id": 362,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1754:0:8"
            },
            "scope": 590,
            "src": "1703:188:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 419,
              "nodeType": "Block",
              "src": "2322:308:8",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 391,
                        "name": "contentIdToAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 343,
                        "src": "2405:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                          "typeString": "mapping(string memory => address)"
                        }
                      },
                      "id": 393,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 392,
                        "name": "contentId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 384,
                        "src": "2424:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2405:29:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 394,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 382,
                      "src": "2438:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2405:39:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 412,
                  "nodeType": "IfStatement",
                  "src": "2401:177:8",
                  "trueBody": {
                    "id": 411,
                    "nodeType": "Block",
                    "src": "2446:132:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 401,
                                  "name": "contentId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 384,
                                  "src": "2503:9:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_calldata_ptr",
                                    "typeString": "string calldata"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_calldata_ptr",
                                    "typeString": "string calldata"
                                  }
                                ],
                                "id": 400,
                                "name": "UserContentId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 346,
                                "src": "2489:13:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_UserContentId_$346_storage_ptr_$",
                                  "typeString": "type(struct Whitelist.UserContentId storage pointer)"
                                }
                              },
                              "id": 402,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2489:24:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserContentId_$346_memory",
                                "typeString": "struct Whitelist.UserContentId memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_UserContentId_$346_memory",
                                "typeString": "struct Whitelist.UserContentId memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 396,
                                "name": "userContentIds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 351,
                                "src": "2461:14:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                                  "typeString": "mapping(address => struct Whitelist.UserContentId storage ref[] storage ref)"
                                }
                              },
                              "id": 398,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 397,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 382,
                                "src": "2476:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2461:22:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage",
                                "typeString": "struct Whitelist.UserContentId storage ref[] storage ref"
                              }
                            },
                            "id": 399,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "2461:27:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_UserContentId_$346_storage_$returns$_t_uint256_$",
                              "typeString": "function (struct Whitelist.UserContentId storage ref) returns (uint256)"
                            }
                          },
                          "id": 403,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2461:53:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 404,
                        "nodeType": "ExpressionStatement",
                        "src": "2461:53:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 409,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 405,
                              "name": "contentIdToAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 343,
                              "src": "2528:18:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                                "typeString": "mapping(string memory => address)"
                              }
                            },
                            "id": 407,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 406,
                              "name": "contentId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 384,
                              "src": "2547:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2528:29:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 408,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 382,
                            "src": "2560:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2528:38:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 410,
                        "nodeType": "ExpressionStatement",
                        "src": "2528:38:8"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 417,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 413,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 339,
                        "src": "2588:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 415,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 414,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 382,
                        "src": "2602:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2588:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 416,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 386,
                      "src": "2612:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2588:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 418,
                  "nodeType": "ExpressionStatement",
                  "src": "2588:34:8"
                }
              ]
            },
            "documentation": "@dev Admin adds or remove an address & domain mapping from the whitelist.\n @param target Address to add or remove from whitelist.\n @param contentId To map to ethereum address to.\n @param isApproved Whitelist status to assign to address.",
            "id": 420,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 389,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 388,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 875,
                  "src": "2308:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2308:9:8"
              }
            ],
            "name": "adminUpdateWhitelist",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 387,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 382,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "2202:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 381,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2202:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 384,
                  "name": "contentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "2226:25:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 383,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2226:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 386,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "2261:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 385,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2261:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2192:90:8"
            },
            "returnParameters": {
              "id": 390,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2322:0:8"
            },
            "scope": 590,
            "src": "2163:467:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 445,
              "nodeType": "Block",
              "src": "2951:177:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 430,
                              "name": "userContentIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 351,
                              "src": "2981:14:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                                "typeString": "mapping(address => struct Whitelist.UserContentId storage ref[] storage ref)"
                              }
                            },
                            "id": 432,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 431,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 422,
                              "src": "2996:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2981:22:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage",
                              "typeString": "struct Whitelist.UserContentId storage ref[] storage ref"
                            }
                          },
                          "id": 433,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2981:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 434,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3013:1:8",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2981:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4841535f4e4f5f4153534f4349415445445f434f4e54454e545f494453",
                        "id": 436,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3026:39:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_69ceda11df6791be8c7b4c7ed6d7940867cbee6c59fa513b014822d87d35a1fd",
                          "typeString": "literal_string \"ADDRESS_HAS_NO_ASSOCIATED_CONTENT_IDS\""
                        },
                        "value": "ADDRESS_HAS_NO_ASSOCIATED_CONTENT_IDS"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_69ceda11df6791be8c7b4c7ed6d7940867cbee6c59fa513b014822d87d35a1fd",
                          "typeString": "literal_string \"ADDRESS_HAS_NO_ASSOCIATED_CONTENT_IDS\""
                        }
                      ],
                      "id": 429,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "2962:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 437,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2962:113:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 438,
                  "nodeType": "ExpressionStatement",
                  "src": "2962:113:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 439,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 339,
                        "src": "3086:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 441,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 440,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 422,
                        "src": "3100:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3086:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 442,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 424,
                      "src": "3110:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3086:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 444,
                  "nodeType": "ExpressionStatement",
                  "src": "3086:34:8"
                }
              ]
            },
            "documentation": "@dev Admin updates whitelist status for a given address.\n @param target Address to add or remove from Whitelist.\n @param isApproved Whitelist status to assign to address.",
            "id": 446,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 427,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 426,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 875,
                  "src": "2937:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2937:9:8"
              }
            ],
            "name": "adminUpdateStatus",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 425,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 422,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 446,
                  "src": "2866:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 421,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2866:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 424,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 446,
                  "src": "2890:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 423,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2890:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2856:55:8"
            },
            "returnParameters": {
              "id": 428,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2951:0:8"
            },
            "scope": 590,
            "src": "2830:298:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 468,
              "nodeType": "Block",
              "src": "3297:182:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 456,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "3329:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 460,
                        "indexExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 457,
                            "name": "contentIdToAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 343,
                            "src": "3344:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                              "typeString": "mapping(string memory => address)"
                            }
                          },
                          "id": 459,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 458,
                            "name": "contentId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 448,
                            "src": "3363:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3344:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3329:46:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 461,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3389:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 455,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "3308:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3308:116:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 463,
                  "nodeType": "ExpressionStatement",
                  "src": "3308:116:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 464,
                      "name": "contentIdToAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "3442:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                        "typeString": "mapping(string memory => address)"
                      }
                    },
                    "id": 466,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 465,
                      "name": "contentId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 448,
                      "src": "3461:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_calldata_ptr",
                        "typeString": "string calldata"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3442:29:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 454,
                  "id": 467,
                  "nodeType": "Return",
                  "src": "3435:36:8"
                }
              ]
            },
            "documentation": null,
            "id": 469,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 451,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 450,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 875,
                  "src": "3250:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3250:9:8"
              }
            ],
            "name": "adminGetAddressByContentId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 449,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 448,
                  "name": "contentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 469,
                  "src": "3180:25:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 447,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3180:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3170:41:8"
            },
            "returnParameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 453,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 469,
                  "src": "3277:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 452,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3277:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3276:16:8"
            },
            "scope": 590,
            "src": "3135:344:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 490,
              "nodeType": "Block",
              "src": "3796:150:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 480,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "3828:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 482,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 481,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 471,
                          "src": "3842:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3828:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 483,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3863:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 479,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "3807:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 484,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3807:91:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 485,
                  "nodeType": "ExpressionStatement",
                  "src": "3807:91:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 486,
                      "name": "userContentIds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 351,
                      "src": "3916:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct Whitelist.UserContentId storage ref[] storage ref)"
                      }
                    },
                    "id": 488,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 487,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 471,
                      "src": "3931:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3916:22:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage",
                      "typeString": "struct Whitelist.UserContentId storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 478,
                  "id": 489,
                  "nodeType": "Return",
                  "src": "3909:29:8"
                }
              ]
            },
            "documentation": "@dev Admin gets contentIds mapped to a valid whitelisted address.\n @param target Ethereum address to validate & return contentIds for.",
            "id": 491,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 474,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 473,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 875,
                  "src": "3741:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3741:9:8"
              }
            ],
            "name": "adminGetContentIdsByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 471,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 491,
                  "src": "3682:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3682:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3672:30:8"
            },
            "returnParameters": {
              "id": 478,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 477,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 491,
                  "src": "3768:22:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_memory_$dyn_memory_ptr",
                    "typeString": "struct Whitelist.UserContentId[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 475,
                      "name": "UserContentId",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 346,
                      "src": "3768:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserContentId_$346_storage_ptr",
                        "typeString": "struct Whitelist.UserContentId"
                      }
                    },
                    "id": 476,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "3768:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_ptr",
                      "typeString": "struct Whitelist.UserContentId[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3767:24:8"
            },
            "scope": 590,
            "src": "3636:310:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 510,
              "nodeType": "Block",
              "src": "4131:149:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 498,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "4163:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 501,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 499,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1087,
                            "src": "4177:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4177:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4163:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4202:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 497,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "4142:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 503,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4142:86:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 504,
                  "nodeType": "ExpressionStatement",
                  "src": "4142:86:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 505,
                      "name": "userContentIds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 351,
                      "src": "4246:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct Whitelist.UserContentId storage ref[] storage ref)"
                      }
                    },
                    "id": 508,
                    "indexExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 506,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1087,
                        "src": "4261:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 507,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "4261:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4246:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage",
                      "typeString": "struct Whitelist.UserContentId storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 496,
                  "id": 509,
                  "nodeType": "Return",
                  "src": "4239:33:8"
                }
              ]
            },
            "documentation": "@dev Valid whitelisted address can query its own contentIds.",
            "id": 511,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getContentIdsByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4053:2:8"
            },
            "returnParameters": {
              "id": 496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 495,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 511,
                  "src": "4103:22:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_memory_$dyn_memory_ptr",
                    "typeString": "struct Whitelist.UserContentId[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 493,
                      "name": "UserContentId",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 346,
                      "src": "4103:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserContentId_$346_storage_ptr",
                        "typeString": "struct Whitelist.UserContentId"
                      }
                    },
                    "id": 494,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "4103:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_ptr",
                      "typeString": "struct Whitelist.UserContentId[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4102:24:8"
            },
            "scope": 590,
            "src": "4022:258:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 527,
              "nodeType": "Block",
              "src": "4943:103:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 525,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 522,
                      "name": "signerAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 515,
                      "src": "5013:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 523,
                        "name": "tx",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1099,
                        "src": "5030:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_transaction",
                          "typeString": "tx"
                        }
                      },
                      "id": 524,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "origin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5030:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "5013:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 521,
                  "id": 526,
                  "nodeType": "Return",
                  "src": "5006:33:8"
                }
              ]
            },
            "documentation": "@dev Verifies signer is same as signer of current Ethereum transaction.\n      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n      Extra safety checks can be added for a production contract.\n @param signerAddress Address that should have signed the given hash.\n @param signature Proof of signing.\n @return Validity of order signature.",
            "id": 528,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSignature",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 518,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 513,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 528,
                  "src": "4794:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 512,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4794:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 515,
                  "name": "signerAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 528,
                  "src": "4816:21:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 514,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4816:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 517,
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 528,
                  "src": "4847:24:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 516,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4847:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4784:93:8"
            },
            "returnParameters": {
              "id": 521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 520,
                  "name": "isValid",
                  "nodeType": "VariableDeclaration",
                  "scope": 528,
                  "src": "4925:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 519,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4925:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4924:14:8"
            },
            "scope": 590,
            "src": "4759:287:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 588,
              "nodeType": "Block",
              "src": "5886:1013:8",
              "statements": [
                {
                  "assignments": [
                    540
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 540,
                      "name": "takerAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 588,
                      "src": "5896:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 539,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5896:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 543,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 541,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1087,
                      "src": "5919:3:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 542,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "5919:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5896:33:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 545,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 540,
                          "src": "6088:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 546,
                            "name": "tx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1099,
                            "src": "6104:2:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_transaction",
                              "typeString": "tx"
                            }
                          },
                          "id": 547,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "origin",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "6104:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "6088:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 549,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6127:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 544,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "6010:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 550,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6010:143:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 551,
                  "nodeType": "ExpressionStatement",
                  "src": "6010:143:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 553,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "6232:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 556,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 554,
                            "name": "order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 530,
                            "src": "6246:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Order_$792_memory_ptr",
                              "typeString": "struct LibOrder.Order memory"
                            }
                          },
                          "id": 555,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "makerAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 769,
                          "src": "6246:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6232:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d414b45525f4e4f545f57484954454c4953544544",
                        "id": 557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6279:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        },
                        "value": "MAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 552,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "6211:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6211:101:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 559,
                  "nodeType": "ExpressionStatement",
                  "src": "6211:101:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 561,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "6391:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 563,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 562,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 540,
                          "src": "6405:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6391:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54414b45525f4e4f545f57484954454c4953544544",
                        "id": 564,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6432:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        },
                        "value": "TAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 560,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "6370:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6370:95:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 566,
                  "nodeType": "ExpressionStatement",
                  "src": "6370:95:8"
                },
                {
                  "assignments": [
                    568
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 568,
                      "name": "data",
                      "nodeType": "VariableDeclaration",
                      "scope": 588,
                      "src": "6521:17:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 567,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6521:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 578,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 571,
                            "name": "EXCHANGE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 353,
                            "src": "6577:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IExchange_$36",
                              "typeString": "contract IExchange"
                            }
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "fillOrder",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 57,
                          "src": "6577:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_struct$_Order_$792_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_struct$_FillResults_$673_memory_ptr_$",
                            "typeString": "function (struct LibOrder.Order memory,uint256,bytes memory) external returns (struct LibFillResults.FillResults memory)"
                          }
                        },
                        "id": 573,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "6577:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 574,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 530,
                        "src": "6618:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Order_$792_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 575,
                        "name": "takerAssetFillAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 532,
                        "src": "6637:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 576,
                        "name": "orderSignature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "6671:14:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_struct$_Order_$792_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 569,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1074,
                        "src": "6541:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 570,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSelector",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "6541:22:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes4) pure returns (bytes memory)"
                      }
                    },
                    "id": 577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6541:154:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6521:174:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 582,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 534,
                        "src": "6801:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 583,
                        "name": "takerAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 540,
                        "src": "6819:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 584,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 568,
                        "src": "6845:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 585,
                        "name": "TX_ORIGIN_SIGNATURE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 355,
                        "src": "6863:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 579,
                        "name": "EXCHANGE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 353,
                        "src": "6760:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IExchange_$36",
                          "typeString": "contract IExchange"
                        }
                      },
                      "id": 581,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "executeTransaction",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 132,
                      "src": "6760:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,address,bytes memory,bytes memory) external"
                      }
                    },
                    "id": 586,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6760:132:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 587,
                  "nodeType": "ExpressionStatement",
                  "src": "6760:132:8"
                }
              ]
            },
            "documentation": "@dev Fills an order using `msg.sender` as the taker.\n      The transaction will revert if both the maker and taker are not whitelisted.\n      Orders should specify this contract as the `senderAddress` in order to gaurantee\n      that both maker and taker have been whitelisted.\n @param order Order struct containing order specifications.\n @param takerAssetFillAmount Desired amount of takerAsset to sell.\n @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n @param orderSignature Proof that order has been created by maker.",
            "id": 589,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fillOrderIfWhitelisted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 537,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 530,
                  "name": "order",
                  "nodeType": "VariableDeclaration",
                  "scope": 589,
                  "src": "5736:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$792_memory_ptr",
                    "typeString": "struct LibOrder.Order"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 529,
                    "name": "LibOrder.Order",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 792,
                    "src": "5736:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$792_storage_ptr",
                      "typeString": "struct LibOrder.Order"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 532,
                  "name": "takerAssetFillAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 589,
                  "src": "5773:28:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 531,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5773:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 534,
                  "name": "salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 589,
                  "src": "5811:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 533,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5811:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 536,
                  "name": "orderSignature",
                  "nodeType": "VariableDeclaration",
                  "scope": 589,
                  "src": "5833:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 535,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5833:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5726:140:8"
            },
            "returnParameters": {
              "id": 538,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5886:0:8"
            },
            "scope": 590,
            "src": "5695:1204:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 591,
        "src": "993:5908:8"
      }
    ],
    "src": "785:6117:8"
  },
  "legacyAST": {
    "absolutePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
    "exportedSymbols": {
      "Whitelist": [
        590
      ]
    },
    "id": 591,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 329,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "785:23:8"
      },
      {
        "id": 330,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "809:33:8"
      },
      {
        "absolutePath": "/Users/lauren/github/registry-contract/contracts/IExchange.sol",
        "file": "./IExchange.sol",
        "id": 331,
        "nodeType": "ImportDirective",
        "scope": 591,
        "sourceUnit": 37,
        "src": "844:25:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "file": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "id": 332,
        "nodeType": "ImportDirective",
        "scope": 591,
        "sourceUnit": 848,
        "src": "870:64:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "file": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "id": 333,
        "nodeType": "ImportDirective",
        "scope": 591,
        "sourceUnit": 896,
        "src": "935:55:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 334,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 895,
              "src": "1019:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$895",
                "typeString": "contract Ownable"
              }
            },
            "id": 335,
            "nodeType": "InheritanceSpecifier",
            "src": "1019:7:8"
          }
        ],
        "contractDependencies": [
          895,
          1072
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 590,
        "linearizedBaseContracts": [
          590,
          895,
          1072
        ],
        "name": "Whitelist",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 339,
            "name": "isWhitelisted",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1118:46:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 338,
              "keyType": {
                "id": 336,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1127:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1118:25:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 337,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1138:4:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 343,
            "name": "contentIdToAddress",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1210:54:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
              "typeString": "mapping(string => address)"
            },
            "typeName": {
              "id": 342,
              "keyType": {
                "id": 340,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1219:6:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "1210:27:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                "typeString": "mapping(string => address)"
              },
              "valueType": {
                "id": 341,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1229:7:8",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "canonicalName": "Whitelist.UserContentId",
            "id": 346,
            "members": [
              {
                "constant": false,
                "id": 345,
                "name": "contentId",
                "nodeType": "VariableDeclaration",
                "scope": 346,
                "src": "1362:16:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 344,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1362:6:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "UserContentId",
            "nodeType": "StructDefinition",
            "scope": 590,
            "src": "1331:54:8",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 351,
            "name": "userContentIds",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1390:59:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
              "typeString": "mapping(address => struct Whitelist.UserContentId[])"
            },
            "typeName": {
              "id": 350,
              "keyType": {
                "id": 347,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1399:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1390:36:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                "typeString": "mapping(address => struct Whitelist.UserContentId[])"
              },
              "valueType": {
                "baseType": {
                  "contractScope": null,
                  "id": 348,
                  "name": "UserContentId",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 346,
                  "src": "1410:13:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserContentId_$346_storage_ptr",
                    "typeString": "struct Whitelist.UserContentId"
                  }
                },
                "id": 349,
                "length": null,
                "nodeType": "ArrayTypeName",
                "src": "1410:15:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_ptr",
                  "typeString": "struct Whitelist.UserContentId[]"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 353,
            "name": "EXCHANGE",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1525:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IExchange_$36",
              "typeString": "contract IExchange"
            },
            "typeName": {
              "contractScope": null,
              "id": 352,
              "name": "IExchange",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 36,
              "src": "1525:9:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IExchange_$36",
                "typeString": "contract IExchange"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 355,
            "name": "TX_ORIGIN_SIGNATURE",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1558:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 354,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "1558:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 358,
            "name": "VALIDATOR_SIGNATURE_BYTE",
            "nodeType": "VariableDeclaration",
            "scope": 590,
            "src": "1640:56:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes1",
              "typeString": "bytes1"
            },
            "typeName": {
              "id": 356,
              "name": "byte",
              "nodeType": "ElementaryTypeName",
              "src": "1640:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes1",
                "typeString": "bytes1"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "05",
              "id": 357,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1690:6:8",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_dbb8d0f4c497851a5043c6363657698cb1387682cac2f786c731f8936109d795",
                "typeString": "literal_string \"\u0005\""
              },
              "value": "\u0005"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 379,
              "nodeType": "Block",
              "src": "1754:137:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 367,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 363,
                      "name": "EXCHANGE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 353,
                      "src": "1764:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 365,
                          "name": "_exchange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 360,
                          "src": "1785:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 364,
                        "name": "IExchange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36,
                        "src": "1775:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IExchange_$36_$",
                          "typeString": "type(contract IExchange)"
                        }
                      },
                      "id": 366,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1775:20:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "src": "1764:31:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IExchange_$36",
                      "typeString": "contract IExchange"
                    }
                  },
                  "id": 368,
                  "nodeType": "ExpressionStatement",
                  "src": "1764:31:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 377,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 369,
                      "name": "TX_ORIGIN_SIGNATURE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 355,
                      "src": "1805:19:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage",
                        "typeString": "bytes storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 373,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1129,
                              "src": "1852:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Whitelist_$590",
                                "typeString": "contract Whitelist"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Whitelist_$590",
                                "typeString": "contract Whitelist"
                              }
                            ],
                            "id": 372,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1844:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 374,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1844:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 375,
                          "name": "VALIDATOR_SIGNATURE_BYTE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 358,
                          "src": "1859:24:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 370,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1074,
                          "src": "1827:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 371,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1827:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 376,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1827:57:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "1805:79:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage",
                      "typeString": "bytes storage ref"
                    }
                  },
                  "id": 378,
                  "nodeType": "ExpressionStatement",
                  "src": "1805:79:8"
                }
              ]
            },
            "documentation": null,
            "id": 380,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 361,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 360,
                  "name": "_exchange",
                  "nodeType": "VariableDeclaration",
                  "scope": 380,
                  "src": "1716:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 359,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1716:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1715:19:8"
            },
            "returnParameters": {
              "id": 362,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1754:0:8"
            },
            "scope": 590,
            "src": "1703:188:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 419,
              "nodeType": "Block",
              "src": "2322:308:8",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 391,
                        "name": "contentIdToAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 343,
                        "src": "2405:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                          "typeString": "mapping(string memory => address)"
                        }
                      },
                      "id": 393,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 392,
                        "name": "contentId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 384,
                        "src": "2424:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2405:29:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 394,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 382,
                      "src": "2438:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2405:39:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 412,
                  "nodeType": "IfStatement",
                  "src": "2401:177:8",
                  "trueBody": {
                    "id": 411,
                    "nodeType": "Block",
                    "src": "2446:132:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 401,
                                  "name": "contentId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 384,
                                  "src": "2503:9:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_calldata_ptr",
                                    "typeString": "string calldata"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_calldata_ptr",
                                    "typeString": "string calldata"
                                  }
                                ],
                                "id": 400,
                                "name": "UserContentId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 346,
                                "src": "2489:13:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_UserContentId_$346_storage_ptr_$",
                                  "typeString": "type(struct Whitelist.UserContentId storage pointer)"
                                }
                              },
                              "id": 402,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2489:24:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserContentId_$346_memory",
                                "typeString": "struct Whitelist.UserContentId memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_UserContentId_$346_memory",
                                "typeString": "struct Whitelist.UserContentId memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 396,
                                "name": "userContentIds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 351,
                                "src": "2461:14:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                                  "typeString": "mapping(address => struct Whitelist.UserContentId storage ref[] storage ref)"
                                }
                              },
                              "id": 398,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 397,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 382,
                                "src": "2476:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2461:22:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage",
                                "typeString": "struct Whitelist.UserContentId storage ref[] storage ref"
                              }
                            },
                            "id": 399,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "2461:27:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_UserContentId_$346_storage_$returns$_t_uint256_$",
                              "typeString": "function (struct Whitelist.UserContentId storage ref) returns (uint256)"
                            }
                          },
                          "id": 403,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2461:53:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 404,
                        "nodeType": "ExpressionStatement",
                        "src": "2461:53:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 409,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 405,
                              "name": "contentIdToAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 343,
                              "src": "2528:18:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                                "typeString": "mapping(string memory => address)"
                              }
                            },
                            "id": 407,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 406,
                              "name": "contentId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 384,
                              "src": "2547:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2528:29:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 408,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 382,
                            "src": "2560:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2528:38:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 410,
                        "nodeType": "ExpressionStatement",
                        "src": "2528:38:8"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 417,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 413,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 339,
                        "src": "2588:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 415,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 414,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 382,
                        "src": "2602:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2588:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 416,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 386,
                      "src": "2612:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2588:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 418,
                  "nodeType": "ExpressionStatement",
                  "src": "2588:34:8"
                }
              ]
            },
            "documentation": "@dev Admin adds or remove an address & domain mapping from the whitelist.\n @param target Address to add or remove from whitelist.\n @param contentId To map to ethereum address to.\n @param isApproved Whitelist status to assign to address.",
            "id": 420,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 389,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 388,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 875,
                  "src": "2308:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2308:9:8"
              }
            ],
            "name": "adminUpdateWhitelist",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 387,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 382,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "2202:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 381,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2202:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 384,
                  "name": "contentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "2226:25:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 383,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2226:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 386,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "2261:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 385,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2261:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2192:90:8"
            },
            "returnParameters": {
              "id": 390,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2322:0:8"
            },
            "scope": 590,
            "src": "2163:467:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 445,
              "nodeType": "Block",
              "src": "2951:177:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 430,
                              "name": "userContentIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 351,
                              "src": "2981:14:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                                "typeString": "mapping(address => struct Whitelist.UserContentId storage ref[] storage ref)"
                              }
                            },
                            "id": 432,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 431,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 422,
                              "src": "2996:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2981:22:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage",
                              "typeString": "struct Whitelist.UserContentId storage ref[] storage ref"
                            }
                          },
                          "id": 433,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2981:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 434,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3013:1:8",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2981:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4841535f4e4f5f4153534f4349415445445f434f4e54454e545f494453",
                        "id": 436,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3026:39:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_69ceda11df6791be8c7b4c7ed6d7940867cbee6c59fa513b014822d87d35a1fd",
                          "typeString": "literal_string \"ADDRESS_HAS_NO_ASSOCIATED_CONTENT_IDS\""
                        },
                        "value": "ADDRESS_HAS_NO_ASSOCIATED_CONTENT_IDS"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_69ceda11df6791be8c7b4c7ed6d7940867cbee6c59fa513b014822d87d35a1fd",
                          "typeString": "literal_string \"ADDRESS_HAS_NO_ASSOCIATED_CONTENT_IDS\""
                        }
                      ],
                      "id": 429,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "2962:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 437,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2962:113:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 438,
                  "nodeType": "ExpressionStatement",
                  "src": "2962:113:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 439,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 339,
                        "src": "3086:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 441,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 440,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 422,
                        "src": "3100:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3086:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 442,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 424,
                      "src": "3110:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3086:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 444,
                  "nodeType": "ExpressionStatement",
                  "src": "3086:34:8"
                }
              ]
            },
            "documentation": "@dev Admin updates whitelist status for a given address.\n @param target Address to add or remove from Whitelist.\n @param isApproved Whitelist status to assign to address.",
            "id": 446,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 427,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 426,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 875,
                  "src": "2937:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2937:9:8"
              }
            ],
            "name": "adminUpdateStatus",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 425,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 422,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 446,
                  "src": "2866:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 421,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2866:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 424,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 446,
                  "src": "2890:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 423,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2890:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2856:55:8"
            },
            "returnParameters": {
              "id": 428,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2951:0:8"
            },
            "scope": 590,
            "src": "2830:298:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 468,
              "nodeType": "Block",
              "src": "3297:182:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 456,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "3329:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 460,
                        "indexExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 457,
                            "name": "contentIdToAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 343,
                            "src": "3344:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                              "typeString": "mapping(string memory => address)"
                            }
                          },
                          "id": 459,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 458,
                            "name": "contentId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 448,
                            "src": "3363:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3344:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3329:46:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 461,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3389:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 455,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "3308:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3308:116:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 463,
                  "nodeType": "ExpressionStatement",
                  "src": "3308:116:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 464,
                      "name": "contentIdToAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "3442:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                        "typeString": "mapping(string memory => address)"
                      }
                    },
                    "id": 466,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 465,
                      "name": "contentId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 448,
                      "src": "3461:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_calldata_ptr",
                        "typeString": "string calldata"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3442:29:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 454,
                  "id": 467,
                  "nodeType": "Return",
                  "src": "3435:36:8"
                }
              ]
            },
            "documentation": null,
            "id": 469,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 451,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 450,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 875,
                  "src": "3250:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3250:9:8"
              }
            ],
            "name": "adminGetAddressByContentId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 449,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 448,
                  "name": "contentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 469,
                  "src": "3180:25:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 447,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3180:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3170:41:8"
            },
            "returnParameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 453,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 469,
                  "src": "3277:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 452,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3277:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3276:16:8"
            },
            "scope": 590,
            "src": "3135:344:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 490,
              "nodeType": "Block",
              "src": "3796:150:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 480,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "3828:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 482,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 481,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 471,
                          "src": "3842:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3828:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 483,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3863:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 479,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "3807:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 484,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3807:91:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 485,
                  "nodeType": "ExpressionStatement",
                  "src": "3807:91:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 486,
                      "name": "userContentIds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 351,
                      "src": "3916:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct Whitelist.UserContentId storage ref[] storage ref)"
                      }
                    },
                    "id": 488,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 487,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 471,
                      "src": "3931:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3916:22:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage",
                      "typeString": "struct Whitelist.UserContentId storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 478,
                  "id": 489,
                  "nodeType": "Return",
                  "src": "3909:29:8"
                }
              ]
            },
            "documentation": "@dev Admin gets contentIds mapped to a valid whitelisted address.\n @param target Ethereum address to validate & return contentIds for.",
            "id": 491,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 474,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 473,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 875,
                  "src": "3741:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3741:9:8"
              }
            ],
            "name": "adminGetContentIdsByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 471,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 491,
                  "src": "3682:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3682:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3672:30:8"
            },
            "returnParameters": {
              "id": 478,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 477,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 491,
                  "src": "3768:22:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_memory_$dyn_memory_ptr",
                    "typeString": "struct Whitelist.UserContentId[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 475,
                      "name": "UserContentId",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 346,
                      "src": "3768:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserContentId_$346_storage_ptr",
                        "typeString": "struct Whitelist.UserContentId"
                      }
                    },
                    "id": 476,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "3768:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_ptr",
                      "typeString": "struct Whitelist.UserContentId[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3767:24:8"
            },
            "scope": 590,
            "src": "3636:310:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 510,
              "nodeType": "Block",
              "src": "4131:149:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 498,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "4163:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 501,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 499,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1087,
                            "src": "4177:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4177:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4163:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4202:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 497,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "4142:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 503,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4142:86:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 504,
                  "nodeType": "ExpressionStatement",
                  "src": "4142:86:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 505,
                      "name": "userContentIds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 351,
                      "src": "4246:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct Whitelist.UserContentId storage ref[] storage ref)"
                      }
                    },
                    "id": 508,
                    "indexExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 506,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1087,
                        "src": "4261:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 507,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "4261:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4246:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage",
                      "typeString": "struct Whitelist.UserContentId storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 496,
                  "id": 509,
                  "nodeType": "Return",
                  "src": "4239:33:8"
                }
              ]
            },
            "documentation": "@dev Valid whitelisted address can query its own contentIds.",
            "id": 511,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getContentIdsByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4053:2:8"
            },
            "returnParameters": {
              "id": 496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 495,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 511,
                  "src": "4103:22:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_memory_$dyn_memory_ptr",
                    "typeString": "struct Whitelist.UserContentId[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 493,
                      "name": "UserContentId",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 346,
                      "src": "4103:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserContentId_$346_storage_ptr",
                        "typeString": "struct Whitelist.UserContentId"
                      }
                    },
                    "id": 494,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "4103:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContentId_$346_storage_$dyn_storage_ptr",
                      "typeString": "struct Whitelist.UserContentId[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4102:24:8"
            },
            "scope": 590,
            "src": "4022:258:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 527,
              "nodeType": "Block",
              "src": "4943:103:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 525,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 522,
                      "name": "signerAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 515,
                      "src": "5013:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 523,
                        "name": "tx",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1099,
                        "src": "5030:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_transaction",
                          "typeString": "tx"
                        }
                      },
                      "id": 524,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "origin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5030:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "5013:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 521,
                  "id": 526,
                  "nodeType": "Return",
                  "src": "5006:33:8"
                }
              ]
            },
            "documentation": "@dev Verifies signer is same as signer of current Ethereum transaction.\n      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n      Extra safety checks can be added for a production contract.\n @param signerAddress Address that should have signed the given hash.\n @param signature Proof of signing.\n @return Validity of order signature.",
            "id": 528,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSignature",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 518,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 513,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 528,
                  "src": "4794:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 512,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4794:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 515,
                  "name": "signerAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 528,
                  "src": "4816:21:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 514,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4816:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 517,
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 528,
                  "src": "4847:24:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 516,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4847:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4784:93:8"
            },
            "returnParameters": {
              "id": 521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 520,
                  "name": "isValid",
                  "nodeType": "VariableDeclaration",
                  "scope": 528,
                  "src": "4925:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 519,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4925:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4924:14:8"
            },
            "scope": 590,
            "src": "4759:287:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 588,
              "nodeType": "Block",
              "src": "5886:1013:8",
              "statements": [
                {
                  "assignments": [
                    540
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 540,
                      "name": "takerAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 588,
                      "src": "5896:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 539,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5896:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 543,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 541,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1087,
                      "src": "5919:3:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 542,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "5919:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5896:33:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 545,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 540,
                          "src": "6088:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 546,
                            "name": "tx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1099,
                            "src": "6104:2:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_transaction",
                              "typeString": "tx"
                            }
                          },
                          "id": 547,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "origin",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "6104:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "6088:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 549,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6127:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 544,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "6010:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 550,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6010:143:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 551,
                  "nodeType": "ExpressionStatement",
                  "src": "6010:143:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 553,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "6232:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 556,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 554,
                            "name": "order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 530,
                            "src": "6246:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Order_$792_memory_ptr",
                              "typeString": "struct LibOrder.Order memory"
                            }
                          },
                          "id": 555,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "makerAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 769,
                          "src": "6246:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6232:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d414b45525f4e4f545f57484954454c4953544544",
                        "id": 557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6279:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        },
                        "value": "MAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 552,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "6211:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6211:101:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 559,
                  "nodeType": "ExpressionStatement",
                  "src": "6211:101:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 561,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 339,
                          "src": "6391:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 563,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 562,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 540,
                          "src": "6405:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6391:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54414b45525f4e4f545f57484954454c4953544544",
                        "id": 564,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6432:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        },
                        "value": "TAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 560,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1090,
                        1091
                      ],
                      "referencedDeclaration": 1091,
                      "src": "6370:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6370:95:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 566,
                  "nodeType": "ExpressionStatement",
                  "src": "6370:95:8"
                },
                {
                  "assignments": [
                    568
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 568,
                      "name": "data",
                      "nodeType": "VariableDeclaration",
                      "scope": 588,
                      "src": "6521:17:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 567,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6521:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 578,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 571,
                            "name": "EXCHANGE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 353,
                            "src": "6577:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IExchange_$36",
                              "typeString": "contract IExchange"
                            }
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "fillOrder",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 57,
                          "src": "6577:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_struct$_Order_$792_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_struct$_FillResults_$673_memory_ptr_$",
                            "typeString": "function (struct LibOrder.Order memory,uint256,bytes memory) external returns (struct LibFillResults.FillResults memory)"
                          }
                        },
                        "id": 573,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "6577:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 574,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 530,
                        "src": "6618:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Order_$792_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 575,
                        "name": "takerAssetFillAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 532,
                        "src": "6637:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 576,
                        "name": "orderSignature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "6671:14:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_struct$_Order_$792_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 569,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1074,
                        "src": "6541:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 570,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSelector",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "6541:22:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes4) pure returns (bytes memory)"
                      }
                    },
                    "id": 577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6541:154:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6521:174:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 582,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 534,
                        "src": "6801:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 583,
                        "name": "takerAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 540,
                        "src": "6819:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 584,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 568,
                        "src": "6845:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 585,
                        "name": "TX_ORIGIN_SIGNATURE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 355,
                        "src": "6863:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 579,
                        "name": "EXCHANGE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 353,
                        "src": "6760:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IExchange_$36",
                          "typeString": "contract IExchange"
                        }
                      },
                      "id": 581,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "executeTransaction",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 132,
                      "src": "6760:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,address,bytes memory,bytes memory) external"
                      }
                    },
                    "id": 586,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6760:132:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 587,
                  "nodeType": "ExpressionStatement",
                  "src": "6760:132:8"
                }
              ]
            },
            "documentation": "@dev Fills an order using `msg.sender` as the taker.\n      The transaction will revert if both the maker and taker are not whitelisted.\n      Orders should specify this contract as the `senderAddress` in order to gaurantee\n      that both maker and taker have been whitelisted.\n @param order Order struct containing order specifications.\n @param takerAssetFillAmount Desired amount of takerAsset to sell.\n @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n @param orderSignature Proof that order has been created by maker.",
            "id": 589,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fillOrderIfWhitelisted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 537,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 530,
                  "name": "order",
                  "nodeType": "VariableDeclaration",
                  "scope": 589,
                  "src": "5736:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$792_memory_ptr",
                    "typeString": "struct LibOrder.Order"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 529,
                    "name": "LibOrder.Order",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 792,
                    "src": "5736:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$792_storage_ptr",
                      "typeString": "struct LibOrder.Order"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 532,
                  "name": "takerAssetFillAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 589,
                  "src": "5773:28:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 531,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5773:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 534,
                  "name": "salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 589,
                  "src": "5811:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 533,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5811:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 536,
                  "name": "orderSignature",
                  "nodeType": "VariableDeclaration",
                  "scope": 589,
                  "src": "5833:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 535,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5833:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5726:140:8"
            },
            "returnParameters": {
              "id": 538,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5886:0:8"
            },
            "scope": 590,
            "src": "5695:1204:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 591,
        "src": "993:5908:8"
      }
    ],
    "src": "785:6117:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.5+commit.47a71e8f.Emscripten.clang"
  },
  "networks": {
    "1562902993390": {
      "events": {},
      "links": {},
      "address": "0x063464DD5623c6e08aD699D24ac5257aBD82472E",
      "transactionHash": "0xc183fc808742433b0045dc7ce0c48bf5d3282d171eed3db1c74399eba6392c7e"
    }
  },
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-07-12T03:43:40.242Z",
  "devdoc": {
    "methods": {
      "adminGetContentIdsByAddress(address)": {
        "details": "Admin gets contentIds mapped to a valid whitelisted address.",
        "params": {
          "target": "Ethereum address to validate & return contentIds for."
        }
      },
      "adminUpdateStatus(address,bool)": {
        "details": "Admin updates whitelist status for a given address.",
        "params": {
          "isApproved": "Whitelist status to assign to address.",
          "target": "Address to add or remove from Whitelist."
        }
      },
      "adminUpdateWhitelist(address,string,bool)": {
        "details": "Admin adds or remove an address & domain mapping from the whitelist.",
        "params": {
          "contentId": "To map to ethereum address to.",
          "isApproved": "Whitelist status to assign to address.",
          "target": "Address to add or remove from whitelist."
        }
      },
      "fillOrderIfWhitelisted((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,uint256,bytes)": {
        "details": "Fills an order using `msg.sender` as the taker.      The transaction will revert if both the maker and taker are not whitelisted.      Orders should specify this contract as the `senderAddress` in order to gaurantee      that both maker and taker have been whitelisted.",
        "params": {
          "order": "Order struct containing order specifications.",
          "orderSignature": "Proof that order has been created by maker.",
          "salt": "Arbitrary value to gaurantee uniqueness of 0x transaction hash.",
          "takerAssetFillAmount": "Desired amount of takerAsset to sell."
        }
      },
      "getContentIdsByAddress()": {
        "details": "Valid whitelisted address can query its own contentIds."
      },
      "isValidSignature(bytes32,address,bytes)": {
        "details": "Verifies signer is same as signer of current Ethereum transaction.      NOTE: This function can currently be used to validate signatures coming from outside of this contract.      Extra safety checks can be added for a production contract.",
        "params": {
          "signature": "Proof of signing.",
          "signerAddress": "Address that should have signed the given hash."
        },
        "return": "Validity of order signature."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}