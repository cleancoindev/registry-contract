{
  "contractName": "Whitelist",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_exchange",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "contentId",
          "type": "string"
        },
        {
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "adminUpdateWhitelist",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "adminUpdateStatus",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "contentId",
          "type": "string"
        }
      ],
      "name": "adminGetAddressByContentId",
      "outputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "adminGetContentIdsByAddress",
      "outputs": [
        {
          "components": [
            {
              "name": "contentId",
              "type": "string"
            },
            {
              "name": "isExist",
              "type": "bool"
            }
          ],
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getContentIdsByAddress",
      "outputs": [
        {
          "components": [
            {
              "name": "contentId",
              "type": "string"
            },
            {
              "name": "isExist",
              "type": "bool"
            }
          ],
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "hash",
          "type": "bytes32"
        },
        {
          "name": "signerAddress",
          "type": "address"
        },
        {
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "name": "isValid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "name": "makerAddress",
              "type": "address"
            },
            {
              "name": "takerAddress",
              "type": "address"
            },
            {
              "name": "feeRecipientAddress",
              "type": "address"
            },
            {
              "name": "senderAddress",
              "type": "address"
            },
            {
              "name": "makerAssetAmount",
              "type": "uint256"
            },
            {
              "name": "takerAssetAmount",
              "type": "uint256"
            },
            {
              "name": "makerFee",
              "type": "uint256"
            },
            {
              "name": "takerFee",
              "type": "uint256"
            },
            {
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "name": "salt",
              "type": "uint256"
            },
            {
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "name": "takerAssetData",
              "type": "bytes"
            }
          ],
          "name": "order",
          "type": "tuple"
        },
        {
          "name": "takerAssetFillAmount",
          "type": "uint256"
        },
        {
          "name": "salt",
          "type": "uint256"
        },
        {
          "name": "orderSignature",
          "type": "bytes"
        }
      ],
      "name": "fillOrderIfWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.5+commit.47a71e8f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"contentId\",\"type\":\"string\"},{\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"adminUpdateWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"order\",\"type\":\"tuple\"},{\"name\":\"takerAssetFillAmount\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"orderSignature\",\"type\":\"bytes\"}],\"name\":\"fillOrderIfWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"adminUpdateStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"adminGetContentIdsByAddress\",\"outputs\":[{\"components\":[{\"name\":\"contentId\",\"type\":\"string\"},{\"name\":\"isExist\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentIdsByAddress\",\"outputs\":[{\"components\":[{\"name\":\"contentId\",\"type\":\"string\"},{\"name\":\"isExist\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contentId\",\"type\":\"string\"}],\"name\":\"adminGetAddressByContentId\",\"outputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"signerAddress\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"isValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{\"adminGetContentIdsByAddress(address)\":{\"details\":\"Admin gets contentIds mapped to a valid whitelisted address.\",\"params\":{\"target\":\"Ethereum address to validate & return contentId for.\"}},\"adminUpdateStatus(address,bool)\":{\"details\":\"Admin updates whitelist status for a given address.\",\"params\":{\"isApproved\":\"Whitelist status to assign to address.\",\"target\":\"Address to add or remove from Whitelist.\"}},\"adminUpdateWhitelist(address,string,bool)\":{\"details\":\"Admin adds or remove an address & domain mapping from the whitelist.\",\"params\":{\"contentId\":\"To map to ethereum address to.\",\"isApproved\":\"Whitelist status to assign to address.\",\"target\":\"Address to add or remove from whitelist.\"}},\"fillOrderIfWhitelisted((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,uint256,bytes)\":{\"details\":\"Fills an order using `msg.sender` as the taker.      The transaction will revert if both the maker and taker are not whitelisted.      Orders should specify this contract as the `senderAddress` in order to gaurantee      that both maker and taker have been whitelisted.\",\"params\":{\"order\":\"Order struct containing order specifications.\",\"orderSignature\":\"Proof that order has been created by maker.\",\"salt\":\"Arbitrary value to gaurantee uniqueness of 0x transaction hash.\",\"takerAssetFillAmount\":\"Desired amount of takerAsset to sell.\"}},\"getContentIdsByAddress()\":{\"details\":\"Valid whitelisted address can query its own contentIds.\"},\"isValidSignature(bytes32,address,bytes)\":{\"details\":\"Verifies signer is same as signer of current Ethereum transaction.      NOTE: This function can currently be used to validate signatures coming from outside of this contract.      Extra safety checks can be added for a production contract.\",\"params\":{\"signature\":\"Proof of signing.\",\"signerAddress\":\"Address that should have signed the given hash.\"},\"return\":\"Validity of order signature.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/lauren/github/registry-contract/contracts/Whitelist.sol\":\"Whitelist\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/lauren/github/registry-contract/contracts/IAssetProxyDispatcher.sol\":{\"keccak256\":\"0x9f2df0836b76e56b8fe113c224a83b95ff0c984cedfb660286eab94edb151b88\",\"urls\":[\"bzzr://1c7ca7647f032f742277cfea04722c1241e136198f7b1b424c9eed709f175c53\"]},\"/Users/lauren/github/registry-contract/contracts/IExchange.sol\":{\"keccak256\":\"0x7640d57cbe84e44d21d70f988c75d8a3e396be090268665ed24de5aab130d89b\",\"urls\":[\"bzzr://2d8926f14c4c8e7d8d94fc045af7029fe5e2952cd59f5d24d1660afe89e8496c\"]},\"/Users/lauren/github/registry-contract/contracts/IExchangeCore.sol\":{\"keccak256\":\"0x692849db6311f64436b7091679d76b2f458ffa9d88b1127c34088bf1023f3d96\",\"urls\":[\"bzzr://0d2083b036ae3026985e435f427e6fc6d7ba1a3cadbcfb92a35d67ca0a313376\"]},\"/Users/lauren/github/registry-contract/contracts/IMatchOrders.sol\":{\"keccak256\":\"0xc8bc1846e6a380a329c1bffa69c1a8b814e0f79e75f074e021ee7b5abc941cc1\",\"urls\":[\"bzzr://0bc85fc36da995c219ce5009850cbf912405c1679e0da77b9de0ad02c050cf67\"]},\"/Users/lauren/github/registry-contract/contracts/ISignatureValidator.sol\":{\"keccak256\":\"0x90b44476bb95906ed861b3d038aa9578b6dead3283f5ec192c0985180dba7eee\",\"urls\":[\"bzzr://95730ccaa6602bffdaba8be7bafb18936a1eb711fd3c9b7bc66530602ff87fab\"]},\"/Users/lauren/github/registry-contract/contracts/ITransactions.sol\":{\"keccak256\":\"0x4604da6f13306fbdd56d453ff47c04d9f2dd71d94af511bcf246306f238c7fbf\",\"urls\":[\"bzzr://77f262e41caaee63031fafeea078718f0dfe735c90f6fc0b827735eb36a1b2d2\"]},\"/Users/lauren/github/registry-contract/contracts/IWrapperFunctions.sol\":{\"keccak256\":\"0xcb15626aac4b048e3982db276638a5a5828fc24fe6afdb58c1f8646dd3dc03ad\",\"urls\":[\"bzzr://bd17dc8173df53e93a5604c0ef5dd28585fdaaab9467c3e99f1bee89068536f5\"]},\"/Users/lauren/github/registry-contract/contracts/Whitelist.sol\":{\"keccak256\":\"0x03d3fb21624c7ff191d6024eb9e5a6146a90c2353930d86e0a1e7e868f66aaf8\",\"urls\":[\"bzzr://fd50524c26e5e31b1ce9259e63b4a545c06b2005d2c544df81b8ba9227d16fc8\"]},\"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol\":{\"keccak256\":\"0x9e3c7630c8389a8a13294a4224e7051ed5c64268864f53fc359377bdc8115c28\",\"urls\":[\"bzzr://af7152a1885ab00eb728e3e294b33b4eb1bdf3c2f6d423f5ce93d32da94f53dc\"]},\"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\":{\"keccak256\":\"0xd2901bceaae8c4f1b6b13b38bf1c99dc8fa02fd82504009f8b82fc1c6a26c8ed\",\"urls\":[\"bzzr://eb694a8bbb5671db1e00f2ad8c99c6982448c2f9114e759f64ee00c52043c259\"]},\"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\":{\"keccak256\":\"0xaea24ce7e1f7f15dd6a3f58f7c93ffdb52bbba9527ecd7bc60271e21b253349f\",\"urls\":[\"bzzr://2a7fb7eb2c0775cc74161d37f9454da5f09e2ba00aa7248c38805f3dd7c3fada\"]},\"@0x/contracts-utils/contracts/src/Ownable.sol\":{\"keccak256\":\"0xe7c6767e3fa1f51e7086adc94cdd7cfcf7f606ffcafc8942fc2dbbb3d8aded40\",\"urls\":[\"bzzr://eaec8ad75455cecc32cdb01f7522cc35b3d2f47542b2d140e84e510fb69a7727\"]},\"@0x/contracts-utils/contracts/src/SafeMath.sol\":{\"keccak256\":\"0x27027b268113e424039e67bbab9bfcfd76d0e5707c4b3068af68382c8f35bd34\",\"urls\":[\"bzzr://254aa51bd03ccc0f5096315b0883b03de9a3bc7105744570d6a77e00f4c2d6bd\"]},\"@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol\":{\"keccak256\":\"0xb48efd8c0afe60386dda1b01329b5ee8a65cae57b930bd6a010ae9af72b177cc\",\"urls\":[\"bzzr://025b49d4d83d2f9bcb4945381f4f92edf177d2667cdc15c9e1f755ca531f86e1\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516020806200229b8339810180604052620000339190810190620001dc565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550307f0500000000000000000000000000000000000000000000000000000000000000604051602001620000e99291906200023e565b604051602081830303815290604052600590805190602001906200010f92919062000117565b505062000341565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015a57805160ff19168380011785556200018b565b828001600101855582156200018b579182015b828111156200018a5782518255916020019190600101906200016d565b5b5090506200019a91906200019e565b5090565b620001c391905b80821115620001bf576000816000905550600101620001a5565b5090565b90565b6000620001d48251620002ce565b905092915050565b600060208284031215620001ef57600080fd5b6000620001ff84828501620001c6565b91505092915050565b6200021d62000217826200026e565b62000302565b82525050565b62000238620002328262000282565b62000316565b82525050565b60006200024c828562000208565b6014820191506200025e828462000223565b6001820191508190509392505050565b60006200027b82620002ae565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002db82620002e2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030f8262000320565b9050919050565b6000819050919050565b60006200032d8262000334565b9050919050565b60008160601b9050919050565b611f4a80620003516000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806365d9abbb1161006657806365d9abbb146101575780637b97d034146101755780638da5cb5b146101a557806393634702146101c3578063f2fde38b146101f35761009e565b80630a01d347146100a3578063141da876146100bf5780633af32abf146100db57806344ff29dc1461010b5780634981604114610127575b600080fd5b6100bd60048036036100b89190810190611467565b61020f565b005b6100d960048036036100d49190810190611584565b610462565b005b6100f560048036036100f09190810190611402565b61074c565b6040516101029190611b73565b60405180910390f35b6101256004803603610120919081019061142b565b61076c565b005b610141600480360361013c9190810190611402565b610905565b60405161014e9190611b51565b60405180910390f35b61015f610b7f565b60405161016c9190611b51565b60405180910390f35b61018f600480360361018a919081019061153f565b610d66565b60405161019c9190611b36565b60405180910390f35b6101ad610f10565b6040516101ba9190611b36565b60405180910390f35b6101dd60048036036101d891908101906114d3565b610f35565b6040516101ea9190611b73565b60405180910390f35b61020d60048036036102089190810190611402565b610f70565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029790611bee565b60405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040528085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016001151581525090806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001908051906020019061038292919061107b565b5060208201518160010160006101000a81548160ff02191690831515021790555050505083600284846040516103b9929190611b1d565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60003390503273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156104d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ce90611c2e565b60405180910390fd5b60036000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090611c0e565b60405180910390fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee90611bae565b60405180910390fd5b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4be83d5905060e01b86868560405160240161065193929190611c4e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bfc8bfce85848460056040518563ffffffff1660e01b81526004016107129493929190611c93565b600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b50505050505050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490611bee565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561084a57fe5b906000526020600020906002020160010160009054906101000a900460ff1615156108aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a190611b8e565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610998576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90611bee565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1d90611bce565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610b745783829060005260206000209060020201604051806040016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b415780601f10610b1657610100808354040283529160200191610b41565b820191906000526020600020905b815481529060010190602001808311610b2457829003601f168201915b505050505081526020016001820160009054906101000a900460ff16151515158152505081526020019060010190610a85565b505050509050919050565b6060600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0690611c2e565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610d5d5783829060005260206000209060020201604051806040016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d2a5780601f10610cff57610100808354040283529160200191610d2a565b820191906000526020600020905b815481529060010190602001808311610d0d57829003601f168201915b505050505081526020016001820160009054906101000a900460ff16151515158152505081526020019060010190610c6e565b50505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610df9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df090611bee565b60405180910390fd5b6003600060028585604051610e0f929190611b1d565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebe90611bce565b60405180910390fd5b60028383604051610ed9929190611b1d565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16149050949350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff890611bee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561107857806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106110bc57805160ff19168380011785556110ea565b828001600101855582156110ea579182015b828111156110e95782518255916020019190600101906110ce565b5b5090506110f791906110fb565b5090565b61111d91905b80821115611119576000816000905550600101611101565b5090565b90565b600061112c8235611e6b565b905092915050565b60006111408235611e7d565b905092915050565b60006111548235611e89565b905092915050565b60008083601f840112151561117057600080fd5b8235905067ffffffffffffffff81111561118957600080fd5b6020830191508360018202830111156111a157600080fd5b9250929050565b600082601f83011215156111bb57600080fd5b81356111ce6111c982611d13565b611ce6565b915080825260208301602083018583830111156111ea57600080fd5b6111f5838284611ebd565b50505092915050565b600082601f830112151561121157600080fd5b813561122461121f82611d3f565b611ce6565b9150808252602083016020830185838301111561124057600080fd5b61124b838284611ebd565b50505092915050565b60008083601f840112151561126857600080fd5b8235905067ffffffffffffffff81111561128157600080fd5b60208301915083600182028301111561129957600080fd5b9250929050565b600061018082840312156112b357600080fd5b6112be610180611ce6565b905060006112ce84828501611120565b60008301525060206112e284828501611120565b60208301525060406112f684828501611120565b604083015250606061130a84828501611120565b606083015250608061131e848285016113ee565b60808301525060a0611332848285016113ee565b60a08301525060c0611346848285016113ee565b60c08301525060e061135a848285016113ee565b60e08301525061010061136f848285016113ee565b61010083015250610120611385848285016113ee565b6101208301525061014082013567ffffffffffffffff8111156113a757600080fd5b6113b3848285016111a8565b6101408301525061016082013567ffffffffffffffff8111156113d557600080fd5b6113e1848285016111a8565b6101608301525092915050565b60006113fa8235611eb3565b905092915050565b60006020828403121561141457600080fd5b600061142284828501611120565b91505092915050565b6000806040838503121561143e57600080fd5b600061144c85828601611120565b925050602061145d85828601611134565b9150509250929050565b6000806000806060858703121561147d57600080fd5b600061148b87828801611120565b945050602085013567ffffffffffffffff8111156114a857600080fd5b6114b487828801611254565b935093505060406114c787828801611134565b91505092959194509250565b600080600080606085870312156114e957600080fd5b60006114f787828801611148565b945050602061150887828801611120565b935050604085013567ffffffffffffffff81111561152557600080fd5b6115318782880161115c565b925092505092959194509250565b6000806020838503121561155257600080fd5b600083013567ffffffffffffffff81111561156c57600080fd5b61157885828601611254565b92509250509250929050565b6000806000806080858703121561159a57600080fd5b600085013567ffffffffffffffff8111156115b457600080fd5b6115c0878288016112a0565b94505060206115d1878288016113ee565b93505060406115e2878288016113ee565b925050606085013567ffffffffffffffff8111156115ff57600080fd5b61160b878288016111fe565b91505092959194509250565b60006116238383611ac2565b905092915050565b61163481611e23565b82525050565b61164381611e23565b82525050565b600061165482611d8a565b61165e8185611dc3565b93508360208202850161167085611d6b565b60005b848110156116a957838303885261168b838351611617565b925061169682611db6565b9150602088019750600181019050611673565b508196508694505050505092915050565b6116c381611e35565b82525050565b6116d281611e35565b82525050565b60006116e382611da0565b6116ed8185611de5565b93506116fd818560208601611ecc565b61170681611eff565b840191505092915050565b600061171c82611d95565b6117268185611dd4565b9350611736818560208601611ecc565b61173f81611eff565b840191505092915050565b600081546001811660008114611767576001811461178d576117d1565b607f60028304166117788187611de5565b955060ff1983168652602086019350506117d1565b6002820461179b8187611de5565b95506117a685611d78565b60005b828110156117c8578154818901526001820191506020810190506117a9565b80880195505050505b505092915050565b60006117e58385611e18565b93506117f2838584611ebd565b82840190509392505050565b600061180982611dab565b6118138185611df6565b9350611823818560208601611ecc565b61182c81611eff565b840191505092915050565b6000611844601a83611e07565b91507f414444524553535f4841535f4e4f5f434f4e54454e545f4944530000000000006000830152602082019050919050565b6000611884601583611e07565b91507f54414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b60006118c4601783611e07565b91507f414444524553535f4e4f545f57484954454c49535445440000000000000000006000830152602082019050919050565b6000611904601383611e07565b91507f4f4e4c595f434f4e54524143545f4f574e4552000000000000000000000000006000830152602082019050919050565b6000611944601583611e07565b91507f4d414b45525f4e4f545f57484954454c495354454400000000000000000000006000830152602082019050919050565b6000611984600e83611e07565b91507f494e56414c49445f53454e4445520000000000000000000000000000000000006000830152602082019050919050565b6000610180830160008301516119d0600086018261162b565b5060208301516119e3602086018261162b565b5060408301516119f6604086018261162b565b506060830151611a09606086018261162b565b506080830151611a1c6080860182611aff565b5060a0830151611a2f60a0860182611aff565b5060c0830151611a4260c0860182611aff565b5060e0830151611a5560e0860182611aff565b50610100830151611a6a610100860182611aff565b50610120830151611a7f610120860182611aff565b50610140830151848203610140860152611a998282611711565b915050610160830151848203610160860152611ab58282611711565b9150508091505092915050565b60006040830160008301518482036000860152611adf82826117fe565b9150506020830151611af460208601826116ba565b508091505092915050565b611b0881611e61565b82525050565b611b1781611e61565b82525050565b6000611b2a8284866117d9565b91508190509392505050565b6000602082019050611b4b600083018461163a565b92915050565b60006020820190508181036000830152611b6b8184611649565b905092915050565b6000602082019050611b8860008301846116c9565b92915050565b60006020820190508181036000830152611ba781611837565b9050919050565b60006020820190508181036000830152611bc781611877565b9050919050565b60006020820190508181036000830152611be7816118b7565b9050919050565b60006020820190508181036000830152611c07816118f7565b9050919050565b60006020820190508181036000830152611c2781611937565b9050919050565b60006020820190508181036000830152611c4781611977565b9050919050565b60006060820190508181036000830152611c6881866119b7565b9050611c776020830185611b0e565b8181036040830152611c8981846116d8565b9050949350505050565b6000608082019050611ca86000830187611b0e565b611cb5602083018661163a565b8181036040830152611cc781856116d8565b90508181036060830152611cdb818461174a565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715611d0957600080fd5b8060405250919050565b600067ffffffffffffffff821115611d2a57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611d5657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e2e82611e41565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e7682611e93565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611eea578082015181840152602081019050611ecf565b83811115611ef9576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058205b0708f4c324ea6f8a4067fbdaeaf24706b3fa3d5c24206cccfe31aee8b1f8836c6578706572696d656e74616cf50037",
  "deployedBytecode": "",
  "sourceMap": "993:5785:8:-;;;1707:188;8:9:-1;5:2;;;30:1;27;20:12;5:2;1707:188:8;;;;;;;;;;;;;;;;;;;;;;181:10:12;173:5;;:18;;;;;;;;;;;;;;;;;;1789:9:8;1768:8;;:31;;;;;;;;;;;;;;;;;;1856:4;1863:24;1831:57;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1831:57:8;;;1809:19;:79;;;;;;;;;;;;:::i;:::-;;1707:188;993:5785;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;;68:59;;;;;134:263;;249:2;237:9;228:7;224:23;220:32;217:2;;;265:1;262;255:12;217:2;300:1;317:64;373:7;364:6;353:9;349:22;317:64;;;307:74;;279:108;211:186;;;;;404:159;505:52;525:31;550:5;525:31;;;505:52;;;500:3;493:65;487:76;;;570:155;669:50;688:30;712:5;688:30;;;669:50;;;664:3;657:63;651:74;;;732:378;;877:75;948:3;939:6;877:75;;;974:2;969:3;965:12;958:19;;988:73;1057:3;1048:6;988:73;;;1083:1;1078:3;1074:11;1067:18;;1102:3;1095:10;;865:245;;;;;;1117:105;;1186:31;1211:5;1186:31;;;1175:42;;1169:53;;;;1229:151;;1308:66;1301:5;1297:78;1286:89;;1280:100;;;;1387:128;;1467:42;1460:5;1456:54;1445:65;;1439:76;;;;1522:105;;1591:31;1616:5;1591:31;;;1580:42;;1574:53;;;;1634:128;;1714:42;1707:5;1703:54;1692:65;;1686:76;;;;1769:95;;1833:26;1853:5;1833:26;;;1822:37;;1816:48;;;;1871:73;;1934:5;1923:16;;1917:27;;;;1951:89;;2015:20;2029:5;2015:20;;;2004:31;;1998:42;;;;2048:81;;2117:5;2113:2;2109:14;2097:26;;2090:39;;;;993:5785:8;;;;;;;",
  "deployedSourceMap": "993:5785:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;993:5785:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2167:370;;;;;;;;;;;;;;;;:::i;:::-;;5572:1204;;;;;;;;;;;;;;;;:::i;:::-;;1407:46;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2737:284;;;;;;;;;;;;;;;;:::i;:::-;;3525:305;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3905:253;;;:::i;:::-;;;;;;;;;;;;;;;;3027:343;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;102:20:12;;;:::i;:::-;;;;;;;;;;;;;;;;4636:287:8;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;344:167:12;;;;;;;;;;;;;;;;:::i;:::-;;2167:370:8;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;2384:11:8;:19;2396:6;2384:19;;;;;;;;;;;;;;;2409:28;;;;;;;;2421:9;;2409:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2409:28:8;;;;;;;;;;2432:4;2409:28;;;;;2384:54;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2384:54:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2480:6;2448:18;2467:9;;2448:29;;;;;;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;2520:10;2496:13;:21;2510:6;2496:21;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;2167:370;;;;:::o;5572:1204::-;5773:20;5796:10;5773:33;;5981:9;5965:25;;:12;:25;;;5887:143;;;;;;;;;;;;;;;;;;;;;;;;6109:13;:33;6123:5;:18;;;6109:33;;;;;;;;;;;;;;;;;;;;;;;;;6088:101;;;;;;;;;;;;;;;;;;;;;;;;6268:13;:27;6282:12;6268:27;;;;;;;;;;;;;;;;;;;;;;;;;6247:95;;;;;;;;;;;;;;;;;;;;;;;;6398:17;6454:8;;;;;;;;;;;:18;;;:27;;;;6495:5;6514:20;6548:14;6418:154;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6418:154:8;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;6418:154:8;6398:174;;6637:8;;;;;;;;;;;:27;;;6678:4;6696:12;6722:4;6740:19;6637:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6637:132:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6637:132:8;;;;5572:1204;;;;;;:::o;1407:46::-;;;;;;;;;;;;;;;;;;;;;;:::o;2737:284::-;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;2888:11:8;:19;2900:6;2888:19;;;;;;;;;;;;;;;2908:1;2888:22;;;;;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;2869:99;;;;;;;;;;;;;;;;;;;;;;;;3003:10;2979:13;:21;2993:6;2979:21;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;2737:284;;:::o;3525:305::-;3657:20;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;3715:13:8;:21;3729:6;3715:21;;;;;;;;;;;;;;;;;;;;;;;;;3694:91;;;;;;;;;;;;;;;;;;;;;;;;3803:11;:19;3815:6;3803:19;;;;;;;;;;;;;;;3796:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3525:305;;;:::o;3905:253::-;3986:20;4044:13;:25;4058:10;4044:25;;;;;;;;;;;;;;;;;;;;;;;;;4023:86;;;;;;;;;;;;;;;;;;;;;;;;4127:11;:23;4139:10;4127:23;;;;;;;;;;;;;;;4120:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3905:253;:::o;3027:343::-;3169:14;270:5:12;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;3221:13:8;:46;3236:18;3255:9;;3236:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3221:46;;;;;;;;;;;;;;;;;;;;;;;;;3200:116;;;;;;;;;;;;;;;;;;;;;;;;3334:18;3353:9;;3334:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3327:36;;3027:343;;;;:::o;102:20:12:-;;;;;;;;;;;;;:::o;4636:287:8:-;4802:12;4907:9;4890:26;;:13;:26;;;4883:33;;4636:287;;;;;;:::o;344:167:12:-;270:5;;;;;;;;;;;256:19;;:10;:19;;;235:85;;;;;;;;;;;;;;;;;;;;;;;;460:1;440:22;;:8;:22;;;;436:69;;;486:8;478:5;;:16;;;;;;;;;;;;;;;;;;436:69;344:167;:::o;993:5785:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;;57:66;;;;;130:112;;194:43;229:6;216:20;194:43;;;185:52;;179:63;;;;;249:118;;316:46;354:6;341:20;316:46;;;307:55;;301:66;;;;;388:335;;;502:3;495:4;487:6;483:17;479:27;472:35;469:2;;;520:1;517;510:12;469:2;553:6;540:20;530:30;;580:18;572:6;569:30;566:2;;;612:1;609;602:12;566:2;646:4;638:6;634:17;622:29;;696:3;689;681:6;677:16;667:8;663:31;660:40;657:2;;;713:1;710;703:12;657:2;462:261;;;;;;732:432;;829:3;822:4;814:6;810:17;806:27;799:35;796:2;;;847:1;844;837:12;796:2;884:6;871:20;906:60;921:44;958:6;921:44;;;906:60;;;897:69;;986:6;979:5;972:21;1022:4;1014:6;1010:17;1055:4;1048:5;1044:16;1090:3;1081:6;1076:3;1072:16;1069:25;1066:2;;;1107:1;1104;1097:12;1066:2;1117:41;1151:6;1146:3;1141;1117:41;;;789:375;;;;;;;;1173:440;;1274:3;1267:4;1259:6;1255:17;1251:27;1244:35;1241:2;;;1292:1;1289;1282:12;1241:2;1329:6;1316:20;1351:64;1366:48;1407:6;1366:48;;;1351:64;;;1342:73;;1435:6;1428:5;1421:21;1471:4;1463:6;1459:17;1504:4;1497:5;1493:16;1539:3;1530:6;1525:3;1521:16;1518:25;1515:2;;;1556:1;1553;1546:12;1515:2;1566:41;1600:6;1595:3;1590;1566:41;;;1234:379;;;;;;;;1636:336;;;1751:3;1744:4;1736:6;1732:17;1728:27;1721:35;1718:2;;;1769:1;1766;1759:12;1718:2;1802:6;1789:20;1779:30;;1829:18;1821:6;1818:30;1815:2;;;1861:1;1858;1851:12;1815:2;1895:4;1887:6;1883:17;1871:29;;1945:3;1938;1930:6;1926:16;1916:8;1912:31;1909:40;1906:2;;;1962:1;1959;1952:12;1906:2;1711:261;;;;;;2008:2208;;2119:5;2107:9;2102:3;2098:19;2094:31;2091:2;;;2138:1;2135;2128:12;2091:2;2156:21;2171:5;2156:21;;;2147:30;;2235:1;2266:49;2311:3;2302:6;2291:9;2287:22;2266:49;;;2260:3;2253:5;2249:15;2242:74;2187:140;2385:2;2418:49;2463:3;2454:6;2443:9;2439:22;2418:49;;;2411:4;2404:5;2400:16;2393:75;2337:142;2544:2;2577:49;2622:3;2613:6;2602:9;2598:22;2577:49;;;2570:4;2563:5;2559:16;2552:75;2489:149;2697:2;2730:49;2775:3;2766:6;2755:9;2751:22;2730:49;;;2723:4;2716:5;2712:16;2705:75;2648:143;2853:3;2887:49;2932:3;2923:6;2912:9;2908:22;2887:49;;;2880:4;2873:5;2869:16;2862:75;2801:147;3010:3;3044:49;3089:3;3080:6;3069:9;3065:22;3044:49;;;3037:4;3030:5;3026:16;3019:75;2958:147;3159:3;3193:49;3238:3;3229:6;3218:9;3214:22;3193:49;;;3186:4;3179:5;3175:16;3168:75;3115:139;3308:3;3342:49;3387:3;3378:6;3367:9;3363:22;3342:49;;;3335:4;3328:5;3324:16;3317:75;3264:139;3470:3;3505:49;3550:3;3541:6;3530:9;3526:22;3505:49;;;3497:5;3490;3486:17;3479:76;3413:153;3616:3;3651:49;3696:3;3687:6;3676:9;3672:22;3651:49;;;3643:5;3636;3632:17;3625:76;3576:136;3800:3;3789:9;3785:19;3772:33;3825:18;3817:6;3814:30;3811:2;;;3857:1;3854;3847:12;3811:2;3893:54;3943:3;3934:6;3923:9;3919:22;3893:54;;;3885:5;3878;3874:17;3867:81;3722:237;4047:3;4036:9;4032:19;4019:33;4072:18;4064:6;4061:30;4058:2;;;4104:1;4101;4094:12;4058:2;4140:54;4190:3;4181:6;4170:9;4166:22;4140:54;;;4132:5;4125;4121:17;4114:81;3969:237;2085:2131;;;;;4223:118;;4290:46;4328:6;4315:20;4290:46;;;4281:55;;4275:66;;;;;4348:241;;4452:2;4440:9;4431:7;4427:23;4423:32;4420:2;;;4468:1;4465;4458:12;4420:2;4503:1;4520:53;4565:7;4556:6;4545:9;4541:22;4520:53;;;4510:63;;4482:97;4414:175;;;;;4596:360;;;4714:2;4702:9;4693:7;4689:23;4685:32;4682:2;;;4730:1;4727;4720:12;4682:2;4765:1;4782:53;4827:7;4818:6;4807:9;4803:22;4782:53;;;4772:63;;4744:97;4872:2;4890:50;4932:7;4923:6;4912:9;4908:22;4890:50;;;4880:60;;4851:95;4676:280;;;;;;4963:611;;;;;5118:2;5106:9;5097:7;5093:23;5089:32;5086:2;;;5134:1;5131;5124:12;5086:2;5169:1;5186:53;5231:7;5222:6;5211:9;5207:22;5186:53;;;5176:63;;5148:97;5304:2;5293:9;5289:18;5276:32;5328:18;5320:6;5317:30;5314:2;;;5360:1;5357;5350:12;5314:2;5388:65;5445:7;5436:6;5425:9;5421:22;5388:65;;;5378:75;;;;5255:204;5490:2;5508:50;5550:7;5541:6;5530:9;5526:22;5508:50;;;5498:60;;5469:95;5080:494;;;;;;;;5581:615;;;;;5738:2;5726:9;5717:7;5713:23;5709:32;5706:2;;;5754:1;5751;5744:12;5706:2;5789:1;5806:53;5851:7;5842:6;5831:9;5827:22;5806:53;;;5796:63;;5768:97;5896:2;5914:53;5959:7;5950:6;5939:9;5935:22;5914:53;;;5904:63;;5875:98;6032:2;6021:9;6017:18;6004:32;6056:18;6048:6;6045:30;6042:2;;;6088:1;6085;6078:12;6042:2;6116:64;6172:7;6163:6;6152:9;6148:22;6116:64;;;6106:74;;;;5983:203;5700:496;;;;;;;;6203:367;;;6327:2;6315:9;6306:7;6302:23;6298:32;6295:2;;;6343:1;6340;6333:12;6295:2;6406:1;6395:9;6391:17;6378:31;6429:18;6421:6;6418:30;6415:2;;;6461:1;6458;6451:12;6415:2;6489:65;6546:7;6537:6;6526:9;6522:22;6489:65;;;6479:75;;;;6357:203;6289:281;;;;;;6577:851;;;;;6763:3;6751:9;6742:7;6738:23;6734:33;6731:2;;;6780:1;6777;6770:12;6731:2;6843:1;6832:9;6828:17;6815:31;6866:18;6858:6;6855:30;6852:2;;;6898:1;6895;6888:12;6852:2;6918:75;6985:7;6976:6;6965:9;6961:22;6918:75;;;6908:85;;6794:205;7030:2;7048:53;7093:7;7084:6;7073:9;7069:22;7048:53;;;7038:63;;7009:98;7138:2;7156:53;7201:7;7192:6;7181:9;7177:22;7156:53;;;7146:63;;7117:98;7274:2;7263:9;7259:18;7246:32;7298:18;7290:6;7287:30;7284:2;;;7330:1;7327;7320:12;7284:2;7350:62;7404:7;7395:6;7384:9;7380:22;7350:62;;;7340:72;;7225:193;6725:703;;;;;;;;7436:251;;7584:97;7677:3;7670:5;7584:97;;;7570:111;;7563:124;;;;;7695:110;7768:31;7793:5;7768:31;;;7763:3;7756:44;7750:55;;;7812:120;7895:31;7920:5;7895:31;;;7890:3;7883:44;7877:55;;;8012:971;;8205:78;8277:5;8205:78;;;8296:110;8399:6;8394:3;8296:110;;;8289:117;;8429:3;8471:4;8463:6;8459:17;8454:3;8450:27;8497:80;8571:5;8497:80;;;8598:1;8583:361;8608:6;8605:1;8602:13;8583:361;;;8670:9;8664:4;8660:20;8655:3;8648:33;8696:112;8803:4;8794:6;8788:13;8696:112;;;8688:120;;8825:84;8902:6;8825:84;;;8815:94;;8932:4;8927:3;8923:14;8916:21;;8630:1;8627;8623:9;8618:14;;8583:361;;;8587:14;8957:4;8950:11;;8974:3;8967:10;;8184:799;;;;;;;;;8991:101;9058:28;9080:5;9058:28;;;9053:3;9046:41;9040:52;;;9099:111;9176:28;9198:5;9176:28;;;9171:3;9164:41;9158:52;;;9217:343;;9327:38;9359:5;9327:38;;;9377:70;9440:6;9435:3;9377:70;;;9370:77;;9452:52;9497:6;9492:3;9485:4;9478:5;9474:16;9452:52;;;9525:29;9547:6;9525:29;;;9520:3;9516:39;9509:46;;9307:253;;;;;;9567:315;;9663:34;9691:5;9663:34;;;9709:60;9762:6;9757:3;9709:60;;;9702:67;;9774:52;9819:6;9814:3;9807:4;9800:5;9796:16;9774:52;;;9847:29;9869:6;9847:29;;;9842:3;9838:39;9831:46;;9643:239;;;;;;9912:818;;10029:5;10023:12;10063:1;10052:9;10048:17;10076:1;10071:247;;;;10329:1;10324:400;;;;10041:683;;10071:247;10149:4;10145:1;10134:9;10130:17;10126:28;10168:70;10231:6;10226:3;10168:70;;;10161:77;;10276:4;10272:9;10261;10257:25;10252:3;10245:38;10306:4;10301:3;10297:14;10290:21;;10078:240;10071:247;;10324:400;10393:1;10382:9;10378:17;10409:70;10472:6;10467:3;10409:70;;;10402:77;;10501:37;10532:5;10501:37;;;10554:1;10562:130;10576:6;10573:1;10570:13;10562:130;;;10641:7;10635:14;10631:1;10626:3;10622:11;10615:35;10682:1;10673:7;10669:15;10658:26;;10598:4;10595:1;10591:12;10586:17;;10562:130;;;10715:1;10710:3;10706:11;10699:18;;10331:393;;;10041:683;;9999:731;;;;;;10761:303;;10894:89;10976:6;10971:3;10894:89;;;10887:96;;10988:43;11024:6;11019:3;11012:5;10988:43;;;11052:6;11047:3;11043:16;11036:23;;10881:183;;;;;;11071:319;;11169:35;11198:5;11169:35;;;11216:61;11270:6;11265:3;11216:61;;;11209:68;;11282:52;11327:6;11322:3;11315:4;11308:5;11304:16;11282:52;;;11355:29;11377:6;11355:29;;;11350:3;11346:39;11339:46;;11149:241;;;;;;11398:364;;11558:67;11622:2;11617:3;11558:67;;;11551:74;;11658:66;11654:1;11649:3;11645:11;11638:87;11753:2;11748:3;11744:12;11737:19;;11544:218;;;;11771:364;;11931:67;11995:2;11990:3;11931:67;;;11924:74;;12031:66;12027:1;12022:3;12018:11;12011:87;12126:2;12121:3;12117:12;12110:19;;11917:218;;;;12144:364;;12304:67;12368:2;12363:3;12304:67;;;12297:74;;12404:66;12400:1;12395:3;12391:11;12384:87;12499:2;12494:3;12490:12;12483:19;;12290:218;;;;12517:364;;12677:67;12741:2;12736:3;12677:67;;;12670:74;;12777:66;12773:1;12768:3;12764:11;12757:87;12872:2;12867:3;12863:12;12856:19;;12663:218;;;;12890:364;;13050:67;13114:2;13109:3;13050:67;;;13043:74;;13150:66;13146:1;13141:3;13137:11;13130:87;13245:2;13240:3;13236:12;13229:19;;13036:218;;;;13263:364;;13423:67;13487:2;13482:3;13423:67;;;13416:74;;13523:66;13519:1;13514:3;13510:11;13503:87;13618:2;13613:3;13609:12;13602:19;;13409:218;;;;13688:2261;;13833:5;13828:3;13824:15;13924:3;13917:5;13913:15;13907:22;13935:61;13991:3;13986;13982:13;13969:11;13935:61;;;13854:148;14082:4;14075:5;14071:16;14065:23;14094:62;14150:4;14145:3;14141:14;14128:11;14094:62;;;14012:150;14249:4;14242:5;14238:16;14232:23;14261:62;14317:4;14312:3;14308:14;14295:11;14261:62;;;14172:157;14410:4;14403:5;14399:16;14393:23;14422:62;14478:4;14473:3;14469:14;14456:11;14422:62;;;14339:151;14574:4;14567:5;14563:16;14557:23;14586:62;14642:4;14637:3;14633:14;14620:11;14586:62;;;14500:154;14738:4;14731:5;14727:16;14721:23;14750:62;14806:4;14801:3;14797:14;14784:11;14750:62;;;14664:154;14894:4;14887:5;14883:16;14877:23;14906:62;14962:4;14957:3;14953:14;14940:11;14906:62;;;14828:146;15050:4;15043:5;15039:16;15033:23;15062:62;15118:4;15113:3;15109:14;15096:11;15062:62;;;14984:146;15219:5;15212;15208:17;15202:24;15232:63;15288:5;15283:3;15279:15;15266:11;15232:63;;;15140:161;15373:5;15366;15362:17;15356:24;15386:63;15442:5;15437:3;15433:15;15420:11;15386:63;;;15311:144;15537:5;15530;15526:17;15520:24;15591:3;15585:4;15581:14;15573:5;15568:3;15564:15;15557:39;15611:66;15672:4;15659:11;15611:66;;;15603:74;;15465:224;15771:5;15764;15760:17;15754:24;15825:3;15819:4;15815:14;15807:5;15802:3;15798:15;15791:39;15845:66;15906:4;15893:11;15845:66;;;15837:74;;15699:224;15940:4;15933:11;;13806:2143;;;;;;16023:555;;16166:4;16161:3;16157:14;16253:3;16246:5;16242:15;16236:22;16303:3;16297:4;16293:14;16287:3;16282;16278:13;16271:37;16323:68;16386:4;16373:11;16323:68;;;16315:76;;16186:217;16478:4;16471:5;16467:16;16461:23;16490:56;16540:4;16535:3;16531:14;16518:11;16490:56;;;16413:139;16569:4;16562:11;;16139:439;;;;;;16585:110;16658:31;16683:5;16658:31;;;16653:3;16646:44;16640:55;;;16702:120;16785:31;16810:5;16785:31;;;16780:3;16773:44;16767:55;;;16829:286;;16985:105;17086:3;17077:6;17069;16985:105;;;16978:112;;17107:3;17100:10;;16966:149;;;;;;17122:213;;17240:2;17229:9;17225:18;17217:26;;17254:71;17322:1;17311:9;17307:17;17298:6;17254:71;;;17211:124;;;;;17342:457;;17558:2;17547:9;17543:18;17535:26;;17608:9;17602:4;17598:20;17594:1;17583:9;17579:17;17572:47;17633:156;17784:4;17775:6;17633:156;;;17625:164;;17529:270;;;;;17806:201;;17918:2;17907:9;17903:18;17895:26;;17932:65;17994:1;17983:9;17979:17;17970:6;17932:65;;;17889:118;;;;;18014:407;;18205:2;18194:9;18190:18;18182:26;;18255:9;18249:4;18245:20;18241:1;18230:9;18226:17;18219:47;18280:131;18406:4;18280:131;;;18272:139;;18176:245;;;;18428:407;;18619:2;18608:9;18604:18;18596:26;;18669:9;18663:4;18659:20;18655:1;18644:9;18640:17;18633:47;18694:131;18820:4;18694:131;;;18686:139;;18590:245;;;;18842:407;;19033:2;19022:9;19018:18;19010:26;;19083:9;19077:4;19073:20;19069:1;19058:9;19054:17;19047:47;19108:131;19234:4;19108:131;;;19100:139;;19004:245;;;;19256:407;;19447:2;19436:9;19432:18;19424:26;;19497:9;19491:4;19487:20;19483:1;19472:9;19468:17;19461:47;19522:131;19648:4;19522:131;;;19514:139;;19418:245;;;;19670:407;;19861:2;19850:9;19846:18;19838:26;;19911:9;19905:4;19901:20;19897:1;19886:9;19882:17;19875:47;19936:131;20062:4;19936:131;;;19928:139;;19832:245;;;;20084:407;;20275:2;20264:9;20260:18;20252:26;;20325:9;20319:4;20315:20;20311:1;20300:9;20296:17;20289:47;20350:131;20476:4;20350:131;;;20342:139;;20246:245;;;;20498:655;;20734:2;20723:9;20719:18;20711:26;;20784:9;20778:4;20774:20;20770:1;20759:9;20755:17;20748:47;20809:102;20906:4;20897:6;20809:102;;;20801:110;;20922:72;20990:2;20979:9;20975:18;20966:6;20922:72;;;21042:9;21036:4;21032:20;21027:2;21016:9;21012:18;21005:48;21067:76;21138:4;21129:6;21067:76;;;21059:84;;20705:448;;;;;;;21160:709;;21395:3;21384:9;21380:19;21372:27;;21410:71;21478:1;21467:9;21463:17;21454:6;21410:71;;;21492:72;21560:2;21549:9;21545:18;21536:6;21492:72;;;21612:9;21606:4;21602:20;21597:2;21586:9;21582:18;21575:48;21637:76;21708:4;21699:6;21637:76;;;21629:84;;21761:9;21755:4;21751:20;21746:2;21735:9;21731:18;21724:48;21786:73;21854:4;21845:6;21786:73;;;21778:81;;21366:503;;;;;;;;21876:256;;21938:2;21932:9;21922:19;;21976:4;21968:6;21964:17;22075:6;22063:10;22060:22;22039:18;22027:10;22024:34;22021:62;22018:2;;;22096:1;22093;22086:12;22018:2;22116:10;22112:2;22105:22;21916:216;;;;;22139:254;;22278:18;22270:6;22267:30;22264:2;;;22310:1;22307;22300:12;22264:2;22354:4;22350:9;22343:4;22335:6;22331:17;22327:33;22319:41;;22383:4;22377;22373:15;22365:23;;22201:192;;;;22400:258;;22543:18;22535:6;22532:30;22529:2;;;22575:1;22572;22565:12;22529:2;22619:4;22615:9;22608:4;22600:6;22596:17;22592:33;22584:41;;22648:4;22642;22638:15;22630:23;;22466:192;;;;22667:145;;22800:4;22792:6;22788:17;22777:28;;22769:43;;;;22823:125;;22899:4;22896:1;22889:15;22936:4;22933:1;22923:18;22911:30;;22881:67;;;;22957:131;;23077:5;23071:12;23061:22;;23055:33;;;;23095:87;;23171:5;23165:12;23155:22;;23149:33;;;;23189:91;;23269:5;23263:12;23253:22;;23247:33;;;;23287:88;;23364:5;23358:12;23348:22;;23342:33;;;;23383:146;;23518:4;23510:6;23506:17;23495:28;;23488:41;;;;23538:202;;23692:6;23687:3;23680:19;23729:4;23724:3;23720:14;23705:29;;23673:67;;;;;23749:152;;23853:6;23848:3;23841:19;23890:4;23885:3;23881:14;23866:29;;23834:67;;;;;23910:162;;24024:6;24019:3;24012:19;24061:4;24056:3;24052:14;24037:29;;24005:67;;;;;24081:153;;24186:6;24181:3;24174:19;24223:4;24218:3;24214:14;24199:29;;24167:67;;;;;24243:163;;24358:6;24353:3;24346:19;24395:4;24390:3;24386:14;24371:29;;24339:67;;;;;24415:145;;24551:3;24536:18;;24529:31;;;;;24568:105;;24637:31;24662:5;24637:31;;;24626:42;;24620:53;;;;24680:92;;24760:5;24753:13;24746:21;24735:32;;24729:43;;;;24779:128;;24859:42;24852:5;24848:54;24837:65;;24831:76;;;;24914:79;;24983:5;24972:16;;24966:27;;;;25000:105;;25069:31;25094:5;25069:31;;;25058:42;;25052:53;;;;25112:92;;25192:5;25185:13;25178:21;25167:32;;25161:43;;;;25211:79;;25280:5;25269:16;;25263:27;;;;25297:128;;25377:42;25370:5;25366:54;25355:65;;25349:76;;;;25432:79;;25501:5;25490:16;;25484:27;;;;25519:145;25600:6;25595:3;25590;25577:30;25656:1;25647:6;25642:3;25638:16;25631:27;25570:94;;;;25673:268;25738:1;25745:101;25759:6;25756:1;25753:13;25745:101;;;25835:1;25830:3;25826:11;25820:18;25816:1;25811:3;25807:11;25800:39;25781:2;25778:1;25774:10;25769:15;;25745:101;;;25861:6;25858:1;25855:13;25852:2;;;25926:1;25917:6;25912:3;25908:16;25901:27;25852:2;25722:219;;;;;25949:97;;26037:2;26033:7;26028:2;26021:5;26017:14;26013:28;26003:38;;25997:49;;;",
  "source": "/*\n\n  Copyright 2019 Microsponsors, Inc.\n  This work has been modified for use by Microsponsors, Inc.\n  This derivative work is licensed under the Apache License, Version 2.0\n  Original license notice below:\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/Ownable.sol\";\n\n\ncontract Whitelist is\n    Ownable\n{\n\n    // Microsponsors data:\n\n    // Mapping of address => array of UserContent structs\n    struct UserContent {\n        string contentId;\n        bool isExist;\n    }\n    mapping (address => UserContent[]) private userContent;\n\n    // Mapping of contentId => address\n    mapping (string => address) private contentIdToAddress;\n\n    // Mapping of address => whitelist status.\n    mapping (address => bool) public isWhitelisted;\n\n\n    // Exchange contract.\n    // solhint-disable var-name-mixedcase\n    IExchange internal EXCHANGE;\n    bytes internal TX_ORIGIN_SIGNATURE;\n    // solhint-enable var-name-mixedcase\n\n    byte constant internal VALIDATOR_SIGNATURE_BYTE = \"\\x05\";\n\n    constructor (address _exchange)\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n        TX_ORIGIN_SIGNATURE = abi.encodePacked(address(this), VALIDATOR_SIGNATURE_BYTE);\n    }\n\n    /// @dev Admin adds or remove an address & domain mapping from the whitelist.\n    /// @param target Address to add or remove from whitelist.\n    /// @param contentId To map to ethereum address to.\n    /// @param isApproved Whitelist status to assign to address.\n    function adminUpdateWhitelist(\n        address target,\n        string calldata contentId,\n        bool isApproved\n    )\n        external\n        onlyOwner\n    {\n\n        // TODO: check for duplicate contentId\n        userContent[target].push(UserContent(contentId, true));\n        contentIdToAddress[contentId] = target;\n        isWhitelisted[target] = isApproved;\n    }\n\n\n    /// @dev Admin updates whitelist status for a given address.\n    /// @param target Address to add or remove from Whitelist.\n    /// @param isApproved Whitelist status to assign to address.\n    function adminUpdateStatus(\n        address target,\n        bool isApproved\n    )\n        external\n        onlyOwner\n    {\n\n        require(\n          userContent[target][0].isExist,\n          'ADDRESS_HAS_NO_CONTENT_IDS'\n        );\n\n        isWhitelisted[target] = isApproved;\n\n    }\n\n    function adminGetAddressByContentId(\n        string calldata contentId\n    )\n        external\n        view\n        onlyOwner\n        returns (address target)\n    {\n\n        require(\n            isWhitelisted[ contentIdToAddress[contentId] ],\n            \"ADDRESS_NOT_WHITELISTED\"\n        );\n\n        return contentIdToAddress[contentId];\n    }\n\n    /// @dev Admin gets contentIds mapped to a valid whitelisted address.\n    /// @param target Ethereum address to validate & return contentId for.\n    function adminGetContentIdsByAddress(\n        address target\n    )\n        external\n        view\n        onlyOwner\n        returns (UserContent[] memory)\n    {\n\n        require(\n            isWhitelisted[target],\n            \"ADDRESS_NOT_WHITELISTED\"\n        );\n\n        return userContent[target];\n\n    }\n\n    /// @dev Valid whitelisted address can query its own contentIds.\n    function getContentIdsByAddress()\n        external\n        view\n        returns (UserContent[] memory)\n    {\n\n        require(\n            isWhitelisted[msg.sender],\n            'INVALID_SENDER'\n        );\n\n        return userContent[msg.sender];\n\n    }\n\n    /// @dev Verifies signer is same as signer of current Ethereum transaction.\n    ///      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n    ///      Extra safety checks can be added for a production contract.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    // solhint-disable no-unused-vars\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        // solhint-disable-next-line avoid-tx-origin\n        return signerAddress == tx.origin;\n    }\n    // solhint-enable no-unused-vars\n\n    /// @dev Fills an order using `msg.sender` as the taker.\n    ///      The transaction will revert if both the maker and taker are not whitelisted.\n    ///      Orders should specify this contract as the `senderAddress` in order to gaurantee\n    ///      that both maker and taker have been whitelisted.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n    /// @param orderSignature Proof that order has been created by maker.\n    function fillOrderIfWhitelisted(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        uint256 salt,\n        bytes memory orderSignature\n    )\n        public\n    {\n        address takerAddress = msg.sender;\n\n        // This contract must be the entry point for the transaction.\n        require(\n            // solhint-disable-next-line avoid-tx-origin\n            takerAddress == tx.origin,\n            \"INVALID_SENDER\"\n        );\n\n        // Check if maker is on the whitelist.\n        require(\n            isWhitelisted[order.makerAddress],\n            \"MAKER_NOT_WHITELISTED\"\n        );\n\n        // Check if taker is on the whitelist.\n        require(\n            isWhitelisted[takerAddress],\n            \"TAKER_NOT_WHITELISTED\"\n        );\n\n        // Encode arguments into byte array.\n        bytes memory data = abi.encodeWithSelector(\n            EXCHANGE.fillOrder.selector,\n            order,\n            takerAssetFillAmount,\n            orderSignature\n        );\n\n        // Call `fillOrder` via `executeTransaction`.\n        EXCHANGE.executeTransaction(\n            salt,\n            takerAddress,\n            data,\n            TX_ORIGIN_SIGNATURE\n        );\n    }\n}\n",
  "sourcePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
  "ast": {
    "absolutePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
    "exportedSymbols": {
      "Whitelist": [
        586
      ]
    },
    "id": 587,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 329,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "785:23:8"
      },
      {
        "id": 330,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "809:33:8"
      },
      {
        "absolutePath": "/Users/lauren/github/registry-contract/contracts/IExchange.sol",
        "file": "./IExchange.sol",
        "id": 331,
        "nodeType": "ImportDirective",
        "scope": 587,
        "sourceUnit": 37,
        "src": "844:25:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "file": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "id": 332,
        "nodeType": "ImportDirective",
        "scope": 587,
        "sourceUnit": 844,
        "src": "870:64:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "file": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "id": 333,
        "nodeType": "ImportDirective",
        "scope": 587,
        "sourceUnit": 892,
        "src": "935:55:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 334,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 891,
              "src": "1019:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$891",
                "typeString": "contract Ownable"
              }
            },
            "id": 335,
            "nodeType": "InheritanceSpecifier",
            "src": "1019:7:8"
          }
        ],
        "contractDependencies": [
          891,
          1068
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 586,
        "linearizedBaseContracts": [
          586,
          891,
          1068
        ],
        "name": "Whitelist",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Whitelist.UserContent",
            "id": 340,
            "members": [
              {
                "constant": false,
                "id": 337,
                "name": "contentId",
                "nodeType": "VariableDeclaration",
                "scope": 340,
                "src": "1149:16:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 336,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1149:6:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 339,
                "name": "isExist",
                "nodeType": "VariableDeclaration",
                "scope": 340,
                "src": "1175:12:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 338,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "1175:4:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "UserContent",
            "nodeType": "StructDefinition",
            "scope": 586,
            "src": "1120:74:8",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 345,
            "name": "userContent",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1199:54:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
              "typeString": "mapping(address => struct Whitelist.UserContent[])"
            },
            "typeName": {
              "id": 344,
              "keyType": {
                "id": 341,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1208:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1199:34:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                "typeString": "mapping(address => struct Whitelist.UserContent[])"
              },
              "valueType": {
                "baseType": {
                  "contractScope": null,
                  "id": 342,
                  "name": "UserContent",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 340,
                  "src": "1219:11:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserContent_$340_storage_ptr",
                    "typeString": "struct Whitelist.UserContent"
                  }
                },
                "id": 343,
                "length": null,
                "nodeType": "ArrayTypeName",
                "src": "1219:13:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_ptr",
                  "typeString": "struct Whitelist.UserContent[]"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 349,
            "name": "contentIdToAddress",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1299:54:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
              "typeString": "mapping(string => address)"
            },
            "typeName": {
              "id": 348,
              "keyType": {
                "id": 346,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1308:6:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "1299:27:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                "typeString": "mapping(string => address)"
              },
              "valueType": {
                "id": 347,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1318:7:8",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 353,
            "name": "isWhitelisted",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1407:46:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 352,
              "keyType": {
                "id": 350,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1416:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1407:25:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 351,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1427:4:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 355,
            "name": "EXCHANGE",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1529:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IExchange_$36",
              "typeString": "contract IExchange"
            },
            "typeName": {
              "contractScope": null,
              "id": 354,
              "name": "IExchange",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 36,
              "src": "1529:9:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IExchange_$36",
                "typeString": "contract IExchange"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 357,
            "name": "TX_ORIGIN_SIGNATURE",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1562:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 356,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "1562:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 360,
            "name": "VALIDATOR_SIGNATURE_BYTE",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1644:56:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes1",
              "typeString": "bytes1"
            },
            "typeName": {
              "id": 358,
              "name": "byte",
              "nodeType": "ElementaryTypeName",
              "src": "1644:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes1",
                "typeString": "bytes1"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "05",
              "id": 359,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1694:6:8",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_dbb8d0f4c497851a5043c6363657698cb1387682cac2f786c731f8936109d795",
                "typeString": "literal_string \"\u0005\""
              },
              "value": "\u0005"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 381,
              "nodeType": "Block",
              "src": "1758:137:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 365,
                      "name": "EXCHANGE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 355,
                      "src": "1768:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 367,
                          "name": "_exchange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 362,
                          "src": "1789:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 366,
                        "name": "IExchange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36,
                        "src": "1779:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IExchange_$36_$",
                          "typeString": "type(contract IExchange)"
                        }
                      },
                      "id": 368,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1779:20:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "src": "1768:31:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IExchange_$36",
                      "typeString": "contract IExchange"
                    }
                  },
                  "id": 370,
                  "nodeType": "ExpressionStatement",
                  "src": "1768:31:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 379,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 371,
                      "name": "TX_ORIGIN_SIGNATURE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 357,
                      "src": "1809:19:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage",
                        "typeString": "bytes storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 375,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1125,
                              "src": "1856:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Whitelist_$586",
                                "typeString": "contract Whitelist"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Whitelist_$586",
                                "typeString": "contract Whitelist"
                              }
                            ],
                            "id": 374,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1848:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 376,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1848:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 377,
                          "name": "VALIDATOR_SIGNATURE_BYTE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 360,
                          "src": "1863:24:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 372,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1070,
                          "src": "1831:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 373,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1831:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 378,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1831:57:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "1809:79:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage",
                      "typeString": "bytes storage ref"
                    }
                  },
                  "id": 380,
                  "nodeType": "ExpressionStatement",
                  "src": "1809:79:8"
                }
              ]
            },
            "documentation": null,
            "id": 382,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 363,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 362,
                  "name": "_exchange",
                  "nodeType": "VariableDeclaration",
                  "scope": 382,
                  "src": "1720:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 361,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1720:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1719:19:8"
            },
            "returnParameters": {
              "id": 364,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1758:0:8"
            },
            "scope": 586,
            "src": "1707:188:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 415,
              "nodeType": "Block",
              "src": "2326:211:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 398,
                            "name": "contentId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 386,
                            "src": "2421:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 399,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2432:4:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 397,
                          "name": "UserContent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 340,
                          "src": "2409:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_struct$_UserContent_$340_storage_ptr_$",
                            "typeString": "type(struct Whitelist.UserContent storage pointer)"
                          }
                        },
                        "id": 400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "structConstructorCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2409:28:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserContent_$340_memory",
                          "typeString": "struct Whitelist.UserContent memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_UserContent_$340_memory",
                          "typeString": "struct Whitelist.UserContent memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 393,
                          "name": "userContent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 345,
                          "src": "2384:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                            "typeString": "mapping(address => struct Whitelist.UserContent storage ref[] storage ref)"
                          }
                        },
                        "id": 395,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 394,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 384,
                          "src": "2396:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2384:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage",
                          "typeString": "struct Whitelist.UserContent storage ref[] storage ref"
                        }
                      },
                      "id": 396,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "2384:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_UserContent_$340_storage_$returns$_t_uint256_$",
                        "typeString": "function (struct Whitelist.UserContent storage ref) returns (uint256)"
                      }
                    },
                    "id": 401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2384:54:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 402,
                  "nodeType": "ExpressionStatement",
                  "src": "2384:54:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 403,
                        "name": "contentIdToAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "2448:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                          "typeString": "mapping(string memory => address)"
                        }
                      },
                      "id": 405,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 404,
                        "name": "contentId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 386,
                        "src": "2467:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2448:29:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 406,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 384,
                      "src": "2480:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2448:38:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 408,
                  "nodeType": "ExpressionStatement",
                  "src": "2448:38:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 413,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 409,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 353,
                        "src": "2496:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 411,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 410,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 384,
                        "src": "2510:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2496:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 412,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 388,
                      "src": "2520:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2496:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 414,
                  "nodeType": "ExpressionStatement",
                  "src": "2496:34:8"
                }
              ]
            },
            "documentation": "@dev Admin adds or remove an address & domain mapping from the whitelist.\n @param target Address to add or remove from whitelist.\n @param contentId To map to ethereum address to.\n @param isApproved Whitelist status to assign to address.",
            "id": 416,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 391,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 390,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 871,
                  "src": "2312:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2312:9:8"
              }
            ],
            "name": "adminUpdateWhitelist",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 389,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 384,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 416,
                  "src": "2206:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 383,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2206:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 386,
                  "name": "contentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 416,
                  "src": "2230:25:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 385,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2230:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 388,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 416,
                  "src": "2265:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 387,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2265:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2196:90:8"
            },
            "returnParameters": {
              "id": 392,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2326:0:8"
            },
            "scope": 586,
            "src": "2167:370:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 441,
              "nodeType": "Block",
              "src": "2858:163:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 426,
                              "name": "userContent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 345,
                              "src": "2888:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                                "typeString": "mapping(address => struct Whitelist.UserContent storage ref[] storage ref)"
                              }
                            },
                            "id": 428,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 427,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 418,
                              "src": "2900:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2888:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage",
                              "typeString": "struct Whitelist.UserContent storage ref[] storage ref"
                            }
                          },
                          "id": 430,
                          "indexExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 429,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2908:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2888:22:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserContent_$340_storage",
                            "typeString": "struct Whitelist.UserContent storage ref"
                          }
                        },
                        "id": 431,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isExist",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 339,
                        "src": "2888:30:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4841535f4e4f5f434f4e54454e545f494453",
                        "id": 432,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2930:28:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2c9414fa5abd3e6cdba8126f5a89b9cde20182a0d17d1cf024bb387d764e793a",
                          "typeString": "literal_string \"ADDRESS_HAS_NO_CONTENT_IDS\""
                        },
                        "value": "ADDRESS_HAS_NO_CONTENT_IDS"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2c9414fa5abd3e6cdba8126f5a89b9cde20182a0d17d1cf024bb387d764e793a",
                          "typeString": "literal_string \"ADDRESS_HAS_NO_CONTENT_IDS\""
                        }
                      ],
                      "id": 425,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "2869:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 433,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2869:99:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 434,
                  "nodeType": "ExpressionStatement",
                  "src": "2869:99:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 439,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 435,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 353,
                        "src": "2979:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 437,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 436,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 418,
                        "src": "2993:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2979:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 438,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 420,
                      "src": "3003:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2979:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 440,
                  "nodeType": "ExpressionStatement",
                  "src": "2979:34:8"
                }
              ]
            },
            "documentation": "@dev Admin updates whitelist status for a given address.\n @param target Address to add or remove from Whitelist.\n @param isApproved Whitelist status to assign to address.",
            "id": 442,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 423,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 422,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 871,
                  "src": "2844:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2844:9:8"
              }
            ],
            "name": "adminUpdateStatus",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 421,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 418,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 442,
                  "src": "2773:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 417,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2773:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 420,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 442,
                  "src": "2797:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 419,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2797:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2763:55:8"
            },
            "returnParameters": {
              "id": 424,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2858:0:8"
            },
            "scope": 586,
            "src": "2737:284:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 464,
              "nodeType": "Block",
              "src": "3189:181:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 452,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "3221:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 456,
                        "indexExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 453,
                            "name": "contentIdToAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 349,
                            "src": "3236:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                              "typeString": "mapping(string memory => address)"
                            }
                          },
                          "id": 455,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 454,
                            "name": "contentId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 444,
                            "src": "3255:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3236:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3221:46:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 457,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3281:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 451,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "3200:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 458,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3200:116:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 459,
                  "nodeType": "ExpressionStatement",
                  "src": "3200:116:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 460,
                      "name": "contentIdToAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 349,
                      "src": "3334:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                        "typeString": "mapping(string memory => address)"
                      }
                    },
                    "id": 462,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 461,
                      "name": "contentId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 444,
                      "src": "3353:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_calldata_ptr",
                        "typeString": "string calldata"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3334:29:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 450,
                  "id": 463,
                  "nodeType": "Return",
                  "src": "3327:36:8"
                }
              ]
            },
            "documentation": null,
            "id": 465,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 447,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 446,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 871,
                  "src": "3142:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3142:9:8"
              }
            ],
            "name": "adminGetAddressByContentId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 445,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 444,
                  "name": "contentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "3072:25:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 443,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3072:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3062:41:8"
            },
            "returnParameters": {
              "id": 450,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 449,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "3169:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 448,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3169:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3168:16:8"
            },
            "scope": 586,
            "src": "3027:343:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 486,
              "nodeType": "Block",
              "src": "3683:147:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 476,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "3715:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 478,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 477,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 467,
                          "src": "3729:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3715:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 479,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3750:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 475,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "3694:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 480,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3694:91:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 481,
                  "nodeType": "ExpressionStatement",
                  "src": "3694:91:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 482,
                      "name": "userContent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 345,
                      "src": "3803:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct Whitelist.UserContent storage ref[] storage ref)"
                      }
                    },
                    "id": 484,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 483,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 467,
                      "src": "3815:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3803:19:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage",
                      "typeString": "struct Whitelist.UserContent storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 474,
                  "id": 485,
                  "nodeType": "Return",
                  "src": "3796:26:8"
                }
              ]
            },
            "documentation": "@dev Admin gets contentIds mapped to a valid whitelisted address.\n @param target Ethereum address to validate & return contentId for.",
            "id": 487,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 470,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 469,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 871,
                  "src": "3630:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3630:9:8"
              }
            ],
            "name": "adminGetContentIdsByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 467,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "3571:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 466,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3571:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3561:30:8"
            },
            "returnParameters": {
              "id": 474,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 473,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "3657:20:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserContent_$340_memory_$dyn_memory_ptr",
                    "typeString": "struct Whitelist.UserContent[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 471,
                      "name": "UserContent",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 340,
                      "src": "3657:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserContent_$340_storage_ptr",
                        "typeString": "struct Whitelist.UserContent"
                      }
                    },
                    "id": 472,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "3657:13:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_ptr",
                      "typeString": "struct Whitelist.UserContent[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3656:22:8"
            },
            "scope": 586,
            "src": "3525:305:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 506,
              "nodeType": "Block",
              "src": "4012:146:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 494,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "4044:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 497,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 495,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1083,
                            "src": "4058:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4058:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4044:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4083:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 493,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "4023:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 499,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4023:86:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 500,
                  "nodeType": "ExpressionStatement",
                  "src": "4023:86:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 501,
                      "name": "userContent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 345,
                      "src": "4127:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct Whitelist.UserContent storage ref[] storage ref)"
                      }
                    },
                    "id": 504,
                    "indexExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 502,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1083,
                        "src": "4139:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 503,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "4139:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4127:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage",
                      "typeString": "struct Whitelist.UserContent storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 492,
                  "id": 505,
                  "nodeType": "Return",
                  "src": "4120:30:8"
                }
              ]
            },
            "documentation": "@dev Valid whitelisted address can query its own contentIds.",
            "id": 507,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getContentIdsByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 488,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3936:2:8"
            },
            "returnParameters": {
              "id": 492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 491,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 507,
                  "src": "3986:20:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserContent_$340_memory_$dyn_memory_ptr",
                    "typeString": "struct Whitelist.UserContent[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 489,
                      "name": "UserContent",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 340,
                      "src": "3986:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserContent_$340_storage_ptr",
                        "typeString": "struct Whitelist.UserContent"
                      }
                    },
                    "id": 490,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "3986:13:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_ptr",
                      "typeString": "struct Whitelist.UserContent[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3985:22:8"
            },
            "scope": 586,
            "src": "3905:253:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 523,
              "nodeType": "Block",
              "src": "4820:103:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 521,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 518,
                      "name": "signerAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 511,
                      "src": "4890:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 519,
                        "name": "tx",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1095,
                        "src": "4907:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_transaction",
                          "typeString": "tx"
                        }
                      },
                      "id": 520,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "origin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "4907:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "4890:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 517,
                  "id": 522,
                  "nodeType": "Return",
                  "src": "4883:33:8"
                }
              ]
            },
            "documentation": "@dev Verifies signer is same as signer of current Ethereum transaction.\n      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n      Extra safety checks can be added for a production contract.\n @param signerAddress Address that should have signed the given hash.\n @param signature Proof of signing.\n @return Validity of order signature.",
            "id": 524,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSignature",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 509,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 524,
                  "src": "4671:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 508,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4671:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 511,
                  "name": "signerAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 524,
                  "src": "4693:21:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 510,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4693:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 513,
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 524,
                  "src": "4724:24:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 512,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4724:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4661:93:8"
            },
            "returnParameters": {
              "id": 517,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 516,
                  "name": "isValid",
                  "nodeType": "VariableDeclaration",
                  "scope": 524,
                  "src": "4802:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 515,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4802:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4801:14:8"
            },
            "scope": 586,
            "src": "4636:287:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 584,
              "nodeType": "Block",
              "src": "5763:1013:8",
              "statements": [
                {
                  "assignments": [
                    536
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 536,
                      "name": "takerAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 584,
                      "src": "5773:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 535,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5773:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 539,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 537,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1083,
                      "src": "5796:3:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 538,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "5796:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5773:33:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 544,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 541,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 536,
                          "src": "5965:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 542,
                            "name": "tx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1095,
                            "src": "5981:2:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_transaction",
                              "typeString": "tx"
                            }
                          },
                          "id": 543,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "origin",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5981:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5965:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 545,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6004:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 540,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "5887:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 546,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5887:143:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 547,
                  "nodeType": "ExpressionStatement",
                  "src": "5887:143:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 549,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "6109:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 552,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 550,
                            "name": "order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 526,
                            "src": "6123:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Order_$788_memory_ptr",
                              "typeString": "struct LibOrder.Order memory"
                            }
                          },
                          "id": 551,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "makerAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 765,
                          "src": "6123:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6109:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d414b45525f4e4f545f57484954454c4953544544",
                        "id": 553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6156:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        },
                        "value": "MAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 548,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "6088:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 554,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6088:101:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 555,
                  "nodeType": "ExpressionStatement",
                  "src": "6088:101:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 557,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "6268:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 559,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 558,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 536,
                          "src": "6282:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6268:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54414b45525f4e4f545f57484954454c4953544544",
                        "id": 560,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6309:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        },
                        "value": "TAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 556,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "6247:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 561,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6247:95:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 562,
                  "nodeType": "ExpressionStatement",
                  "src": "6247:95:8"
                },
                {
                  "assignments": [
                    564
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 564,
                      "name": "data",
                      "nodeType": "VariableDeclaration",
                      "scope": 584,
                      "src": "6398:17:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 563,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6398:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 574,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 567,
                            "name": "EXCHANGE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 355,
                            "src": "6454:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IExchange_$36",
                              "typeString": "contract IExchange"
                            }
                          },
                          "id": 568,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "fillOrder",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 57,
                          "src": "6454:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_struct$_Order_$788_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_struct$_FillResults_$669_memory_ptr_$",
                            "typeString": "function (struct LibOrder.Order memory,uint256,bytes memory) external returns (struct LibFillResults.FillResults memory)"
                          }
                        },
                        "id": 569,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "6454:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 570,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 526,
                        "src": "6495:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Order_$788_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 571,
                        "name": "takerAssetFillAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 528,
                        "src": "6514:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 572,
                        "name": "orderSignature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 532,
                        "src": "6548:14:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_struct$_Order_$788_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 565,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "6418:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 566,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSelector",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "6418:22:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes4) pure returns (bytes memory)"
                      }
                    },
                    "id": 573,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6418:154:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6398:174:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 578,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 530,
                        "src": "6678:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 579,
                        "name": "takerAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "6696:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 580,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 564,
                        "src": "6722:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 581,
                        "name": "TX_ORIGIN_SIGNATURE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 357,
                        "src": "6740:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 575,
                        "name": "EXCHANGE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 355,
                        "src": "6637:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IExchange_$36",
                          "typeString": "contract IExchange"
                        }
                      },
                      "id": 577,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "executeTransaction",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 132,
                      "src": "6637:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,address,bytes memory,bytes memory) external"
                      }
                    },
                    "id": 582,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6637:132:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 583,
                  "nodeType": "ExpressionStatement",
                  "src": "6637:132:8"
                }
              ]
            },
            "documentation": "@dev Fills an order using `msg.sender` as the taker.\n      The transaction will revert if both the maker and taker are not whitelisted.\n      Orders should specify this contract as the `senderAddress` in order to gaurantee\n      that both maker and taker have been whitelisted.\n @param order Order struct containing order specifications.\n @param takerAssetFillAmount Desired amount of takerAsset to sell.\n @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n @param orderSignature Proof that order has been created by maker.",
            "id": 585,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fillOrderIfWhitelisted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 526,
                  "name": "order",
                  "nodeType": "VariableDeclaration",
                  "scope": 585,
                  "src": "5613:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$788_memory_ptr",
                    "typeString": "struct LibOrder.Order"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 525,
                    "name": "LibOrder.Order",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 788,
                    "src": "5613:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$788_storage_ptr",
                      "typeString": "struct LibOrder.Order"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 528,
                  "name": "takerAssetFillAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 585,
                  "src": "5650:28:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 527,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5650:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 530,
                  "name": "salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 585,
                  "src": "5688:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 529,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5688:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 532,
                  "name": "orderSignature",
                  "nodeType": "VariableDeclaration",
                  "scope": 585,
                  "src": "5710:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 531,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5710:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5603:140:8"
            },
            "returnParameters": {
              "id": 534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5763:0:8"
            },
            "scope": 586,
            "src": "5572:1204:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 587,
        "src": "993:5785:8"
      }
    ],
    "src": "785:5994:8"
  },
  "legacyAST": {
    "absolutePath": "/Users/lauren/github/registry-contract/contracts/Whitelist.sol",
    "exportedSymbols": {
      "Whitelist": [
        586
      ]
    },
    "id": 587,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 329,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "785:23:8"
      },
      {
        "id": 330,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "809:33:8"
      },
      {
        "absolutePath": "/Users/lauren/github/registry-contract/contracts/IExchange.sol",
        "file": "./IExchange.sol",
        "id": 331,
        "nodeType": "ImportDirective",
        "scope": 587,
        "sourceUnit": 37,
        "src": "844:25:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "file": "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol",
        "id": 332,
        "nodeType": "ImportDirective",
        "scope": 587,
        "sourceUnit": 844,
        "src": "870:64:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "file": "@0x/contracts-utils/contracts/src/Ownable.sol",
        "id": 333,
        "nodeType": "ImportDirective",
        "scope": 587,
        "sourceUnit": 892,
        "src": "935:55:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 334,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 891,
              "src": "1019:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$891",
                "typeString": "contract Ownable"
              }
            },
            "id": 335,
            "nodeType": "InheritanceSpecifier",
            "src": "1019:7:8"
          }
        ],
        "contractDependencies": [
          891,
          1068
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 586,
        "linearizedBaseContracts": [
          586,
          891,
          1068
        ],
        "name": "Whitelist",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Whitelist.UserContent",
            "id": 340,
            "members": [
              {
                "constant": false,
                "id": 337,
                "name": "contentId",
                "nodeType": "VariableDeclaration",
                "scope": 340,
                "src": "1149:16:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 336,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1149:6:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 339,
                "name": "isExist",
                "nodeType": "VariableDeclaration",
                "scope": 340,
                "src": "1175:12:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 338,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "1175:4:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "UserContent",
            "nodeType": "StructDefinition",
            "scope": 586,
            "src": "1120:74:8",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 345,
            "name": "userContent",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1199:54:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
              "typeString": "mapping(address => struct Whitelist.UserContent[])"
            },
            "typeName": {
              "id": 344,
              "keyType": {
                "id": 341,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1208:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1199:34:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                "typeString": "mapping(address => struct Whitelist.UserContent[])"
              },
              "valueType": {
                "baseType": {
                  "contractScope": null,
                  "id": 342,
                  "name": "UserContent",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 340,
                  "src": "1219:11:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserContent_$340_storage_ptr",
                    "typeString": "struct Whitelist.UserContent"
                  }
                },
                "id": 343,
                "length": null,
                "nodeType": "ArrayTypeName",
                "src": "1219:13:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_ptr",
                  "typeString": "struct Whitelist.UserContent[]"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 349,
            "name": "contentIdToAddress",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1299:54:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
              "typeString": "mapping(string => address)"
            },
            "typeName": {
              "id": 348,
              "keyType": {
                "id": 346,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1308:6:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "1299:27:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                "typeString": "mapping(string => address)"
              },
              "valueType": {
                "id": 347,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1318:7:8",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 353,
            "name": "isWhitelisted",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1407:46:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 352,
              "keyType": {
                "id": 350,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1416:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1407:25:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 351,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1427:4:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 355,
            "name": "EXCHANGE",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1529:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IExchange_$36",
              "typeString": "contract IExchange"
            },
            "typeName": {
              "contractScope": null,
              "id": 354,
              "name": "IExchange",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 36,
              "src": "1529:9:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IExchange_$36",
                "typeString": "contract IExchange"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 357,
            "name": "TX_ORIGIN_SIGNATURE",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1562:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 356,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "1562:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 360,
            "name": "VALIDATOR_SIGNATURE_BYTE",
            "nodeType": "VariableDeclaration",
            "scope": 586,
            "src": "1644:56:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes1",
              "typeString": "bytes1"
            },
            "typeName": {
              "id": 358,
              "name": "byte",
              "nodeType": "ElementaryTypeName",
              "src": "1644:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes1",
                "typeString": "bytes1"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "05",
              "id": 359,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1694:6:8",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_dbb8d0f4c497851a5043c6363657698cb1387682cac2f786c731f8936109d795",
                "typeString": "literal_string \"\u0005\""
              },
              "value": "\u0005"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 381,
              "nodeType": "Block",
              "src": "1758:137:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 365,
                      "name": "EXCHANGE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 355,
                      "src": "1768:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 367,
                          "name": "_exchange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 362,
                          "src": "1789:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 366,
                        "name": "IExchange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36,
                        "src": "1779:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IExchange_$36_$",
                          "typeString": "type(contract IExchange)"
                        }
                      },
                      "id": 368,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1779:20:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$36",
                        "typeString": "contract IExchange"
                      }
                    },
                    "src": "1768:31:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IExchange_$36",
                      "typeString": "contract IExchange"
                    }
                  },
                  "id": 370,
                  "nodeType": "ExpressionStatement",
                  "src": "1768:31:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 379,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 371,
                      "name": "TX_ORIGIN_SIGNATURE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 357,
                      "src": "1809:19:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage",
                        "typeString": "bytes storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 375,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1125,
                              "src": "1856:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Whitelist_$586",
                                "typeString": "contract Whitelist"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Whitelist_$586",
                                "typeString": "contract Whitelist"
                              }
                            ],
                            "id": 374,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1848:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 376,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1848:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 377,
                          "name": "VALIDATOR_SIGNATURE_BYTE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 360,
                          "src": "1863:24:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 372,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1070,
                          "src": "1831:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 373,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1831:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 378,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1831:57:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "1809:79:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage",
                      "typeString": "bytes storage ref"
                    }
                  },
                  "id": 380,
                  "nodeType": "ExpressionStatement",
                  "src": "1809:79:8"
                }
              ]
            },
            "documentation": null,
            "id": 382,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 363,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 362,
                  "name": "_exchange",
                  "nodeType": "VariableDeclaration",
                  "scope": 382,
                  "src": "1720:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 361,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1720:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1719:19:8"
            },
            "returnParameters": {
              "id": 364,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1758:0:8"
            },
            "scope": 586,
            "src": "1707:188:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 415,
              "nodeType": "Block",
              "src": "2326:211:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 398,
                            "name": "contentId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 386,
                            "src": "2421:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 399,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2432:4:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 397,
                          "name": "UserContent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 340,
                          "src": "2409:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_struct$_UserContent_$340_storage_ptr_$",
                            "typeString": "type(struct Whitelist.UserContent storage pointer)"
                          }
                        },
                        "id": 400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "structConstructorCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2409:28:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserContent_$340_memory",
                          "typeString": "struct Whitelist.UserContent memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_UserContent_$340_memory",
                          "typeString": "struct Whitelist.UserContent memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 393,
                          "name": "userContent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 345,
                          "src": "2384:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                            "typeString": "mapping(address => struct Whitelist.UserContent storage ref[] storage ref)"
                          }
                        },
                        "id": 395,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 394,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 384,
                          "src": "2396:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2384:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage",
                          "typeString": "struct Whitelist.UserContent storage ref[] storage ref"
                        }
                      },
                      "id": 396,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "2384:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_UserContent_$340_storage_$returns$_t_uint256_$",
                        "typeString": "function (struct Whitelist.UserContent storage ref) returns (uint256)"
                      }
                    },
                    "id": 401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2384:54:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 402,
                  "nodeType": "ExpressionStatement",
                  "src": "2384:54:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 403,
                        "name": "contentIdToAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "2448:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                          "typeString": "mapping(string memory => address)"
                        }
                      },
                      "id": 405,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 404,
                        "name": "contentId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 386,
                        "src": "2467:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2448:29:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 406,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 384,
                      "src": "2480:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2448:38:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 408,
                  "nodeType": "ExpressionStatement",
                  "src": "2448:38:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 413,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 409,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 353,
                        "src": "2496:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 411,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 410,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 384,
                        "src": "2510:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2496:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 412,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 388,
                      "src": "2520:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2496:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 414,
                  "nodeType": "ExpressionStatement",
                  "src": "2496:34:8"
                }
              ]
            },
            "documentation": "@dev Admin adds or remove an address & domain mapping from the whitelist.\n @param target Address to add or remove from whitelist.\n @param contentId To map to ethereum address to.\n @param isApproved Whitelist status to assign to address.",
            "id": 416,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 391,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 390,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 871,
                  "src": "2312:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2312:9:8"
              }
            ],
            "name": "adminUpdateWhitelist",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 389,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 384,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 416,
                  "src": "2206:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 383,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2206:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 386,
                  "name": "contentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 416,
                  "src": "2230:25:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 385,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2230:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 388,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 416,
                  "src": "2265:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 387,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2265:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2196:90:8"
            },
            "returnParameters": {
              "id": 392,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2326:0:8"
            },
            "scope": 586,
            "src": "2167:370:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 441,
              "nodeType": "Block",
              "src": "2858:163:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 426,
                              "name": "userContent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 345,
                              "src": "2888:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                                "typeString": "mapping(address => struct Whitelist.UserContent storage ref[] storage ref)"
                              }
                            },
                            "id": 428,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 427,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 418,
                              "src": "2900:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2888:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage",
                              "typeString": "struct Whitelist.UserContent storage ref[] storage ref"
                            }
                          },
                          "id": 430,
                          "indexExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 429,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2908:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2888:22:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserContent_$340_storage",
                            "typeString": "struct Whitelist.UserContent storage ref"
                          }
                        },
                        "id": 431,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isExist",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 339,
                        "src": "2888:30:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4841535f4e4f5f434f4e54454e545f494453",
                        "id": 432,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2930:28:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2c9414fa5abd3e6cdba8126f5a89b9cde20182a0d17d1cf024bb387d764e793a",
                          "typeString": "literal_string \"ADDRESS_HAS_NO_CONTENT_IDS\""
                        },
                        "value": "ADDRESS_HAS_NO_CONTENT_IDS"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2c9414fa5abd3e6cdba8126f5a89b9cde20182a0d17d1cf024bb387d764e793a",
                          "typeString": "literal_string \"ADDRESS_HAS_NO_CONTENT_IDS\""
                        }
                      ],
                      "id": 425,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "2869:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 433,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2869:99:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 434,
                  "nodeType": "ExpressionStatement",
                  "src": "2869:99:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 439,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 435,
                        "name": "isWhitelisted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 353,
                        "src": "2979:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 437,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 436,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 418,
                        "src": "2993:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2979:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 438,
                      "name": "isApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 420,
                      "src": "3003:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2979:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 440,
                  "nodeType": "ExpressionStatement",
                  "src": "2979:34:8"
                }
              ]
            },
            "documentation": "@dev Admin updates whitelist status for a given address.\n @param target Address to add or remove from Whitelist.\n @param isApproved Whitelist status to assign to address.",
            "id": 442,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 423,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 422,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 871,
                  "src": "2844:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2844:9:8"
              }
            ],
            "name": "adminUpdateStatus",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 421,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 418,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 442,
                  "src": "2773:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 417,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2773:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 420,
                  "name": "isApproved",
                  "nodeType": "VariableDeclaration",
                  "scope": 442,
                  "src": "2797:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 419,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2797:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2763:55:8"
            },
            "returnParameters": {
              "id": 424,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2858:0:8"
            },
            "scope": 586,
            "src": "2737:284:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 464,
              "nodeType": "Block",
              "src": "3189:181:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 452,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "3221:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 456,
                        "indexExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 453,
                            "name": "contentIdToAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 349,
                            "src": "3236:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                              "typeString": "mapping(string memory => address)"
                            }
                          },
                          "id": 455,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 454,
                            "name": "contentId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 444,
                            "src": "3255:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3236:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3221:46:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 457,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3281:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 451,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "3200:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 458,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3200:116:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 459,
                  "nodeType": "ExpressionStatement",
                  "src": "3200:116:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 460,
                      "name": "contentIdToAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 349,
                      "src": "3334:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_$_t_address_$",
                        "typeString": "mapping(string memory => address)"
                      }
                    },
                    "id": 462,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 461,
                      "name": "contentId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 444,
                      "src": "3353:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_calldata_ptr",
                        "typeString": "string calldata"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3334:29:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 450,
                  "id": 463,
                  "nodeType": "Return",
                  "src": "3327:36:8"
                }
              ]
            },
            "documentation": null,
            "id": 465,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 447,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 446,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 871,
                  "src": "3142:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3142:9:8"
              }
            ],
            "name": "adminGetAddressByContentId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 445,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 444,
                  "name": "contentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "3072:25:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 443,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3072:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3062:41:8"
            },
            "returnParameters": {
              "id": 450,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 449,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "3169:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 448,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3169:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3168:16:8"
            },
            "scope": 586,
            "src": "3027:343:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 486,
              "nodeType": "Block",
              "src": "3683:147:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 476,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "3715:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 478,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 477,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 467,
                          "src": "3729:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3715:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "414444524553535f4e4f545f57484954454c4953544544",
                        "id": 479,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3750:25:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        },
                        "value": "ADDRESS_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c75805c89ace7f04ee6f3028a95190568ce425213650d9736e5b110adf20c61",
                          "typeString": "literal_string \"ADDRESS_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 475,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "3694:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 480,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3694:91:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 481,
                  "nodeType": "ExpressionStatement",
                  "src": "3694:91:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 482,
                      "name": "userContent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 345,
                      "src": "3803:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct Whitelist.UserContent storage ref[] storage ref)"
                      }
                    },
                    "id": 484,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 483,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 467,
                      "src": "3815:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3803:19:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage",
                      "typeString": "struct Whitelist.UserContent storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 474,
                  "id": 485,
                  "nodeType": "Return",
                  "src": "3796:26:8"
                }
              ]
            },
            "documentation": "@dev Admin gets contentIds mapped to a valid whitelisted address.\n @param target Ethereum address to validate & return contentId for.",
            "id": 487,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 470,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 469,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 871,
                  "src": "3630:9:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3630:9:8"
              }
            ],
            "name": "adminGetContentIdsByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 467,
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "3571:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 466,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3571:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3561:30:8"
            },
            "returnParameters": {
              "id": 474,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 473,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "3657:20:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserContent_$340_memory_$dyn_memory_ptr",
                    "typeString": "struct Whitelist.UserContent[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 471,
                      "name": "UserContent",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 340,
                      "src": "3657:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserContent_$340_storage_ptr",
                        "typeString": "struct Whitelist.UserContent"
                      }
                    },
                    "id": 472,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "3657:13:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_ptr",
                      "typeString": "struct Whitelist.UserContent[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3656:22:8"
            },
            "scope": 586,
            "src": "3525:305:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 506,
              "nodeType": "Block",
              "src": "4012:146:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 494,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "4044:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 497,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 495,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1083,
                            "src": "4058:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4058:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4044:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4083:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 493,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "4023:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 499,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4023:86:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 500,
                  "nodeType": "ExpressionStatement",
                  "src": "4023:86:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 501,
                      "name": "userContent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 345,
                      "src": "4127:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct Whitelist.UserContent storage ref[] storage ref)"
                      }
                    },
                    "id": 504,
                    "indexExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 502,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1083,
                        "src": "4139:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 503,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "4139:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4127:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage",
                      "typeString": "struct Whitelist.UserContent storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 492,
                  "id": 505,
                  "nodeType": "Return",
                  "src": "4120:30:8"
                }
              ]
            },
            "documentation": "@dev Valid whitelisted address can query its own contentIds.",
            "id": 507,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getContentIdsByAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 488,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3936:2:8"
            },
            "returnParameters": {
              "id": 492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 491,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 507,
                  "src": "3986:20:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserContent_$340_memory_$dyn_memory_ptr",
                    "typeString": "struct Whitelist.UserContent[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 489,
                      "name": "UserContent",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 340,
                      "src": "3986:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserContent_$340_storage_ptr",
                        "typeString": "struct Whitelist.UserContent"
                      }
                    },
                    "id": 490,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "3986:13:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserContent_$340_storage_$dyn_storage_ptr",
                      "typeString": "struct Whitelist.UserContent[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3985:22:8"
            },
            "scope": 586,
            "src": "3905:253:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 523,
              "nodeType": "Block",
              "src": "4820:103:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 521,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 518,
                      "name": "signerAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 511,
                      "src": "4890:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 519,
                        "name": "tx",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1095,
                        "src": "4907:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_transaction",
                          "typeString": "tx"
                        }
                      },
                      "id": 520,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "origin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "4907:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "4890:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 517,
                  "id": 522,
                  "nodeType": "Return",
                  "src": "4883:33:8"
                }
              ]
            },
            "documentation": "@dev Verifies signer is same as signer of current Ethereum transaction.\n      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n      Extra safety checks can be added for a production contract.\n @param signerAddress Address that should have signed the given hash.\n @param signature Proof of signing.\n @return Validity of order signature.",
            "id": 524,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSignature",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 509,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 524,
                  "src": "4671:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 508,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4671:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 511,
                  "name": "signerAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 524,
                  "src": "4693:21:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 510,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4693:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 513,
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 524,
                  "src": "4724:24:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 512,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4724:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4661:93:8"
            },
            "returnParameters": {
              "id": 517,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 516,
                  "name": "isValid",
                  "nodeType": "VariableDeclaration",
                  "scope": 524,
                  "src": "4802:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 515,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4802:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4801:14:8"
            },
            "scope": 586,
            "src": "4636:287:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 584,
              "nodeType": "Block",
              "src": "5763:1013:8",
              "statements": [
                {
                  "assignments": [
                    536
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 536,
                      "name": "takerAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 584,
                      "src": "5773:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 535,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5773:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 539,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 537,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1083,
                      "src": "5796:3:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 538,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "5796:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5773:33:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 544,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 541,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 536,
                          "src": "5965:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 542,
                            "name": "tx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1095,
                            "src": "5981:2:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_transaction",
                              "typeString": "tx"
                            }
                          },
                          "id": 543,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "origin",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5981:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5965:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "494e56414c49445f53454e444552",
                        "id": 545,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6004:16:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        },
                        "value": "INVALID_SENDER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_db738cfea6a49ef4e8f6a59c278add0dfddfdb2462adac18e44f8df0bef7fd64",
                          "typeString": "literal_string \"INVALID_SENDER\""
                        }
                      ],
                      "id": 540,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "5887:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 546,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5887:143:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 547,
                  "nodeType": "ExpressionStatement",
                  "src": "5887:143:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 549,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "6109:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 552,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 550,
                            "name": "order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 526,
                            "src": "6123:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Order_$788_memory_ptr",
                              "typeString": "struct LibOrder.Order memory"
                            }
                          },
                          "id": 551,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "makerAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 765,
                          "src": "6123:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6109:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d414b45525f4e4f545f57484954454c4953544544",
                        "id": 553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6156:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        },
                        "value": "MAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cc67f401fb3a00b1861b75ee8b8e8253069a92db113d75c1e882562da60c320f",
                          "typeString": "literal_string \"MAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 548,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "6088:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 554,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6088:101:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 555,
                  "nodeType": "ExpressionStatement",
                  "src": "6088:101:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 557,
                          "name": "isWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 353,
                          "src": "6268:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 559,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 558,
                          "name": "takerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 536,
                          "src": "6282:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6268:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54414b45525f4e4f545f57484954454c4953544544",
                        "id": 560,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6309:23:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        },
                        "value": "TAKER_NOT_WHITELISTED"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a6bdeefb5ffbf08bc3b31532993bd6096f9d4b7010a96f46cc14f3151941958",
                          "typeString": "literal_string \"TAKER_NOT_WHITELISTED\""
                        }
                      ],
                      "id": 556,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1086,
                        1087
                      ],
                      "referencedDeclaration": 1087,
                      "src": "6247:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 561,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6247:95:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 562,
                  "nodeType": "ExpressionStatement",
                  "src": "6247:95:8"
                },
                {
                  "assignments": [
                    564
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 564,
                      "name": "data",
                      "nodeType": "VariableDeclaration",
                      "scope": 584,
                      "src": "6398:17:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 563,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6398:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 574,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 567,
                            "name": "EXCHANGE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 355,
                            "src": "6454:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IExchange_$36",
                              "typeString": "contract IExchange"
                            }
                          },
                          "id": 568,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "fillOrder",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 57,
                          "src": "6454:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_struct$_Order_$788_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_struct$_FillResults_$669_memory_ptr_$",
                            "typeString": "function (struct LibOrder.Order memory,uint256,bytes memory) external returns (struct LibFillResults.FillResults memory)"
                          }
                        },
                        "id": 569,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "6454:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 570,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 526,
                        "src": "6495:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Order_$788_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 571,
                        "name": "takerAssetFillAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 528,
                        "src": "6514:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 572,
                        "name": "orderSignature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 532,
                        "src": "6548:14:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_struct$_Order_$788_memory_ptr",
                          "typeString": "struct LibOrder.Order memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 565,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "6418:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 566,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSelector",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "6418:22:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes4) pure returns (bytes memory)"
                      }
                    },
                    "id": 573,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6418:154:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6398:174:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 578,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 530,
                        "src": "6678:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 579,
                        "name": "takerAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "6696:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 580,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 564,
                        "src": "6722:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 581,
                        "name": "TX_ORIGIN_SIGNATURE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 357,
                        "src": "6740:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 575,
                        "name": "EXCHANGE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 355,
                        "src": "6637:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IExchange_$36",
                          "typeString": "contract IExchange"
                        }
                      },
                      "id": 577,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "executeTransaction",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 132,
                      "src": "6637:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,address,bytes memory,bytes memory) external"
                      }
                    },
                    "id": 582,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6637:132:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 583,
                  "nodeType": "ExpressionStatement",
                  "src": "6637:132:8"
                }
              ]
            },
            "documentation": "@dev Fills an order using `msg.sender` as the taker.\n      The transaction will revert if both the maker and taker are not whitelisted.\n      Orders should specify this contract as the `senderAddress` in order to gaurantee\n      that both maker and taker have been whitelisted.\n @param order Order struct containing order specifications.\n @param takerAssetFillAmount Desired amount of takerAsset to sell.\n @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n @param orderSignature Proof that order has been created by maker.",
            "id": 585,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fillOrderIfWhitelisted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 526,
                  "name": "order",
                  "nodeType": "VariableDeclaration",
                  "scope": 585,
                  "src": "5613:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$788_memory_ptr",
                    "typeString": "struct LibOrder.Order"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 525,
                    "name": "LibOrder.Order",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 788,
                    "src": "5613:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$788_storage_ptr",
                      "typeString": "struct LibOrder.Order"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 528,
                  "name": "takerAssetFillAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 585,
                  "src": "5650:28:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 527,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5650:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 530,
                  "name": "salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 585,
                  "src": "5688:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 529,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5688:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 532,
                  "name": "orderSignature",
                  "nodeType": "VariableDeclaration",
                  "scope": 585,
                  "src": "5710:27:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 531,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5710:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5603:140:8"
            },
            "returnParameters": {
              "id": 534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5763:0:8"
            },
            "scope": 586,
            "src": "5572:1204:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 587,
        "src": "993:5785:8"
      }
    ],
    "src": "785:5994:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.5+commit.47a71e8f.Emscripten.clang"
  },
  "networks": {
    "1562896219544": {
      "events": {},
      "links": {},
      "address": "0x872558d54082E0f77e77C24fA7349BD914030115",
      "transactionHash": "0x5921d95f89dbb077e3eee681603ed852cdd3b5043748bfadc071420c548a2c9d"
    }
  },
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-07-12T01:51:01.167Z",
  "devdoc": {
    "methods": {
      "adminGetContentIdsByAddress(address)": {
        "details": "Admin gets contentIds mapped to a valid whitelisted address.",
        "params": {
          "target": "Ethereum address to validate & return contentId for."
        }
      },
      "adminUpdateStatus(address,bool)": {
        "details": "Admin updates whitelist status for a given address.",
        "params": {
          "isApproved": "Whitelist status to assign to address.",
          "target": "Address to add or remove from Whitelist."
        }
      },
      "adminUpdateWhitelist(address,string,bool)": {
        "details": "Admin adds or remove an address & domain mapping from the whitelist.",
        "params": {
          "contentId": "To map to ethereum address to.",
          "isApproved": "Whitelist status to assign to address.",
          "target": "Address to add or remove from whitelist."
        }
      },
      "fillOrderIfWhitelisted((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,uint256,bytes)": {
        "details": "Fills an order using `msg.sender` as the taker.      The transaction will revert if both the maker and taker are not whitelisted.      Orders should specify this contract as the `senderAddress` in order to gaurantee      that both maker and taker have been whitelisted.",
        "params": {
          "order": "Order struct containing order specifications.",
          "orderSignature": "Proof that order has been created by maker.",
          "salt": "Arbitrary value to gaurantee uniqueness of 0x transaction hash.",
          "takerAssetFillAmount": "Desired amount of takerAsset to sell."
        }
      },
      "getContentIdsByAddress()": {
        "details": "Valid whitelisted address can query its own contentIds."
      },
      "isValidSignature(bytes32,address,bytes)": {
        "details": "Verifies signer is same as signer of current Ethereum transaction.      NOTE: This function can currently be used to validate signatures coming from outside of this contract.      Extra safety checks can be added for a production contract.",
        "params": {
          "signature": "Proof of signing.",
          "signerAddress": "Address that should have signed the given hash."
        },
        "return": "Validity of order signature."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}